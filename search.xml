<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu系统安装</title>
      <link href="/ubuntu-xi-tong-an-zhuang.html"/>
      <url>/ubuntu-xi-tong-an-zhuang.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本安装教程包含在虚拟机上安装Ubuntu和在实机上安装Ubuntu，虚拟机使用的 <font color=#f86b1d>VMware Workstation 16 pro</font>，系统镜像是<font color=#f86b1d>ubuntu-20.04</font>。</p><blockquote><p>Ubuntu官网：<a href="https://cn.ubuntu.com/download/desktop">Ubuntu桌面系统</a></p></blockquote><h2 id="虚拟机上安装"><a href="#虚拟机上安装" class="headerlink" title="虚拟机上安装"></a>虚拟机上安装</h2><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><ol><li><p>打开VMware，<font color=#f86b1d>文件–新建虚拟机</font>。配置选择典型，然后下一步。<br><img src="https://s2.loli.net/2022/01/30/5Dfxz8LQR46KXcn.png"></p></li><li><p>【安装客户机操作系统】窗口中，选择：稍后安装操作系统，然后下一步。<br><img src="https://s2.loli.net/2022/01/30/31JUIbAaYdS2qRw.png"></p></li><li><p>【选择客户机操作系统】窗口中，操作系统选择：Linux，版本选择：Ubuntu 64位，然后下一步。<br><img src="https://s2.loli.net/2022/01/30/peqf4JPygGxlva8.png"></p></li><li><p>【命名虚拟机】窗口中，虚拟机名称：为了便于区分不同的虚拟机，一般用系统镜像版本命名，例如：Ubuntu20.04。位置：选择用于存放虚拟机的目录，然后下一步。<br><img src="https://s2.loli.net/2022/01/30/kv3gtM1jpiwfOG6.png"></p></li><li><p>【指定磁盘容量】窗口中，大小根据需要自己分配，下面选择：建议将虚拟磁盘存储为单个文件，然后下一步。<br><img src="https://s2.loli.net/2022/01/30/QimMqFgk3VS7odr.png"></p></li><li><p>【已准备好创建虚拟机】窗口中，选择：完成。</p></li></ol><h3 id="分配硬件资源"><a href="#分配硬件资源" class="headerlink" title="分配硬件资源"></a>分配硬件资源</h3><p>选中刚新建的虚拟机右键打开设置，【虚拟机设置】窗口中，根据自己的硬件条件，适当分配一些硬件资源。</p><p>其中 <font color=#f86b1d>CD/DVD(STAT)</font>，在右侧 “连接” 板块内选择 “使用ISO镜像文件”，并指定已下载的Ubuntu镜像文件。</p><p>分配好虚拟机的硬件资源后点击【确定】。<br><img src="https://s2.loli.net/2022/01/30/wFbM2ljHeqNnaVS.png"></p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><ol><li><p>开启此虚拟机，加载完成后，左侧语言选择中文(简体)，然后选择安装Ubuntu。<br><img src="https://s2.loli.net/2022/01/30/MlvFc2n8EaUskyt.png"></p></li><li><p>选择键盘布局，继续。<br><img src="https://s2.loli.net/2022/01/30/Z45i7r1N6QH2gIY.png"></p></li></ol><blockquote><p>小技巧：如果窗口显示不全，按住Alt+F7，同时按下鼠标左键，然后拖动窗口。</p></blockquote><ol start="3"><li><p>【更新和其他软件】窗口，取消 “安装Ubuntu时下载更新” 选项，点击继续。<br><img src="https://s2.loli.net/2022/01/30/FEhWnklDzSOtePx.png"></p></li><li><p>【安装类型】窗口，“清楚整个磁盘并安装Ubuntu” 选项会自动分区，“其它选项” 可以自定义分区，我这里选择第一项，点击 “现在安装”，随后弹出【将改动写入此盘吗】窗口，选择 “继续”。<br><img src="https://s2.loli.net/2022/01/30/Q4CI3uKJvpNbPqY.png"></p></li><li><p>时区选择 “Shang-hai”，然后点击 “继续”。<br><img src="https://s2.loli.net/2022/01/30/sTxApz1vNZn3ec9.png"></p></li><li><p>填写账户名和密码，然后点击 “继续”。<br><img src="https://s2.loli.net/2022/01/30/8aATnWeIiCDvGj2.png"></p></li><li><p>最后等待安装完成，点击虚拟机下面 “我已完成安装”，然后重启。<br><img src="https://s2.loli.net/2022/01/30/qzs19nK36GpOQxv.png"></p></li></ol><p>如果重启时提示移除镜像设备，则选中虚拟机右键进入设置，其中 <font color=#f86b1d>CD/DVD(STAT)</font>，在右侧 “连接” 板块内选择 “使用物理驱动器”，然后重启。<br><img src="https://s2.loli.net/2022/01/30/QMasYG2g3BfuC74.png"></p><h2 id="实机上安装"><a href="#实机上安装" class="headerlink" title="实机上安装"></a>实机上安装</h2><h3 id="制作U盘启动盘"><a href="#制作U盘启动盘" class="headerlink" title="制作U盘启动盘"></a>制作U盘启动盘</h3><blockquote><p>准备工作：一个4G以上的U盘，下载好<a href="https://github.com/pbatard/rufus/releases/download/v3.17/rufus-3.17p.exe">Rufus</a>，下载好系统镜像。</p></blockquote><ol><li><p>打开Rufus软件，U盘插入电脑，在Rufus中选择你的U盘设备。<br><img src="https://s2.loli.net/2022/01/30/jiVEFxZylBC9tUM.png"></p></li><li><p>选择你之前下载的 Ubuntu ISO 文件，点击 “引导类型选择” 右边的 “选择”。找到你下载的镜像文件，点击打开。<br><img src="https://s2.loli.net/2022/01/30/oRmhKeMSFD3sPiU.png"></p></li><li><p>其他参数默认即可，然后单击 “开始”。可能会收到警告，Rufus需要其他文件才能完成ISO的编写。如果出现此对话框，请选择是继续。<br><img src="https://s2.loli.net/2022/01/30/MFu2J1ijBTfdcHY.png"></p></li><li><p>然后会提醒您Rufus已经检测到Ubuntu ISO是一个ISO混合映像。这意味着同一图像文件可以用作DVD和U盘的源，而无需转换。保持在ISO映像模式下写入的选中状态，然后单击确定继续。<br><img src="https://s2.loli.net/2022/01/30/kWMxqon9KvJu3lI.png"></p></li><li><p>等待进度条完全变绿显示就绪即表示制作完成。</p></li></ol><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>推荐按照下表进行分区<br><img src="https://s2.loli.net/2022/01/30/APDqy3ZaMVfC64j.png"></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客详解</title>
      <link href="/hexo-da-jian-bo-ke-xiang-jie.html"/>
      <url>/hexo-da-jian-bo-ke-xiang-jie.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是针对新手使用 <font color=#f86b1d>Hexo</font> 搭建个人博客的详细教程，涉及所需要的基础工具的安装与使用，从零定制自己的主题，因此篇幅较长。</p><p>使用 <font color=#f86b1d>github pages</font> 服务搭建博客的好处：</p><ul><li>免费，注册 GitHub 账号可以免费创建个人主页</li><li>可以随意绑定自己的域名</li><li>全是静态文件，访问速度快</li><li>博客内容可以轻松打包、转移、发布到其它平台</li></ul><blockquote><p>使用的主题是<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>，配置过程也参考了该主题<a href="https://blinkfox.github.io/">作者的博客</a>。</p></blockquote><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><h3 id="1-1-安装Git"><a href="#1-1-安装Git" class="headerlink" title="1.1 安装Git"></a>1.1 安装Git</h3><p>Git 是版本控制工具，使用Git把本地的文件上传到 GitHub。在<a href="https://git-scm.com/">Git官网</a>下载需要的版本，安装选项全部默认即可。在最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样可以直接在命令提示符里打开 git。安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。<br><img src="https://s2.loli.net/2021/12/30/wsBKuMpT7CDoXjf.png"></p><blockquote><p>Windows 系统命令行：win+R 打开 cmd</p></blockquote><h3 id="1-2-安装Node-js"><a href="#1-2-安装Node-js" class="headerlink" title="1.2 安装Node.js"></a>1.2 安装Node.js</h3><p>Hexo 是基于 <font color=#f86b1d>Node.js</font> 的，Node.js 下载地址：<a href="https://nodejs.org/zh-cn/download/">Download | Node.js</a> 。下载自己需要的版本，安装 Node.js 会包含环境变量及 npm 的安装，安装选项全部默认即可。安装后，打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。<br><img src="https://s2.loli.net/2021/12/30/2cEDaU8GpyQzueF.png"></p><blockquote><p>可以使用阿里的国内镜像进行加速​<br><code>npm config set registry https://registry.npm.taobao.org</code></p></blockquote><h3 id="1-3-创建仓库"><a href="#1-3-创建仓库" class="headerlink" title="1.3 创建仓库"></a>1.3 创建仓库</h3><p>登录到 GitHub，如果没有 GitHub 帐号，使用你的邮箱注册 GitHub 帐号：<a href="https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home">Sing up</a>。建议用户名用简短的英文小写，方便以后输入个人主页地址。</p><ol><li>新建一个名为你的用户名.github.io的仓库<br>比如说，github 用户名是 test，那么就新建 <code>test.github.io</code> 的仓库（必须是你的用户名，其它名称无效），将来网站访问地址就是 <code>https://test.github.io</code> 了。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219150755.png"><br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219151611.png"></li></ol><blockquote><p><strong>注意</strong>：新版 GitHub 默认分支已改为 main，本教程使用的 master 分支，建议先点击 setings 修改为master 再创建。默认 main 分支也可以，只是需要自行修改一些配置。</p></blockquote><ol start="2"><li>开启 GitHub Pages<br>进入仓库，点击<code>Settings</code>，向下拉到最后找到 <code>GitHub Pages</code>。启用成功后如下，显示的链接即为个人主页地址。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219152900.png"></li></ol><h3 id="1-4-绑定Git和GitHub账号"><a href="#1-4-绑定Git和GitHub账号" class="headerlink" title="1.4 绑定Git和GitHub账号"></a>1.4 绑定Git和GitHub账号</h3><ol><li>在任意文件夹下右键打开git bash here，然后输入下面命令：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的GitHub用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你的GitHub注册邮箱"</span></code></pre><ol start="2"><li>生成ssh密钥文件</li></ol><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的GitHub注册邮箱"</span></code></pre><ol start="3"><li>查看密钥</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><ol start="4"><li>打开 github，在头像下面点击 <font color=#f86b1d>settings</font>，再点击 <font color=#f86b1d>SSH and GPG keys</font>，新建一个 SSH，名字随便。将上一步输出的内容复制到框中，点击确定保存。输入<code>ssh -T git@github.com</code>，若出现你的用户名说明连接成功。</li></ol><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219154933.png"></p><blockquote><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes。</p></blockquote><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2 安装Hexo"></a>2 安装Hexo</h2><h3 id="2-1-Hexo简介"><a href="#2-1-Hexo简介" class="headerlink" title="2.1 Hexo简介"></a>2.1 Hexo简介</h3><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持 Markdown 格式，有众多优秀插件和主题。官网： <a href="http://hexo.io/">http://hexo.io</a>，github: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a>。</p><p>由于 github pages 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，那非常麻烦，所以 Hexo 所做的就是将这些 md 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 github。</p><h3 id="2-2-Hexo常用命令"><a href="#2-2-Hexo常用命令" class="headerlink" title="2.2 Hexo常用命令"></a>2.2 Hexo常用命令</h3><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"postName"</span> <span class="token comment" spellcheck="true"># 新建文章</span>hexo new page <span class="token string">"pageName"</span> <span class="token comment" spellcheck="true"># 新建页面</span>hexo generate <span class="token comment" spellcheck="true"># 生成静态页面至public目录</span>hexo server <span class="token comment" spellcheck="true"># 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>hexo deploy <span class="token comment" spellcheck="true"># 部署到GitHub</span>hexo <span class="token function">help</span>  <span class="token comment" spellcheck="true"># 查看帮助</span>hexo version  <span class="token comment" spellcheck="true"># 查看Hexo的版本</span><span class="token comment" spellcheck="true"># 缩写</span>hexo n <span class="token operator">==</span> hexo newhexo g <span class="token operator">==</span> hexo generatehexo s <span class="token operator">==</span> hexo serverhexo d <span class="token operator">==</span> hexo deploy<span class="token comment" spellcheck="true"># 组合命令</span>hexo s -g <span class="token comment" spellcheck="true"># 生成并本地预览</span>hexo d -g <span class="token comment" spellcheck="true"># 生成并上传</span><span class="token comment" spellcheck="true"># 关闭服务</span>ctrl+c</code></pre><h3 id="2-3-使用源代码搭建"><a href="#2-3-使用源代码搭建" class="headerlink" title="2.3 使用源代码搭建"></a>2.3 使用源代码搭建</h3><p>这种方式适用于想快速搭建好一个漂亮的博客，只需要做好上面的准备工作，然后下载源代码，稍微修改几个配置信息就好了。例如：使用我的配置完成后的博客源文件<a href="https://github.com/cfxin/Blog-matery">Blog-matery</a>，通过下面的几步操作即可快速获得一个风格类似的博客网站。</p><ol><li><p>打开命令行窗口，输入<code>npm i hexo-cli -g</code>安装 Hexo。安装完后输入<code>hexo -v</code>验证是否安装成功。</p></li><li><p>新建一个存放博客的文件夹，在该文件下右键打开<code>Git Bash Here</code>，输入命令下载我的博客源码到本地。</p></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:cfxin/Blog-matery.git</code></pre><ol start="3"><li><p>进入下载的文件内，解压 <font color=#f86b1d>node_modules.zip</font>，然后删除 <font color=#f86b1d>node_modules.zip</font> 和 <font color=#f86b1d>.git</font> 文件夹。</p></li><li><p>在博客根目录(Blog-matery/)下的<code>_config.yml</code>配置文件里修改基本信息</p></li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 网站标题    <span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 网站副标题<span class="token key atrule">description</span><span class="token punctuation">:</span> 简介，这里启用了打字效果<span class="token key atrule">keywords</span><span class="token punctuation">:</span> 网站关键字，便于搜索引擎收录，分类<span class="token key atrule">author</span><span class="token punctuation">:</span> 你的名字<span class="token key atrule">url</span><span class="token punctuation">:</span> 你的博客首页网址，（如：https<span class="token punctuation">:</span>//xxx.github.io）<span class="token key atrule">repository</span><span class="token punctuation">:</span> 你的仓库地址</code></pre><p><img src="https://s2.loli.net/2021/12/30/uNUmWF1nycqgtfX.png"></p><ol start="5"><li>在主题目录下的<code>_config.yml</code>配置文件里修改基本信息</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">dream</span><span class="token punctuation">:</span> 设置你想展示的文字<span class="token key atrule">favicon</span><span class="token punctuation">:</span>  浏览器标签页里显示的图标，位置：hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery/source/favicon.png<span class="token key atrule">logo</span><span class="token punctuation">:</span> 博客名字旁的图标，位置：hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery/source/medias/logo.png<span class="token key atrule">indexbtn</span><span class="token punctuation">:</span> url为Github个人主页<span class="token key atrule">socialLink</span><span class="token punctuation">:</span> 修改为你自己的社交链接信息，空着表示不启用。<span class="token key atrule">reward</span><span class="token punctuation">:</span> 替换为你自己的二维码图片<span class="token key atrule">profile</span><span class="token punctuation">:</span> 关于页面的个人信息<span class="token key atrule">mySkills</span><span class="token punctuation">:</span> 关于页面的个人技能信息<span class="token key atrule">subtitle</span><span class="token punctuation">:</span>  启用打字效果所显示的文字<span class="token key atrule">githubLink</span><span class="token punctuation">:</span> url为Github个人主页</code></pre><ol start="6"><li>在博客根目录下打开 git bash，使用下面命令生成并浏览博客页面，此时就可以得到一个和源代码作者一样的博客。</li></ol><pre class=" language-bash"><code class="language-bash">hexo g  <span class="token comment" spellcheck="true"># 生成博客网页文件</span>hexo s  <span class="token comment" spellcheck="true"># 本地预览博客</span></code></pre><p><img src="https://s2.loli.net/2022/01/02/RQwrv61U3JuhPoL.png"></p><blockquote><p>到这里已经可以使用 Hexo 写博客，在本地浏览。上传到 GitHub 个人主页仓库的过程后面再详细介绍。</p></blockquote><h3 id="2-4-从零开始搭建"><a href="#2-4-从零开始搭建" class="headerlink" title="2.4 从零开始搭建"></a>2.4 从零开始搭建</h3><p>这种方式适用于自己从头开始慢慢自定义主题，学习完整的博客搭建过程。</p><ol><li><p>新建一个文件夹，用于存放自己的博客文件，比如 <code>E:\project\blog</code>。在该目录下右键点击 Git Bash Here，打开 git 的控制台窗口，以后所有的操作都在 git 控制台进行。输入<code>npm i hexo-cli -g</code>安装Hexo。安装完后输入<code>hexo -v</code>验证是否安装成功。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219172853.png"></p></li><li><p>初始化网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。这样本地的网站配置也弄好了，文件夹下也会生成许多文件。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219173722.png"></p></li></ol><blockquote><p>node_modules：依赖包<br>public：存放生成的页面<br>scaffolds：文章模板文件<br>source：用来存放你的文章<br>themes：存放安装的主题<br>_config.yml：博客的配置文件</p></blockquote><ol start="3"><li><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<code>http://localhost:4000</code>，就可以看到我们的博客啦，效果如下：<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219173950.png"></p></li><li><p>打开博客根目录下的 <code>_config.yml</code> 文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。修改最后一行的配置，用于连接到之前创建的个人主页仓库。</p></li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'git'</span>  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>用户名/用户名.github.io.git <span class="token comment" spellcheck="true"># 之前创建的个人主页仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><ol start="5"><li><p>在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。输入<code>hexo new post &quot;文章标题&quot;</code>，新建一篇文章。然后打开 <code>E:\project\blog\source\_posts</code> 的目录，可以发现下面多了一个 <code>.md</code> 文件，这个文件就是你的文章文件。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219174541.png"><br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219174615.png"></p></li><li><p>编写完 markdown 文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到 github 上。这时打开你的 github.io 主页就能看到发布的文章。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219181551.png"></p></li></ol><blockquote><p>hexo d上传报错的话，可以在这里<a href="https://www.zhihu.com/question/38219432">链接</a>找找解决方法。</p></blockquote><h2 id="3-个性化设置"><a href="#3-个性化设置" class="headerlink" title="3 个性化设置"></a>3 个性化设置</h2><h3 id="更换主题（matery主题）"><a href="#更换主题（matery主题）" class="headerlink" title="更换主题（matery主题）"></a>更换主题（matery主题）</h3><p>主题的原地址在这里：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>，该主题作者的博客地址：<a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐</a>。按照作者的说明文档进行安装即可。</p><ol><li><strong>下载</strong><br>在 Hexo 根目录下的 <code>themes</code> 文件夹下打开 <code>Git Bash Here</code>, 使用 <code>Git clone</code> 命令来下载:</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><ol start="2"><li><strong>切换主题</strong><br>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></li></ol><p><code>_config.yml</code> 文件的修改建议:</p><ul><li>修改 <code>title</code> 的值为你的博客名字，如<code>xxxの博客</code>。</li><li>修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>，如：<code>http://xxx.github.io</code>。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>中文用户，则建议修改<code>language</code>的值为 <code>zh-CN</code>。</li></ul><blockquote><p>_config.yml 配置文件的<a href="https://hexo.io/zh-cn/docs/configuration">官方详细介绍文档</a></p></blockquote><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-12-20 15:32:02</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-12-20 15:37:36</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p>about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-12-20 15:40:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建友情连接-friends-页"><a href="#新建友情连接-friends-页" class="headerlink" title="新建友情连接 friends 页"></a>新建友情连接 friends 页</h3><p>friends 页是用来展示友情连接信息的页面，如果在你的博客 source 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-12-20 15:43:18</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>如需添加友情连接，则在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容填写示例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://blinkfox.com/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"现实的抽象是语言, 语言的抽象是程序, 程序的抽象是数理逻辑, 数理逻辑的抽象是超越认知的真理"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://blinkfox.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://cfxin.github.io/medias/avatar.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"程不懂"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"一只程序猿的冒险之路"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://cfxin.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span></code></pre><p>若更换之后花括号<code>&#123;&#125;</code>无法正常显示，而显示为<code>&amp;#123;</code>和<code>&amp;#125;</code>，则在博客根目录下找到<code>node_modules\hexo-prism-plugin\src\index.js</code>文件，将文件内<code>map&#123; &#125;</code>内容改为如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="添加搜索"><a href="#添加搜索" class="headerlink" title="添加搜索"></a>添加搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 gitment 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin Hexo</a> 插件使在生成文章时生成中文拼音的永久链接。安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p>除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可以做定制化的修改，需要自己去修改和加工。修改的地方在主题文件夹下的<code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和<code>邮箱</code>的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code>文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: fa-facebook</li><li>Twitter: fa-twitter</li><li>Google-plus: fa-google-plus</li><li>Linkedin: fa-linkedin</li><li>Tumblr: fa-tumblr</li><li>Medium: fa-medium</li><li>Slack: fa-slack</li><li>新浪微博: fa-weibo</li><li>微信: fa-wechat</li><li>QQ: fa-qq</li></ul><blockquote><p>注意: 本主题中使用的 Font Awesome 版本为 4.7.0。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h3><p>为了方便新建文章，建议将<code>/scaffolds/post.md</code>修改为如下代码，这样就不用自己写头信息，只需要修改信息即可。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">update</span><span class="token punctuation">:</span><span class="token key atrule">img</span><span class="token punctuation">:</span><span class="token key atrule">password</span><span class="token punctuation">:</span><span class="token key atrule">summary</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token punctuation">---</span></code></pre><h3 id="设置动态标签页标题"><a href="#设置动态标签页标题" class="headerlink" title="设置动态标签页标题"></a>设置动态标签页标题</h3><p>打开博客主题文件夹，路径：<code>themes\hexo-theme-matery\layout\layout.ejs</code>，添加如下代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            st<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"🙈看不见我~🙈"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span>                <span class="token string">"😛被发现了~😘"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="https://s2.loli.net/2021/12/30/7GgObjxqecPwEnJ.png"><br><img src="https://s2.loli.net/2021/12/30/ZPowMNdtpUasqi3.png"></p><h3 id="文章生成永久链接"><a href="#文章生成永久链接" class="headerlink" title="文章生成永久链接"></a>文章生成永久链接</h3><p><code>hexo</code>编译的站点打开文章的url默认是：<code>sitename/year/mounth/day/title</code>四层的结构. 这种结构, 当我们更新文章后会导致文章地址发生改变. 此外, 也不利于网站的SEO优化.</p><ul><li>方法一: </li></ul><p>我们可以将<code>url</code>直接改成<code>sitename/title</code>的形式，在博客根目录<code>_config.yml</code>文件里修改<code>permalink</code>如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cfxin.github.io/<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.html<span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span></code></pre><blockquote><p>这种方式不需要额外安装插件, 只要不修改文章标题, 链接就不会改变.</p></blockquote><ul><li>方法二:</li></ul><p>安装<code>hexo-abbrlink</code>插件, 它将原来的URL地址重新进行了进制转换和再编码。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><p>配置博客根目录下的<code>_config.yml</code>文件。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> archives/<span class="token punctuation">:</span>abbrlink.html <span class="token comment" spellcheck="true"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32  <span class="token comment" spellcheck="true"># 使用的加密算法</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex    <span class="token comment" spellcheck="true"># 十六进制</span></code></pre><blockquote><p>这种方式可以保证在我们修改了博客标题或博客发生更新之后都不会改变链接地址。</p></blockquote><h3 id="添加Emoji表情支持"><a href="#添加Emoji表情支持" class="headerlink" title="添加Emoji表情支持"></a>添加Emoji表情支持</h3><p>为了使我们的博客文章可以显示<code>Emoji</code>表情，需要安装<a href="https://npmmirror.com/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a>插件。该插件可以把用markdown emoji语法（:smile:）解析成对应的表情。<br><img src="https://s2.loli.net/2021/12/30/1VAbpEBRfLGl2ej.png"><br>安装命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>然后，在 Hexo 博客根目录下的<code>_config.yml</code>文件中，添加配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span></code></pre><blockquote><p>如果你用的微软输入法，那使用快捷<code>win+.</code>或<code>右键--&gt;表情符号</code>，可以调出Emoji表情符号。直接输入这些表情，hexo博客文章里也是能正常显示的，不需要安装上面的插件。<br><a href="https://www.emojiall.com/zh-hans">Emoji词典</a></p></blockquote><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>图片懒加载是用于优化网站加载速度的，它的原理是当你翻到图片的时候再加载那张图片，而不是以下将本页面的所有图片都加载完。需要用到<code>hexo-lazyload-image</code>插件，安装命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save</code></pre><p>然后，在 Hexo 博客根目录下的<code>_config.yml</code>文件中，添加配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /medias/loading.gif <span class="token comment" spellcheck="true"># 图片地址</span></code></pre><p>分享一个我使用的动图：<br><img src="https://s2.loli.net/2021/12/30/ZpycPsXoVzuTd3w.gif"></p><blockquote><ul><li><code>onlypost</code>：是否仅文章中的图片做懒加载，如果为 false，则主题中的其他图片，也会做懒加载，如头像，logo 等任何图片。</li><li><code>loadingImg</code>：图片未加载时的代替图，不填写使用默认加载图片，如果需要自定义，添填入 loading 图片地址，如果是本地图片，不要忘记把图片添加到你的主题目录下。 matery 主题可以将图片放到 \hexo-theme-matery\source\medias 目录下，然后引用时：loadingImg: /medias/图片文件名</li></ul></blockquote><p><code>注意</code>：使用图片懒加载可能会出现点击文章内图片放大查看时，全部显示为loading加载图。我使用的matery主题出现了该问题，解决方法是修改主题文件下的<code>\source\js\matery.js</code>，在 108 行左右添加以下代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="修改统计图的开始时间"><a href="#修改统计图的开始时间" class="headerlink" title="修改统计图的开始时间"></a>修改统计图的开始时间</h3><p>在关于页面内，文章发布统计图的开始时间默认是：当前年-月减一年，例如，我是2021年12月开始搭建博客发布文章，统计图的开始时间就是2020年12月。<br><img src="https://s2.loli.net/2021/12/30/MaJykhIDmoRNjKG.png"></p><p>这个开始时间设置的代码在<code>themes/matery/layout/_widget/post-charts.ejs</code>中，大约在 39 行左右，源代码为：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> startDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'years'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>subtract(1, &#39;years&#39;)</code>表示的就是当前时间减<code>1年</code>，数字的取值范围是<code>0-10</code>之间。我将其改为从上个月开始，即当前时间减<code>1个月</code>，修改后代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> startDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'months'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.loli.net/2021/12/30/zNrgABwE4omybD3.png"></p><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>我这里以思源宋体为例。</p><ul><li>在主题目录下的<code>source</code>文件夹内创建一个名为<code>font</code>的文件夹，用来统一存放你要用到的字体。</li><li>将要用到的字体放入创建的文件夹内，如 <code>matery/source/font/SourceHanSerif.ttc</code></li><li>找到主题文件夹下的<code>my.css</code>文件，路径为<code>/themes/matery/source/css/my.css</code>，填入下面的代码：</li></ul><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'SourceHanSerif'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../font/SourceHanSerif.ttc')</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'SourceHanSerif'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="添加自己的导航页"><a href="#添加自己的导航页" class="headerlink" title="添加自己的导航页"></a>添加自己的导航页</h3><p>给博客添加一个导航页，用于放一些自己经常访问的网站。</p><ul><li>首先，新建一个<code>页面(page)</code>，执行下面的命令：</li></ul><pre class=" language-bash"><code class="language-bash">hexo new page navigate</code></pre><ul><li><code>navigate</code>目录下的<code>index.md</code>写入以下内容：</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> navigate<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-12-30 20:52:28</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"navigate"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"navigate"</span><span class="token punctuation">---</span></code></pre><ul><li>在主题目下的<code>_config.yml</code>配置文件中<code>menu:</code>选项里添加导航页</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">导航</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /navigate    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>location<span class="token punctuation">-</span>arrow</code></pre><ul><li><code>/layout</code>下新建<code>navigate.ejs</code>，写入以下代码，其中导航链接根据自己的需要修改：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navi-height bg-cover pd-header <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> link-box container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--搜索框--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baidu baidu-2 large-screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;form name="f"action="https://www.baidu.com/"target="_blank"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Select-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;div class="Select-box-2"id="baidu"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">46</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this_s<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--&lt;li class="bing_s">必应&lt;/li>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>google_s<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>谷歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baidu_s<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;input name="wd"id="kw-2"maxlength="100"autocomplete="off"type="text"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;div class="qingkong"id="qingkong"title="清 除"style="display: none;">X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;input value="搜 索"id="su-2"type="submit"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keylist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--链接--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row tags-posts <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;div class="col s12 m6 l4 friend-div"data-aos="zoom-in-up"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-tit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>📺娱乐📺<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://cupfox.app/"class="link-3"target="_blank">茶杯狐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.playm3u8.cn/jiexi.php?url="class="link-3"target="_blank">Playm3u8解析<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.zhihu.com/explore"class="link-3"target="_blank">知乎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://v.qq.com/"class="link-3"target="_blank">腾讯视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="http://www.iqiyi.com/"class="link-3"target="_blank">爱奇艺<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.bilibili.com/"class="link-3"target="_blank">哔哩哔哩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://piaofang.maoyan.com/dashboard"class="link-3"target="_blank">猫眼电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://book.douban.com/"class="link-3"target="_blank">豆瓣读书<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.douyu.com/directory/all"class="link-3"target="_blank">斗鱼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;div class="col s12 m6 l4 friend-div"data-aos="zoom-in-up"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-tit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>🧰工具🧰<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://tools.pdf24.org/zh/"class="link-3"target="_blank">PDF24 Tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://tool.lu/"class="link-3"target="_blank">在线工具箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://sm.ms/"class="link-3"target="_blank">SM.MS图床<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.fococlipping.com/"class="link-3"target="_blank">去除图像背景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://uutool.cn/gif-edit/"class="link-3"target="_blank">GIF图片修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://docsmall.com/"class="link-3"target="_blank">图片压缩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://trace.moe/"class="link-3"target="_blank">动漫场景搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://getavataaars.com/"class="link-3"target="_blank">Q版头像生成器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://cowtransfer.com/"class="link-3"target="_blank">奶牛快传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;div class="col s12 m6 l4 friend-div"data-aos="zoom-in-up"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-tit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>👨‍💻编程👨‍💻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.dotcpp.com/run/"class="link-3"target="_blank">CPP在线编译<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://mofanpy.com/"class="link-3"target="_blank">莫烦Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://leetcode-cn.com/"class="link-3"target="_blank">力扣<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://visualgo.net/zh"class="link-3"target="_blank">算法可视化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="http://deeprl.neurondance.com/"class="link-3"target="_blank">强化学习实验室<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://c.runoob.com/"class="link-3"target="_blank">菜鸟工具<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://github.com/"class="link-3"target="_blank">Github<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://r2coding.com/#/"class="link-3"target="_blank">吾爱破解<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://my.openwrite.cn/"class="link-3"target="_blank">Road To Coding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;div class="col s12 m6 l4 friend-div"data-aos="zoom-in-up"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-tit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>🙆‍♂️资源🙆‍♂️<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://wall.alphacoders.com/?lang=Chinese"class="link-3"target="_blank">高清壁纸<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.100font.com/"class="link-3"target="_blank">免费字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.flaticon.com/"class="link-3"target="_blank">免费图标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.emojiall.com/zh-hans"class="link-3"target="_blank">Emoji字典<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://fontawesome.com/"class="link-3"target="_blank">Font Awesome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="http://zhongguose.com/"class="link-3"target="_blank">中国色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://github-trending.com/"class="link-3"target="_blank">GitHub趋势<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.tiobe.com/"class="link-3"target="_blank">编程趋势<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://trends.google.com/"class="link-3"target="_blank">Google趋势<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;div class="col s12 m6 l4 friend-div"data-aos="zoom-in-up"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-tit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>🔔社区🔔<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.oschina.net/"class="link-3"target="_blank">开源中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://hellogithub.com/"class="link-3"target="_blank">Hello GitHub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.icourse163.org/"class="link-3"target="_blank">中国大学慕课<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://open.163.com/"class="link-3"target="_blank">网易公开课<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.ituring.com.cn/"class="link-3"target="_blank">图灵社区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.runoob.com/"class="link-3"target="_blank">菜鸟教程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://distrowatch.com/"class="link-3"target="_blank">Linux发行版<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.lanqiao.cn/library/"class="link-3"target="_blank">蓝桥云课<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.aminer.cn/"class="link-3"target="_blank">AI科技情报<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;div class="col s12 m6 l4 friend-div"data-aos="zoom-in-up"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-tit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>💡其他💡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jj-list-con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://ac.scmor.com/"class="link-3"target="_blank">谷歌学术镜像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="http://www.pansoso.com/"class="link-3"target="_blank">网盘搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://www.yikm.net/"class="link-3"target="_blank">小霸王<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="http://www.tbtool.cn/"class="link-3"target="_blank">图吧工具箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://carbon.now.sh/"class="link-3"target="_blank">代码图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://dddd.cool/#/register?code=ugH0ehti"class="link-3"target="_blank">懂的都懂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://color.adobe.com/zh/explore/?filter=newest"class="link-3"target="_blank">调色盘<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://hexo.io/zh-cn/"class="link-3"target="_blank">Hexo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="https://pages.aliyundrive.com/mobile-page/web/beinvited.html?code=5dc456c"class="link-3"target="_blank">阿里云盘<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span><span class="token string">'auto'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span><span class="token string">'40px'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box-2 ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span><span class="token string">'auto'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span><span class="token string">'46px'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> _tihs<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _html<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>_tihs<span class="token operator">==</span><span class="token string">'baidu_s'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>_tihs<span class="token operator">=</span><span class="token string">'https://www.baidu.com/s'</span><span class="token punctuation">;</span>_name<span class="token operator">=</span><span class="token string">'wd'</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>_tihs<span class="token operator">==</span><span class="token string">'google_s'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>_tihs<span class="token operator">=</span><span class="token string">'https://www.google.com/search'</span><span class="token punctuation">;</span>_name<span class="token operator">=</span><span class="token string">'q'</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>_tihs<span class="token operator">==</span><span class="token string">'bing_s'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>_tihs<span class="token operator">=</span><span class="token string">'https://www.bing.com/search'</span><span class="token punctuation">;</span>_name<span class="token operator">=</span><span class="token string">'q'</span><span class="token punctuation">}</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.baidu form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">,</span>_tihs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.this_s'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>_html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#kw'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span><span class="token string">'40px'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box-2 li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> _tihs<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _html<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>_tihs<span class="token operator">==</span><span class="token string">'baidu_s'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>_tihs<span class="token operator">=</span><span class="token string">'https://www.baidu.com/s'</span><span class="token punctuation">;</span>_name<span class="token operator">=</span><span class="token string">'wd'</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>_tihs<span class="token operator">==</span><span class="token string">'google_s'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>_tihs<span class="token operator">=</span><span class="token string">'https://www.google.com/search'</span><span class="token punctuation">;</span>_name<span class="token operator">=</span><span class="token string">'q'</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>_tihs<span class="token operator">==</span><span class="token string">'bing_s'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>_tihs<span class="token operator">=</span><span class="token string">'https://www.bing.com/search'</span><span class="token punctuation">;</span>_name<span class="token operator">=</span><span class="token string">'q'</span><span class="token punctuation">}</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.baidu form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">,</span>_tihs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.this_s'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>_html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#kw-2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box-2 ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span><span class="token string">'48px'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">*</span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"思源宋体"</span><span class="token punctuation">}</span><span class="token selector">ul,li,h1,h2,h3,h4,h5,h6,p,form,dl,dt,dd</span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span>normal<span class="token punctuation">}</span><span class="token selector">img</span><span class="token punctuation">{</span><span class="token property">border-style</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">li</span><span class="token punctuation">{</span><span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">}</span><span class="token selector">a</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector"><span class="token class">.card</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">25</span>,<span class="token number">240</span>,<span class="token number">229</span>,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">96%</span><span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token number">2%</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.baidu</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token class">.baidu</span> form</span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box</span> ul</span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span>-<span class="token number">1</span>px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span><span class="token number">9999</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#FFF</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid<span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box</span> li</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">60</span>px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#484848</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span>pointer<span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box</span> li<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#0f9d58</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#FFF</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box.this_s</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#0f9d58</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box.this_s</span><span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#FFF</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#0f9d58</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.qingkong</span></span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span><span class="token number">120</span>px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#666666</span><span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span>pointer<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector"><span class="token class">.qingkong</span><span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.qingkong</span><span class="token pseudo-class">:active</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.baidu-2</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">110</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">padding-top</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token class">.baidu-2</span> form</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">520</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">}</span><span class="token selector"><span class="token class">.baidu-2</span> input</span><span class="token punctuation">{</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">13</span>px <span class="token number">8</span>px<span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span><span class="token number">0.9</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token id">#Select-2</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box-2</span></span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box-2</span> ul</span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">46</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">1</span>px<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span><span class="token number">9999</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid<span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">10</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box-2</span> li</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">60</span>px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">45</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#484848</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span>pointer<span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box-2</span> li<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#0f9d58</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#FFF</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box-2</span> <span class="token class">.this_s</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#0f9d58</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.Select-box-2</span> <span class="token class">.this_s</span><span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#0f9d58</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#kw-2</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">335</span>px<span class="token punctuation">;</span><span class="token property">outline</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid<span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#000000</span><span class="token punctuation">;</span><span class="token property">padding-left</span><span class="token punctuation">:</span><span class="token number">70</span>px<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">10</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token id">#su-2</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">90</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">47</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#0f9d58</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span><span class="token hexcode">#3385ff</span> <span class="token number">1</span>px solid<span class="token punctuation">;</span><span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">1</span>px solid<span class="token hexcode">#2d78f4</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#FFF</span><span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span>pointer<span class="token punctuation">;</span><span class="token property">outline</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">0</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#su-2</span><span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">1</span>px solid blue<span class="token punctuation">}</span><span class="token selector"><span class="token id">#su-2</span><span class="token pseudo-class">:active</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span>inset <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">3</span>px blue<span class="token punctuation">;</span><span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span>inset <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">3</span>px blue<span class="token punctuation">}</span><span class="token selector"><span class="token class">.jj-list-tit</span></span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">25</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ffffff</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">padding-left</span><span class="token punctuation">:</span><span class="token number">38.5%</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.jj-list-con</span></span><span class="token punctuation">{</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">}</span><span class="token selector"><span class="token class">.jj-list-con</span> li</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">31.333%</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">1%</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.link-3</span></span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.35</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#FFF</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">13</span>px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">4</span>px <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">2</span>px<span class="token punctuation">;</span><span class="token property">transition</span><span class="token punctuation">:</span>all <span class="token number">0.2</span>s<span class="token punctuation">}</span><span class="token selector"><span class="token class">.link-3</span><span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> only screen <span class="token function">and</span><span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>584px<span class="token punctuation">)</span></span><span class="token punctuation">{</span><span class="token selector"><span class="token class">.navi-height</span></span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">1300</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token class">.link-box</span></span><span class="token punctuation">{</span><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">5%</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.large-screen</span></span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> only screen <span class="token function">and</span><span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>584px<span class="token punctuation">)</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>993px<span class="token punctuation">)</span></span><span class="token punctuation">{</span><span class="token selector"><span class="token class">.navi-height</span></span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">800</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token class">.link-box</span></span><span class="token punctuation">{</span><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">5%</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.large-screen</span></span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> only screen <span class="token function">and</span><span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>993px<span class="token punctuation">)</span></span><span class="token punctuation">{</span><span class="token selector"><span class="token class">.navi-height</span></span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.page-footer</span></span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%if(theme.banner.enable){%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> bannerUrl<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/medias/banner/') %>"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.jpg'</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span><span class="token string">'url('</span><span class="token operator">+</span>bannerUrl<span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%}else{%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span><span class="token string">'url(&lt;%- theme.jsDelivr.url %>&lt;%- url_for('</span><span class="token operator">/</span>medias<span class="token operator">/</span>banner<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">.</span>jpg<span class="token string">') %>)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%}%</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意：这里字体使用的是思源宋体，可以根据自己的需要修改为其它字体。<br>为了减小文章篇幅这里将代码压缩成了一行，代码粘贴后可以通过编辑器的格式化处理或者在线代码美化工具将代码展开，方便修改。</p></blockquote><h3 id="添加今日诗词"><a href="#添加今日诗词" class="headerlink" title="添加今日诗词"></a>添加今日诗词</h3><p><a href="https://www.jinrishici.com/">今日诗词</a> 每次返回一句诗词，根据时间、地点、天气、事件智能推荐。使用前需要将主题配置文件中<code>subtitle</code>的值改为<code>false</code>。配置方式，在<code>/themes/matery/layout/_partial/head.ejs</code>中添加下面的一行代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加每日诗词 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://sdk.jinrishici.com/v2/browser/jinrishici.js"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="https://s2.loli.net/2021/12/31/n8Vs4GuSJNi7vgb.png"></p><p>然后再将<code>/themes/matery/layout/_partial/bg-cover-content.ejs</code>中的<code>&lt;%= config.description %&gt;</code>修改为：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"jinrishici-sentence"</span><span class="token operator">></span>正在加载今日诗词<span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></code></pre><p><img src="https://s2.loli.net/2021/12/31/b84LmMdNwW5goc3.png"></p><h2 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h2><p>我们写完博客使用<code>hexo d</code>部署到Github仓库，这里上传的是转换后的静态html文件以及所依赖的库文件，而不是我们的源文件。当我们换一台电脑写博客时，直接克隆这个仓库的文件是不行的，因此我们需要把博客源文件上传到GitHub，一来可以方便我们更换电脑后快速部署博客，二来可以备份我们的笔记源文件。</p><ol><li>在 github 博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</li></ol><p><img src="https://s2.loli.net/2021/12/30/YmdQK6EvWlTiu4D.png"><br><img src="https://s2.loli.net/2021/12/30/7CE9zZt3ejUAVT2.png"></p><ol start="2"><li>在博客根目录打开git bash，使用<code>git checkout hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;备份&quot;</code>，最后<code>git push origin hexo</code>提交就行了。</li></ol><p><img src="https://s2.loli.net/2021/12/30/GlJrHI1S9Mby7fx.png#crop=0&crop=0&crop=1&crop=1&id=h6MwL&originHeight=227&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><p>如果<code>git add .</code>时提示warning: adding embedded git repository: .deploy_git，是因为你已经部署到Github，将.deploy_git整个文件夹删除，再重新add即可。</p></blockquote><p>当然，如果不想使用分支，也可以直接再新建一个仓库来存放博客源文件。</p>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode搭建一站式博客写作环境</title>
      <link href="/vscode-da-jian-yi-zhan-shi-bo-ke-xie-zuo-huan-jing.html"/>
      <url>/vscode-da-jian-yi-zhan-shi-bo-ke-xie-zuo-huan-jing.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 Github page 和 Hexo 搭建的个人博客，每次写博客时需要在博客根目录下打开<code>Git Bash Here</code>，在命令窗口输入新建命令<code>hexo n</code>，然后去文件管理器找到新建的<code>md</code>文件，再用<code>markdown编辑器</code>进行书写，最后书写完需要回到命令窗口输入命令进行预览和部署。这一过程基本需要在三个界面来回切换，相当繁琐。为了更方便的书写，避免来回切换界面，我尝试了在 vscode 中配置一个完整的 Hexo 博客写作环境，即在 vscode 内完成上述所有操作。</p><p>主要内容：</p><ul><li>安装<code>Markdown Preview Enhanced</code>插件</li><li>在vscode终端里添加<code>Git Bash</code>终端</li><li>安装<code>PicGo</code>插件</li><li>开启markdown代码补全功能，通过代码补全快速插入博客文章的<code>Front matter</code>。</li></ul><h2 id="配置markdown环境"><a href="#配置markdown环境" class="headerlink" title="配置markdown环境"></a>配置markdown环境</h2><p>vscode 默认是支持 markdown 的，但语法支持以及扩展功能较少，因此需要安装插件来获得更好的书写体验，有两个插件：<code>Markdown All in One</code>和<code>Markdown Preview Enhanced</code>。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>这里推荐安装<code>Markdown Preview Enhanced</code>插件，简称<code>MPE</code>。打开 vscode 编辑器，在插件页搜索 markdown-preview-enhanced，接着点击 Install 按钮。<br><img src="https://s2.loli.net/2021/12/27/rPTNOsdaRSi9nCU.png"></p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><p>MPE 支持一边写一边实时渲染，markdown 基本语法可参考<a href="http://markdown.p2hp.com/">markdown中文网</a>，MPE插件使用技巧可参考<a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/">MPE简介</a>，我这只简单介绍一下基本使用和更换主题。<br><img src="https://s2.loli.net/2021/12/27/SFjHtbvM4gXwPks.png"></p><p>预览窗口上<code>右键--&gt;Preview Theme</code>更换主题，推荐将主题更换为<code>vue.css</code>，因为这个主题的样式基本与Hexo博客渲染出来的效果一致，这样我们在书写时看到的效果就和发布到个人博客网站上看到的效果一样，基本可以省去使用<code>hexo s -g</code>进行本地部署预览。<br><img src="https://s2.loli.net/2021/12/27/zi62mBQS1MZnudO.png"></p><h2 id="配置Git-Bash终端"><a href="#配置Git-Bash终端" class="headerlink" title="配置Git Bash终端"></a>配置Git Bash终端</h2><p>vscode 的终端默认不支持 Git bash，为了直接在 vscode 中打开 Git Bash 终端，需要做以下配置：</p><h3 id="1-打开vscode"><a href="#1-打开vscode" class="headerlink" title="1. 打开vscode"></a>1. 打开vscode</h3><p><code>文件-&gt;首选项-&gt;设置</code>，打开设置，搜索<code>shell windows</code><br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211222111931.png"></p><h3 id="2-添加配置"><a href="#2-添加配置" class="headerlink" title="2. 添加配置"></a>2. 添加配置</h3><p>打开<code>settings.json</code>，在最后一个花括号前输入代码：</p><pre class=" language-json"><code class="language-json">// 设置终端默认为git bash<span class="token property">"terminal.integrated.profiles.windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"gitBash"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"D:\\Program Files\\Git\\bin\\bash.exe"</span><span class="token punctuation">,</span>//这里是的的bash路径  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"terminal.integrated.defaultProfile.windows"</span><span class="token operator">:</span> <span class="token string">"gitBash"</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211222112158.png"></p><h3 id="3-重启生效"><a href="#3-重启生效" class="headerlink" title="3. 重启生效"></a>3. 重启生效</h3><p>保存重启 vscode，按<code>ctrl+~</code>键打开终端，测试是否成功。<br><img src="https://s2.loli.net/2021/12/27/k3hVBpofNt5sugT.png"></p><h2 id="配置自动上传图床"><a href="#配置自动上传图床" class="headerlink" title="配置自动上传图床"></a>配置自动上传图床</h2><p>平时写博客插入图片时，需要切换到图床网站或 PicGo 上传图片，再拷贝连接回来，非常麻烦。而通过 PicGo 插件可以实现直接复制图片到 vscode 中，图片会自动上传到配置好的图床，并在文档内转换为图片链接地址。支持的图床有：<code>微博</code>，<code>七牛图床</code>，<code>腾讯云COS</code>，<code>又拍云</code>，<code>github</code>，<code>阿里云OSS</code>，<code>imgur</code>和<code>SM.MS</code>。</p><h3 id="安装PicGo插件"><a href="#安装PicGo插件" class="headerlink" title="安装PicGo插件"></a>安装PicGo插件</h3><p><img src="https://s2.loli.net/2021/12/27/YP7KIoCWqDvcanx.png"></p><h3 id="配置Token"><a href="#配置Token" class="headerlink" title="配置Token"></a>配置Token</h3><p>我这里使用的是<code>SM.MS</code>图床，因此只需要配置 Token 就可以。如果使用的是其它的图床，需要添加对应的配置项。</p><ol><li>在 PicGo 插件上<code>右键--&gt;扩展设置</code></li></ol><p>找到 <code>Smms：Token</code>，填入自己的 Token值。<br><img src="https://s2.loli.net/2021/12/27/tCLp2GoQ94jfbvI.png"></p><ol start="2"><li>使用</li></ol><p>需要插入图片时，使用快捷键上传。<br><img src="https://s2.loli.net/2021/12/27/rDNomitYnh1CQIH.png"></p><p>例如：我是windows系统，选中要插入的图片右键复制，在文档中按<code>ctrl+alt+u</code>自动上传，上传成功后文档中插入图片的地方返回图片链接。<br><img src="https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png"></p><p>默认是<code>![图片名](图片地址)</code>的格式，并且会自动以上传时间命名图片。如果不想自动填入图片名称，可以将扩展设置里的<code>Custom Output Format</code>修改为如下：<br><img src="https://s2.loli.net/2021/12/27/d6wIPqSBOsjno1A.png"></p><p>效果：<br><img src="https://s2.loli.net/2021/12/27/dmLuDsrZ1coPF3N.png"></p><p>可以看到<code>[]</code>内不再自动填入上传时间。</p><blockquote><p>附：<br><a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">PicGo插件配置官方文档</a><br><a href="https://cfxin.github.io/picgo-pei-zhi-tu-chuang.html">PicGo搭建图床</a></p></blockquote><h2 id="配置博客文件模板"><a href="#配置博客文件模板" class="headerlink" title="配置博客文件模板"></a>配置博客文件模板</h2><p>我们知道用<code>hexo n</code>命令新建文档会自动根据模板文件插入<code>Front matter</code>的内容，而在vscode中直接通过右键新建文件是没有<code>Front matter</code>的，需要手动一项一项写书，比较麻烦。为了书写方便，我们可以自定义代码片段，然后利用代码补全功能实现快速插入<code>Front matter</code>内容。</p><h3 id="1-打开设置"><a href="#1-打开设置" class="headerlink" title="1. 打开设置"></a>1. 打开设置</h3><p>选择左下角<code>设置 --&gt;用户代码片段</code><br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105506.png"></p><h3 id="2-打开配置文件"><a href="#2-打开配置文件" class="headerlink" title="2. 打开配置文件"></a>2. 打开配置文件</h3><p>搜索框输入<code>markdown</code>，打开<code>markdown.json</code>文件<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105922.png"><br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211227110412.png"></p><blockquote><p><code>Print to console</code>：表示代码片段名称；<br><code>prefix</code>：表示呼出代码片段时的快捷方式；<br><code>body</code>：代码块内容；换行使用\r\n；<br><code>description</code>：说明内容，输入快捷方式时VSCode显示的内容；<br><code>$1,$2,$0</code>：指定代码模块生成后，编辑光标出现位置; 使用Tab键进行切换(编辑光标按$1,$2,$3…$0的顺序跳转)，$0是光标最后可切换位置。</p></blockquote><h3 id="3-添加模板代码"><a href="#3-添加模板代码" class="headerlink" title="3. 添加模板代码"></a>3. 添加模板代码</h3><p>在文件内输入以下内容：</p><pre class=" language-json"><code class="language-json"><span class="token property">"Front matter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"frm"</span><span class="token punctuation">,</span> //输入frm时会提示补全        <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"---"</span><span class="token punctuation">,</span>            <span class="token string">"title: $TM_FILENAME_BASE"</span><span class="token punctuation">,</span> // 读取当前文件名，不带后缀            <span class="token string">"top: false"</span><span class="token punctuation">,</span>            <span class="token string">"cover: false"</span><span class="token punctuation">,</span>            <span class="token string">"toc: true"</span><span class="token punctuation">,</span>            <span class="token string">"mathjax: true"</span><span class="token punctuation">,</span>            <span class="token string">"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"</span><span class="token punctuation">,</span>            <span class="token string">"update: "</span><span class="token punctuation">,</span>            <span class="token string">"img: "</span><span class="token punctuation">,</span>            <span class="token string">"password: "</span><span class="token punctuation">,</span>            <span class="token string">"summary: "</span><span class="token punctuation">,</span>            <span class="token string">"categories: $1"</span><span class="token punctuation">,</span> // 光标位置<span class="token number">1</span>，补全代码片段后光标会停留在这里            <span class="token string">"tags: "</span><span class="token punctuation">,</span>            <span class="token string">"- $2"</span><span class="token punctuation">,</span> // 光标位置<span class="token number">2</span>，按tab键光标会切换到这里            <span class="token string">"---"</span><span class="token punctuation">,</span>            <span class="token string">"$0"</span><span class="token punctuation">,</span> // 光标位置<span class="token number">0</span>，最后的位置        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"插入文章的front mater"</span> // 用户输入后智能提示的内容    <span class="token punctuation">}</span></code></pre><blockquote><p>内置参数<br><code>$TM_FILENAME_BASE</code>：当前文件名，不带后缀<br><code>$CURRENT_YEAR</code>：年<br><code>$CURRENT_MONTH</code>：月<br><code>$CURRENT_DATE</code>：日<br><code>$CURRENT_HOUR</code>：时<br><code>$CURRENT_MINUTE</code>：分<br><code>$CURRENT_SECOND</code>：秒</p></blockquote><h3 id="4-开启markdown的提示功能"><a href="#4-开启markdown的提示功能" class="headerlink" title="4. 开启markdown的提示功能"></a>4. 开启markdown的提示功能</h3><p>vscode默认没有开启markdown的代码补全功能，开启方式：</p><ol><li>​<code>ctrl+shifi+p</code>打开命令面板，搜索<code>settings.json</code>并打开。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120430.png"></li></ol><p>在最后的花括号前添加以下内容，注意在上一条语句后面加逗号<code>,</code>​</p><pre class=" language-json"><code class="language-json"><span class="token property">"[markdown]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"editor.quickSuggestions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120914.png"></p><ol start="2"><li>重启vscode进行测试<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121214.png"></li></ol><p>可以看到当输入<code>frm</code>后出现了代码补全提示，按下<code>tab或回车键</code>即可补全代码。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121933.png"></p><p>此时，在<code>光标位置1</code>输入分类名，按<code>tab键</code>条到<code>光标位置2</code>输入标签名，再按<code>tab键</code>跳到<code>光标位置0</code>开始正文书写。</p><h2 id="整体效果"><a href="#整体效果" class="headerlink" title="整体效果"></a>整体效果</h2><p>至此，我们就可以只打开vscode完成博客写作，所有的操作在如下图一个界面内均可完成，不需要来回切换界面。<br><img src="https://s2.loli.net/2021/12/27/OIpJgvMnX6zikSL.png"></p><p>第一次使用时的流程：打开vscode–&gt;文件–&gt;打开文件夹–&gt;找到博客根目录–&gt;ctrl+~打开终端。vscode会记住上次退出时的工作区，因此下次需要写博客文章时只需要打开vscode就可以了。如果打开后工作环境不是博客写作工作区，那只需要在<code>最近打开的文件</code>中切换一下就好。</p>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> PicGo </tag>
            
            <tag> markdown </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git连接GitHub报错port 22 Connection timed out</title>
      <link href="/git-lian-jie-github-bao-cuo-port-22-connection-timed-out.html"/>
      <url>/git-lian-jie-github-bao-cuo-port-22-connection-timed-out.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用Git提交代码时，发现报错Connection timed out，然后使用<code>ssh -T git@github.com</code>检查连接GitHub，报错：</p><p><img src="https://s2.loli.net/2021/12/28/QieGVSZPuBDNUyn.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在存放公钥私钥(<code>id_rsa</code> 和 <code>id_rsa.pub</code>)的同级文件夹中，例如我的是Windows系统，路径为：<code>C:\Users\2cc\.ssh</code>。在该文件夹新建<code>config文本</code>，内容如下：</p><pre class=" language-bash"><code class="language-bash">Host github.comUser cfxin@163.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443</code></pre><blockquote><p>User 后面写的是登录Github的账号;<br>该配置文件目的是将原来的22端口改为443端口。</p></blockquote><p>再次执行<code>ssh -T git@github.com</code>检查，输入yes，可以看到连接成功。</p><p><img src="https://s2.loli.net/2021/12/28/bkZoPA8LQ5Yifcz.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/markdown-yu-fa.html"/>
      <url>/markdown-yu-fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>在文字前面加<code>#</code>表示标题，<code>#</code>的个数代表标题级数，一个<code>#</code>是一级标题，最多6个<code>#</code>。<br>例如：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span>···<span class="token title important"><span class="token punctuation">######</span> 六级标题</span></code></pre><blockquote><p>注意：#号后面需要一个空格才生效</p></blockquote><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>现在大多数 markdown 编辑器都支持直接<code>按回车键</code>换行，例如Typora、Markdown Preview Enhanced插件等。若直接<code>按回车键</code>不能换行，需以<code>2个或多个空格</code>结束一行，然后再<code>按回车键</code>，则会另起一行。</p><h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><p>使用<code>空白行</code>分隔一行或多行文本。</p><pre class=" language-markdown"><code class="language-markdown">这是第一段这还是第一段这是第二段</code></pre><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><ul><li>加粗：在需要加粗的地方前后添加<code>2个*号</code></li><li>斜体：在需要斜体的地方前后添加<code>1个*号</code></li><li>粗斜体：在需要粗斜体的地方前后添加<code>3个*号</code></li><li>横线删除：在需要删除的地方前后添加<code>2个~号</code></li></ul><pre class=" language-markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span>我是粗体<span class="token punctuation">**</span></span><span class="token italic"><span class="token punctuation">*</span>我是斜体<span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span>*我是粗斜体<span class="token punctuation">**</span></span>*~~我会被横线删除~~</code></pre><p><img src="https://s2.loli.net/2021/12/28/vq6LjFYyktcxh3w.png"></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在需要引用的句子或段落前添加1个<code>&gt;空格</code>。</p><ul><li>块引用可以包含多个段落。在段落之间的空白行上添加一个<code>&gt;</code>。</li><li>需要嵌套块引用时，在段落前面添加1个<code>&gt;&gt;空格</code>。</li></ul><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 第一段引用<span class="token blockquote punctuation">></span> <span class="token blockquote punctuation">></span> 第二段引用<span class="token blockquote punctuation">>></span> 第二段引用中的引用</code></pre><p><img src="https://s2.loli.net/2021/12/28/Q1fCRdbAlXYvP6o.png"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>无序列表：在条目前添加1个<code>-空格</code>。</li><li>有序列表：在条目前添加<code>数字.空格</code>或<code>字母.空格</code>。</li><li>嵌套列表，在条目前先添加<code>2个或多个空格</code>，再写列表。</li></ul><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 条目<span class="token list punctuation">-</span> 条目  <span class="token list punctuation">-</span> 条目  <span class="token list punctuation">-</span> 条目<span class="token list punctuation">1.</span> 条目1<span class="token list punctuation">2.</span> 条目2  a. 条目2.1  b. 条目2.2</code></pre><p><img src="https://s2.loli.net/2021/12/28/oHvPzs56uatRErQ.png"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>用<code>[链接名](网址)</code>插入链接，如果需要连接名则使用<code>&lt;网址&gt;</code>的形式。若需要鼠标悬停在链接上时显示提示，则在网址后用引号<code>&#39; &#39;</code>添加提示信息。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">[首页](https://cfxin.github.io)</span>&lt;https://cfxin.github.io>[首页](https://cfxin.github.io '提示信息')</code></pre><p><img src="https://s2.loli.net/2021/12/28/tcKyrPkY3E8IxOd.png"></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>用<code>![图片描述](图片路径或url)</code>插入图片, 若不需要图片描述，则方括号内空着即可。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">![图1](https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png)</span><span class="token url">![图2](/images/2.png)</span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>行内代码：用``括起来。</li><li>代码块：用一对<code>```</code>围起来。<ul><li>在第一个<code>```</code>后指定语言可语法高亮</li></ul></li></ul><p><img src="https://s2.loli.net/2021/12/28/KTmjZ9ilnR4GJpQ.png"></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在单独一行上使用3个<code>-</code>可插入分割线。</p><pre class=" language-markdown"><code class="language-markdown">水平线上<span class="token hr punctuation">---</span>水平线下</code></pre><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用如下形式，默认左对齐，<code>-</code>相当于<code>:-</code>表示左对齐，<code>-:</code>表示右对齐，<code>:-:</code>表示居中对齐。</p><pre class=" language-markdown"><code class="language-markdown">|表头|表头||-|-||单元格|单元格||单元格|单元格|</code></pre><p><img src="https://s2.loli.net/2021/12/28/eIzKbXZxtDlkp95.png"></p><blockquote><p>参考资料：<a href="http://markdown.p2hp.com/index.html">Markdown中文网</a>、<a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/">MPE插件简介</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo配置图床</title>
      <link href="/picgo-pei-zhi-tu-chuang.html"/>
      <url>/picgo-pei-zhi-tu-chuang.html</url>
      
        <content type="html"><![CDATA[<h2 id="PicGo-Gitee搭建个人图床"><a href="#PicGo-Gitee搭建个人图床" class="headerlink" title="PicGo+Gitee搭建个人图床"></a>PicGo+Gitee搭建个人图床</h2><h3 id="1-PicGo下载安装"><a href="#1-PicGo下载安装" class="headerlink" title="1. PicGo下载安装"></a>1. PicGo下载安装</h3><p>进入<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo官方地址</a>下载所需要的安装包。</p><p>安装好后，在软件的插件设置里安装上传gitee所需要的插件，我这里使用的是<code>gitee-smart 1.1.7</code>。</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211224135031.png"></p><h3 id="2-Gitee上创建存放图片的仓库"><a href="#2-Gitee上创建存放图片的仓库" class="headerlink" title="2. Gitee上创建存放图片的仓库"></a>2. Gitee上创建存放图片的仓库</h3><ol><li>打开<a href="https://gitee.com/">Gitee官网</a>创建仓库，如果没注册的先自行注册账号，Gitee免费提供5G的存储空间。</li></ol><p>新建仓库时注意：</p><ul><li>设置为开源</li><li>Readme文件初始化</li></ul><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211224140258.png"></p><ol start="2"><li>创建私人令牌</li></ol><p><code>个人头像--&gt;设置--&gt;私人令牌--&gt;生成新令牌</code></p><blockquote><p>注意: 令牌生成后只能看见一次, 记得复制粘贴保存下来, 关闭之后就看不到了.</p></blockquote><ol start="3"><li>私人令牌权限设置</li></ol><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211224141514.png"></p><h3 id="3-配置PicGo"><a href="#3-配置PicGo" class="headerlink" title="3. 配置PicGo"></a>3. 配置PicGo</h3><ol><li>进入PicGo软件, 选择图床设置, 找到gitee</li><li>gitee配置如下:</li></ol><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211224143035.png"></p><blockquote><p>repo: 用户名/仓库名, 可以在刚创建的仓库里进行复制<br>branch: 分支, 创建仓库时选择了master单分支, 所以这里填master<br>token: 填刚在Gitee上创建的私人令牌<br>path: 图片在仓库中的存储路径，我这里存储在image下<br>customPath：默认即可<br>customURL: 默认即可</p></blockquote><h2 id="PicGo配置SM-MS公共图床"><a href="#PicGo配置SM-MS公共图床" class="headerlink" title="PicGo配置SM.MS公共图床"></a>PicGo配置SM.MS公共图床</h2><h3 id="1-获得SM-MS的密令Token"><a href="#1-获得SM-MS的密令Token" class="headerlink" title="1. 获得SM.MS的密令Token"></a>1. 获得SM.MS的密令Token</h3><p>SM.MS是一个老牌公共图床, 永久存储免注册，图片链接支持https，可以删除上传的图片，提供多种图片链接格式. 单张图片最大5M，每分钟最多上传10张, 有5G免费空间.</p><p>进入<a href="https://sm.ms/">SM.MS官网</a>注册账号, 点击<code>User--&gt;Login</code>注册登录，登录后点击相同的位置，进入Dashboard. 左侧菜单栏找到<code>API Token</code>, 创建Token.</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211224145857.png"></p><h3 id="2-PicGo中配置"><a href="#2-PicGo中配置" class="headerlink" title="2. PicGo中配置"></a>2. PicGo中配置</h3><p>在PicGo中配置SM.MS非常简单, PicGO默认支持上传SM.MS图床, 不需要额外安装插件,  只需要填入密令Token即可.</p><p><img src="https://s2.loli.net/2021/12/24/NehaJXuBEYivjsr.png"></p><blockquote><p>附：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo官方指南</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo管理文章的基本操作</title>
      <link href="/hexo-guan-li-wen-zhang-de-ji-ben-cao-zuo.html"/>
      <url>/hexo-guan-li-wen-zhang-de-ji-ben-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建md文件"><a href="#1-创建md文件" class="headerlink" title="1. 创建md文件"></a>1. 创建md文件</h2><p>Hexo 使用 Markdown 解析文章，md文件也就是Markdown文件，通过以下命令创建：</p><pre class=" language-bash"><code class="language-bash">hexo n <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token comment" spellcheck="true"># 例如</span>hexo n <span class="token string">"Hexo管理文章的基本操作"</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220111012.png"></p><p>这里可以看到创建了一个Hexo管理文章的基本操作.md，保存在<code>\source\_posts</code>文件夹下。打开该文件，使用Markdown语法即可书写文章内容。</p><h2 id="2-三种布局"><a href="#2-三种布局" class="headerlink" title="2. 三种布局"></a>2. 三种布局</h2><p>创建md文件时，我们可以指定布局，Hexo布局有三种：post（文章）、draft（草稿）、page（页面）。</p><p>&nbsp;<br>在新建文件时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件（可以理解为模板）来建立md文件：</p><ul><li>如果没有指定布局类型，则为默认布局post，即<code>hexo n = hexo n post</code>。</li><li>当我们创建不同布局的md文件时，它们会存储在不同路径：</li></ul><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220130338.png"></p><blockquote><p>对于page，Hexo会创建一个以标题为名的文件夹，并在该文件夹下生成一个index.md文件，page布局顾名思义就是用来DIY我们博客页面的。</p></blockquote><p>&nbsp;<br><strong>draft</strong>：<br>draft这种布局在创建时会被保存到<code>\source\_drafts</code>文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到_drafts文件夹中。</p><ul><li>可在启动服务器时加上 –draft 参数来查看草稿。<code>hexo s --draft</code></li><li>可以在站点配置文件中把 render_drafts 参数设为 true 来预览草稿。</li><li>可以通过 publish 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。<code>hexo publish [layout] &lt;title&gt;</code></li></ul><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220131544.png"></p><h2 id="3-Front-matter"><a href="#3-Front-matter" class="headerlink" title="3. Front-matter"></a>3. Front-matter</h2><p>当我们创建一个md文件后，打开后会看到一些内容，这些称为Front-matter，它是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo管理文章的基本操作 <span class="token comment" spellcheck="true"># 文章标题，也就是创建时指定的名字</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-12-20 11:06:18 </span><span class="token comment" spellcheck="true"># 创建时间</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 标签</span><span class="token punctuation">---</span></code></pre><blockquote><p>在Typora中我们在md文件的首行（必须是第一行）输入<code>---</code> ，然后按回车就可以插入Front-matter了。<br>注意：参数的<code>:</code>后面有一个空格。</p></blockquote><ul><li><strong>Front-matter预定义参数</strong></li></ul><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211223145713.png"></p><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://encode.chahuo.com/">chahuo</a>。</li></ol></blockquote><p>最简示例：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><p>最全示例：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo管理文章的基本操作<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-12-20 14:33:20</span><span class="token key atrule">author</span><span class="token punctuation">:</span> cfxin<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /medias/images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><ul><li><strong>添加分类与标签</strong><br>只有文章（post布局）支持分类和标签，需要在Front-matter中设置。分类有层级关系，标签没有。例如：</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token punctuation">-</span> 个人博客 <span class="token comment" spellcheck="true">#（第一层级）</span><span class="token punctuation">-</span> Hexo博客 <span class="token comment" spellcheck="true">#（第二层级）</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token punctuation">-</span> Hexo<span class="token punctuation">-</span> 博客</code></pre><p>添加多个分类：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token punctuation">[</span>日常<span class="token punctuation">,</span> 生活<span class="token punctuation">]</span><span class="token punctuation">-</span> <span class="token punctuation">[</span>日常<span class="token punctuation">,</span> 随想<span class="token punctuation">]</span></code></pre><h2 id="4-基本操作"><a href="#4-基本操作" class="headerlink" title="4. 基本操作"></a>4. 基本操作</h2><ul><li>清除缓存：<code>hexo clean</code></li><li>生成静态文件：<code>hexo generate</code>可简写为<code>hexo g</code></li><li>启动服务器：<code>hexo server</code>简写为<code>hexo s</code>，常用参数：<code>-p</code>重设端口</li><li>部署：<code>hexo deploy</code>简写为<code>hexo d</code>，用于将网站部署到服务器上。常用参数：-g，<code>hexo d -g</code>部署前预先生成静态文件。</li></ul><p>&nbsp;<br>一般发布文章或者修改博客后需要这些操作：清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo s -g <span class="token comment" spellcheck="true"># 清除缓存>生成静态文件>启动服务器</span>hexo d <span class="token comment" spellcheck="true"># 部署</span></code></pre><blockquote><p>更多操作查看：<a href="https://hexo.bootcss.com/docs/">Hexo官方文档</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora自动上传图片</title>
      <link href="/typora-zi-dong-shang-chuan-tu-pian.html"/>
      <url>/typora-zi-dong-shang-chuan-tu-pian.html</url>
      
        <content type="html"><![CDATA[<h2 id="配合PicGo自动上传图片"><a href="#配合PicGo自动上传图片" class="headerlink" title="配合PicGo自动上传图片"></a>配合PicGo自动上传图片</h2><ol><li><strong>下载配置PicGo</strong></li></ol><p>我这里以上传到gitee为例：</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220100720.png"></p><ol start="2"><li><strong>设置typora和PicGo关联</strong></li></ol><p>文件–&gt;偏好设置–&gt;图像</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101432.png"></p><p>然后开启自动上传：<br>格式–&gt;图像–&gt;当插入本地图片时–&gt;上传图像</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101657.png"></p><h2 id="设置图片居左显示"><a href="#设置图片居左显示" class="headerlink" title="设置图片居左显示"></a>设置图片居左显示</h2><p>Typora默认图片是居中显示，通过修改主题样式.css文件可实现默认居左显示。</p><ol><li><strong>打开所使用的主题样式文件</strong></li></ol><p>文件–&gt;偏好设置–&gt;外观–&gt;打开主题文件夹</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220102727.png"></p><ol start="2"><li><p><strong>打开主题的css文件，在后面添加代码</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector">p <span class="token class">.md-image</span><span class="token pseudo-class">:only-child</span></span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>重启Typora即可生效</strong>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2(Ubuntu) + Miniconda3 + PyCharm配置</title>
      <link href="/wsl2-ubuntu-miniconda3-pycharm-pei-zhi.html"/>
      <url>/wsl2-ubuntu-miniconda3-pycharm-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h2 id="WSL2安装"><a href="#WSL2安装" class="headerlink" title="WSL2安装"></a>WSL2安装</h2><p>WSL的安装之前已写过，按照这边文章操作即可。<a href="https://www.yuque.com/chengbudong/coding/nwkmk3">win10下wsl2+golang+goland配置</a></p><h2 id="安装Miniconda3"><a href="#安装Miniconda3" class="headerlink" title="安装Miniconda3"></a>安装Miniconda3</h2><p>Miniconda是一个免费的conda最小安装程序。它是Anaconda的一个小型版本，只包括conda、Python、它们所依赖的包，以及pip、zlib等少量其他有用的包。</p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载</span><span class="token function">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<span class="token comment" spellcheck="true"># 安装</span><span class="token function">bash</span> Miniconda3-latest-Linux-x86_64.sh </code></pre><p>根据提示一步一步地安装。安装完成后，输入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc  <span class="token comment" spellcheck="true">#重新激活环境变量</span>conda -V          <span class="token comment" spellcheck="true">#检查conda是否安装成功</span></code></pre><h3 id="添加镜像"><a href="#添加镜像" class="headerlink" title="添加镜像"></a>添加镜像</h3><pre class=" language-bash"><code class="language-bash">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/freeconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</code></pre><h3 id="创建python环境"><a href="#创建python环境" class="headerlink" title="创建python环境"></a>创建python环境</h3><p>创建自己需要的虚拟环境，也就是自己的工作区。基本命令需指定<strong>环境名称</strong>和<strong>Python 版本</strong>：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 基本格式</span>conda create -n <span class="token punctuation">[</span>env_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>python<span class="token operator">=</span>version<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 例子</span>conda create -n python_3.6 python<span class="token operator">=</span>3.6</code></pre><p>安装完毕后，进入 conda 环境：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入</span>conda active python_3.6<span class="token comment" spellcheck="true"># 退出</span>conda deactivate</code></pre><h2 id="pycharm配置"><a href="#pycharm配置" class="headerlink" title="pycharm配置"></a>pycharm配置</h2><p>使用 Pycharm 内置终端打开 WSL 运行 Python 代码</p><pre class=" language-bash"><code class="language-bash">bask    <span class="token comment" spellcheck="true"># 在pycharm终端里输入</span>conda activate <span class="token punctuation">[</span>env_name<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 激活环境</span>python xxx.py <span class="token comment" spellcheck="true"># 运行.py文件</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215204103.png"></p><h3 id="附：Conda-的基本使用"><a href="#附：Conda-的基本使用" class="headerlink" title="附：Conda 的基本使用"></a>附：Conda 的基本使用</h3><ul><li>环境管理</li></ul><p>conda 常用操作可使用命令<code>conda -h</code>和<code>conda config -h</code>查看，这里列出几个常用命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建</span>conda create -n <span class="token punctuation">[</span>env_name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除</span>conda <span class="token function">env</span> remove -n <span class="token punctuation">[</span>env_name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 参照配置文件更新</span>conda <span class="token function">env</span> update --file <span class="token punctuation">[</span>file.yml<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 环境列表</span>conda <span class="token function">env</span> list<span class="token comment" spellcheck="true"># conda 信息</span>conda info<span class="token comment" spellcheck="true"># 添加频道</span>conda config --add channels <span class="token punctuation">[</span>channel<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除频道</span>conda config --remove channels <span class="token punctuation">[</span>channel<span class="token punctuation">]</span></code></pre><ul><li>包管理</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装</span>conda <span class="token function">install</span> <span class="token punctuation">[</span>package_name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除</span>conda uninstall <span class="token punctuation">[</span>package_name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 更新</span>conda update <span class="token punctuation">[</span>package_name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 更新所有包</span>conda update --all<span class="token comment" spellcheck="true"># 搜索</span>conda search <span class="token punctuation">[</span>package_name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 已安装列表</span>conda list</code></pre><ul><li>配置文件：conda 会生成配置文件<code>.condarc</code>。其位置如下：</li><li>Windows：<code>C:\Users\username\.condarc</code></li><li>MacOS 和 Linux：<code>~/.condarc</code></li></ul><p>其文件结构如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 频道</span>channels:  - conda-forge  - defaults<span class="token comment" spellcheck="true"># 将 pip 作为 Python 的依赖</span>add_pip_as_python_dependency: <span class="token boolean">true</span><span class="token comment" spellcheck="true"># 安装按照频道的顺序</span>channel_priority: <span class="token boolean">false</span><span class="token comment" spellcheck="true"># 生成错误报告</span>report_errors: <span class="token boolean">false</span><span class="token comment" spellcheck="true"># ssl 验证</span>ssl_verify: <span class="token boolean">false</span><span class="token comment" spellcheck="true"># 显示频道具体链接</span>show_channel_urls: <span class="token boolean">true</span><span class="token comment" spellcheck="true"># 错误回滚</span>rollback_enabled: <span class="token boolean">true</span><span class="token comment" spellcheck="true"># 重试</span>remote_max_retries: 3</code></pre><ul><li>镜像：为了加快速度，国内往往需要使用镜像，修改<code>channels</code>如下</li></ul><pre class=" language-bash"><code class="language-bash">channels: <span class="token comment" spellcheck="true"># 中科大镜像</span>  - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/  - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/ <span class="token comment" spellcheck="true"># 清华镜像</span>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/  - defaults</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> wsl2 </tag>
            
            <tag> PyCharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 8.0以上重置初始密码的方法(Win10)</title>
      <link href="/mysql-8.0-yi-shang-chong-zhi-chu-shi-mi-ma-de-fang-fa-win10.html"/>
      <url>/mysql-8.0-yi-shang-chong-zhi-chu-shi-mi-ma-de-fang-fa-win10.html</url>
      
        <content type="html"><![CDATA[<p>网上大部分的方法都是通过在<code>My.ini</code>或是<code>My_default.ini</code>中添加<code>–skip-grant-tables</code>的方法来实现跳过Mysql密码来连接数据库，并更改密码，然而都没有成功。</p><blockquote><p><strong>以下命令行代码均在管理员模式下操作</strong></p></blockquote><h3 id="第一步：关闭Mysql服务"><a href="#第一步：关闭Mysql服务" class="headerlink" title="第一步：关闭Mysql服务"></a>第一步：关闭Mysql服务</h3><p>首先，确保自己已经关闭了Mysql的服务</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token string">"d:\Program Files\mysql8\bin"</span><span class="token punctuation">(</span>此处输入自己的Mysql安装地址<span class="token punctuation">)</span>net stop mysql</code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195648.png"></p><h3 id="第二步：跳过Mysql密码验证"><a href="#第二步：跳过Mysql密码验证" class="headerlink" title="第二步：跳过Mysql密码验证"></a>第二步：跳过Mysql密码验证</h3><p>关闭Mysql服务之后，继续在 d:\Program Files\mysql8\bin 目录下进行操作，输入命令</p><pre class=" language-bash"><code class="language-bash">mysqld --console --skip-grant-tables --shared-memory </code></pre><p>在输入这行代码之后，我们就已经成功跳过Mysql的密码登录了<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195732.png"></p><h3 id="第三步：无密码方式进入Mysql"><a href="#第三步：无密码方式进入Mysql" class="headerlink" title="第三步：无密码方式进入Mysql"></a>第三步：无密码方式进入Mysql</h3><p>在上述步骤之后，再打开一个管理员模式运行的cmd.exe。</p><p>进入 mysql 下的 bin 目录后，直接登录mysql。</p><p>在命令行中输入以下代码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token string">"d:\Program Files\mysql8\bin"</span><span class="token punctuation">(</span>此处输入自己的Mysql安装地址<span class="token punctuation">)</span>mysql -u root -p</code></pre><p>此时会显示让你输入密码，直接回车，就可以成功连接Mysql</p><h3 id="第四步：将登陆密码设置为空"><a href="#第四步：将登陆密码设置为空" class="headerlink" title="第四步：将登陆密码设置为空"></a>第四步：将登陆密码设置为空</h3><p>输入代码，将密码设置为空（此时还不能直接修改密码，必须先设置为空，否则会报错）。</p><pre class=" language-bash"><code class="language-bash">use mysql<span class="token punctuation">;</span> <span class="token punctuation">(</span>使用mysql数据表<span class="token punctuation">)</span>update user <span class="token keyword">set</span> authentication_string<span class="token operator">=</span><span class="token string">''</span> where user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>（将密码置为空）quit<span class="token punctuation">;</span> <span class="token punctuation">(</span>然后退出Mysql<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195806.png"></p><h3 id="第五步：更改自己的登陆密码"><a href="#第五步：更改自己的登陆密码" class="headerlink" title="第五步：更改自己的登陆密码"></a>第五步：更改自己的登陆密码</h3><p>这里分为两个部分</p><ol><li>关闭第一个cmd窗口(一定要关闭！)</li><li>在第二个窗口中输入代码<pre class=" language-bash"><code class="language-bash">net stop mysql <span class="token punctuation">(</span>关闭mysql服务, 虽然会显示没有开启服务，但是以防万一<span class="token punctuation">)</span>net start mysql <span class="token punctuation">(</span>再打开mysql服务<span class="token punctuation">)</span>mysql -u root -p</code></pre></li></ol><p>此处会显示输入密码，直接回车就好了，第四步我们已经将他置为空了</p><pre class=" language-bash"><code class="language-bash">ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'新密码'</span><span class="token punctuation">;</span>（更改密码）</code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195829.png"></p><h3 id="最后一步：验证密码是否修改成功"><a href="#最后一步：验证密码是否修改成功" class="headerlink" title="最后一步：验证密码是否修改成功"></a>最后一步：验证密码是否修改成功</h3><pre class=" language-bash"><code class="language-bash">quit（退出mysql）mysql -u root -p <span class="token punctuation">(</span>输入新密码，再次登录<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文写作-网站和工具分享</title>
      <link href="/lun-wen-xie-zuo-wang-zhan-he-gong-ju-fen-xiang.html"/>
      <url>/lun-wen-xie-zuo-wang-zhan-he-gong-ju-fen-xiang.html</url>
      
        <content type="html"><![CDATA[<h2 id="论文检索"><a href="#论文检索" class="headerlink" title="论文检索"></a>论文检索</h2><h3 id="谷歌学术镜像"><a href="#谷歌学术镜像" class="headerlink" title="谷歌学术镜像"></a><a href="https://ac.scmor.com/">谷歌学术镜像</a></h3><p>最常用的，可以搜索到网上公布出来的全部文献。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160803.png"></p><h3 id="学术资源在线"><a href="#学术资源在线" class="headerlink" title="学术资源在线"></a><a href="http://spis.hnlat.com/">学术资源在线</a></h3><p>有文献求助功能，遇到有需要付费的下载文献可以在这里进行求助。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160914.png"></p><h3 id="IEEE"><a href="#IEEE" class="headerlink" title="IEEE"></a><a href="https://ieeexplore.ieee.org/Xplore/home.jsp">IEEE</a></h3><p>IEEE 出版的期刊文章和 EI 收录的会议文章都可以在这里找到。在校生一般都可以免费使用，文献主要涉及主要是工程学科。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160520.png"></p><h3 id="Web-of-Science"><a href="#Web-of-Science" class="headerlink" title="Web of Science"></a><a href="https://www.webofscience.com/wos/woscc/basic-search">Web of Science</a></h3><p>主要用于查找SCI收录的文献。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160827.png"></p><h3 id="CCF数字图书馆"><a href="#CCF数字图书馆" class="headerlink" title="CCF数字图书馆"></a><a href="https://dl.ccf.org.cn/index.html?_ack=1">CCF数字图书馆</a></h3><p>在这里可以看CCF出版的文章和组织的国内学术会议，以及一些专题报告的资料。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215163243.png"></p><h3 id="Connected-Papers"><a href="#Connected-Papers" class="headerlink" title="Connected Papers"></a><a href="https://www.connectedpapers.com/">Connected Papers</a></h3><p>在这个网站可以查看文献之间的关联性，有助于直观的了解一个研究领域，找到重要文献。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215164045.png"></p><hr><h2 id="翻译工具"><a href="#翻译工具" class="headerlink" title="翻译工具"></a>翻译工具</h2><h3 id="知云文献翻译"><a href="#知云文献翻译" class="headerlink" title="知云文献翻译"></a><a href="https://www.zhiyunwenxian.cn/">知云文献翻译</a></h3><p>官方的帮助文档：<a href="https://www.yuque.com/xtranslator/zy">知云-语雀文档</a></p><h3 id="沙拉查词插件"><a href="#沙拉查词插件" class="headerlink" title="沙拉查词插件"></a><a href="https://saladict.crimx.com/">沙拉查词插件</a></h3><p>沙拉查词可以让你在浏览器中 <code>&quot;选择句子 -&gt; 点击图标&quot;</code> 直接翻译，支持多重查词模式混合使用，无论是单击、双击、图标、悬浮还是快捷键。多个词典同时查询，根据情景模式以及查词语言、长度动态显示不同词典组合，一键切换快速得到需要的结果。</p><hr><h2 id="文献管理"><a href="#文献管理" class="headerlink" title="文献管理"></a>文献管理</h2><p>文献管理三剑客Endnote、Noteexpress和Mendely，根据自己的喜好选择一个即可。</p><hr><h2 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h2><h3 id="LaTeX排版"><a href="#LaTeX排版" class="headerlink" title="LaTeX排版"></a>LaTeX排版</h3><p>LaTeX的介绍和使用：<a href="https://www.yuque.com/chengbudong/coding/fyc92o?view=doc_embed">LaTeX的使用</a></p><p>句式模板库：<a href="https://www.phrasebank.manchester.ac.uk/">Academic Phrasebank</a></p><p>Academic Phrasebank 提供了一些学术论文写作措辞上的“细节”例子。比如，如何更好的并表达论文研究主题对社会的重要性、如何更好的表达以往研究的不足之处、如何更好的讨论研究结果等。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215150422.png"></p><h3 id="词组搭配查询：Linggle"><a href="#词组搭配查询：Linggle" class="headerlink" title="词组搭配查询：Linggle"></a>词组搭配查询：<a href="https://linggle.com/">Linggle</a></h3><p>Linggle 搜索引擎是一个可用于英语写作的语法、句子工具，可帮助写作者分析更准确的英文写作建议，能够根据词性来推测短句和句子，可精准的分享出完整英文句子如何撰写。例如，想找搭配 the performance 的词，可以这么搜索<code>_ the performance</code>。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215151757.png"></p><h3 id="语句搜索：Ludwig"><a href="#语句搜索：Ludwig" class="headerlink" title="语句搜索：Ludwig"></a>语句搜索：<a href="https://ludwig.guru/zh/">Ludwig</a></h3><p>Ludwig 是第一个整句的搜索引擎。通过搜索可靠的资源库，提供符合您表达语境的语句，帮助您提升英语写作能力。可以对比两个句子的使用频率、查找近义词、更好的短语翻译等。缺点是免费用户有查询次数限制。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215152653.png"></p><h3 id="语法检查：Grammarly"><a href="#语法检查：Grammarly" class="headerlink" title="语法检查：Grammarly"></a>语法检查：<a href="https://app.grammarly.com/">Grammarly</a></h3><p>Grammarly 是一款在线语法纠正和校对工具，还支持Windows、Mac、iOS和Android等多个平台。它能够检查单词拼写、纠正标点符号、修正语法错误、调整语气以及给出风格建议等；对学术写作来说，Grammarly还可以帮助查重。免费版基本够用，付费版可以选择学术写作检查模式。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215153817.png"></p><h3 id="在线Latex公式编辑器"><a href="#在线Latex公式编辑器" class="headerlink" title="在线Latex公式编辑器"></a>在线Latex公式编辑器</h3><p><a href="https://www.latexlive.com/home">LaTeX公式编辑器</a>，该在线工具可以输入latex语法，实时显示输出的效果，并且提供了常用的公式符号，公式模板，还可以上传图片识别公式。</p><h3 id="在线Latex表格制作"><a href="#在线Latex表格制作" class="headerlink" title="在线Latex表格制作"></a>在线Latex表格制作</h3><p><a href="https://www.tablesgenerator.com/latex_tables">Tables Generator</a>，该在线工具提供通过图形化操作绘制需要的表格，然后自动输出对应的Latex代码。</p><hr><h2 id="期刊查询"><a href="#期刊查询" class="headerlink" title="期刊查询"></a>期刊查询</h2><h3 id="知网-出版物检索"><a href="#知网-出版物检索" class="headerlink" title="知网-出版物检索"></a><a href="https://navi.cnki.net/knavi/">知网-出版物检索</a></h3><p>主要用于查看中文期刊的收录信息：北大中文核心、CSCD、EI。</p><h3 id="学术资源在线-期刊查询"><a href="#学术资源在线-期刊查询" class="headerlink" title="学术资源在线-期刊查询"></a><a href="http://spis.hnlat.com/journal">学术资源在线-期刊查询</a></h3><p>有期刊导航系统，可以根据学科类别、收录信息筛选需要的期刊，中文期刊和英文期刊都支持。</p><h3 id="LetPub-SCI期刊查询"><a href="#LetPub-SCI期刊查询" class="headerlink" title="LetPub-SCI期刊查询"></a><a href="http://www.letpub.com.cn/index.php?page=journalapp">LetPub-SCI期刊查询</a></h3><p>主要用于查看一个期刊的SCI收录情况：属于几区、影响因子、是否被预警等。</p><h2 id="论文源代码查找"><a href="#论文源代码查找" class="headerlink" title="论文源代码查找"></a>论文源代码查找</h2><h3 id="Code-Ocean"><a href="#Code-Ocean" class="headerlink" title="Code Ocean"></a><a href="https://codeocean.com/explore">Code Ocean</a></h3><p>支持在线运行和修改。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170219.png"></p><h3 id="Browse-State-of-the-Art"><a href="#Browse-State-of-the-Art" class="headerlink" title="Browse State-of-the-Art"></a><a href="https://paperswithcode.com/sota">Browse State-of-the-Art</a></h3><p>主要用于寻找机器学习领域的算法代码。<br><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170556.png"></p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a><a href="https://github.com/">GitHub</a></h3><p>最强的开源代码托管网站。</p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX的使用</title>
      <link href="/latex-de-shi-yong.html"/>
      <url>/latex-de-shi-yong.html</url>
      
        <content type="html"><![CDATA[<h1 id="LaTeX基础"><a href="#LaTeX基础" class="headerlink" title="LaTeX基础"></a>LaTeX基础</h1><h2 id="TEX是什么"><a href="#TEX是什么" class="headerlink" title="TEX是什么"></a>TEX是什么</h2><p>TEX 是高德纳 (Donald E. Knuth) 为排版文字和数学公式而开发的程序。</p><ul><li>TEX 系统提供了 300 + 600 多条基本的排版命令 </li><li>TEX 是目前公认的数学公式排版最好的排版语言</li><li>TEX 是免费的 </li><li>TEX 的名字来自大写的希腊字母 (τ, ϵ, χ)，意思是“科技”和“艺术” </li></ul><h2 id="LaTeX是什么"><a href="#LaTeX是什么" class="headerlink" title="LaTeX是什么"></a>LaTeX是什么</h2><p>LaTeX 是一个写作工具，可以用于创建具有专业排版的文档。它基于所见即所得的思想，即写作者只需要关注文档的内容，而计算机负责将其格式化。用户不再需要像 Word 中那样，在页面上用空格来控制格式，而是只需要输入纯文本，让 LaTeX 处理剩下的一切。</p><blockquote><p> LaTeX 是一种使用 TEX 程序作为排版引擎的格式，可以粗略地将它理解成是对 TEX 的一层封装。 </p></blockquote><h2 id="LaTeX的用处"><a href="#LaTeX的用处" class="headerlink" title="LaTeX的用处"></a>LaTeX的用处</h2><p>LaTeX 被广泛应用于科学文档、书籍以及许多其他出版物。它不仅可以创建精美的排版文档，而且还使得用户可以很快速地处理复杂的排版问题，比如输入数学公式、创建目录、管理引用、创建书目、保持布局一致等等。由于可用的开源软件包数量众多，因此 LaTeX 有无限的可能性。这些软件包赋予了用户更多的能力，例如添加脚注，绘制原理图，创建表格等。</p><p>人们使用 LaTeX 的最重要原因之一就是它分离了文档的内容与样式。这意味着你只需要编写文档的内容，我们就可以轻松更改其外观。同样，你也可以创建一个文档模板，用它来统一许多不同文档的外观，这样学术期刊可以创建投稿模板。这些模板具有预制的布局，只需要往里面添加内容即可。实际上，LaTeX 有数百种模板，覆盖从简历到幻灯片的所有内容。</p><h2 id="LaTeX的优点"><a href="#LaTeX的优点" class="headerlink" title="LaTeX的优点"></a>LaTeX的优点</h2><ul><li>LaTeX 特点<ul><li>专注于内容撰写，很少操心文档的版面设计</li><li>自动编号：章节、图表、公式定理、参考文献 ·······</li><li>自动生成目录、索引</li><li>公式、定理、参考文献、插图、页码等可以交叉引用</li><li>可以通过各种宏包扩展其功能, 实现各种特殊要求</li></ul></li><li>LaTeX VS. Word<ul><li>Word 简单易用，所见即所得，普通办公文档建议用 Word</li><li>LaTeX 输出美观，质量高，科技排版 (特别是数学) 推荐使用 LaTeX</li><li>LaTeX 能实现 Word 的所有功能，定制性高，但易用性不如 Word</li></ul></li></ul><h2 id="写LaTeX的工具"><a href="#写LaTeX的工具" class="headerlink" title="写LaTeX的工具"></a>写LaTeX的工具</h2><h3 id="TEX的发行版"><a href="#TEX的发行版" class="headerlink" title="TEX的发行版"></a>TEX的发行版</h3><ul><li>Windows 系统：TeXLive (推荐)，MiKTeX，CTEX 套装 (不推荐)</li><li>Unix/Linux 系统：TeXLive</li><li>Mac OS 系统：TeXLive，MacTeX</li></ul><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><ul><li>TeXLive : <a href="http://tug.org/texlive/">http://tug.org/texlive/</a> (大而全，全部宏包)</li><li>编辑器: WinEdt, TeXworks, TeXmaker, TeXStudio, vim, emacs, …</li><li>安装演示: 以 <a href="http://math.ecnu.edu.cn/~jypan/Teaching/Latex/Install/install_texlive_gb2312.html">TeXLive 2017</a> 为例</li></ul><h3 id="在线平台Overleaf"><a href="#在线平台Overleaf" class="headerlink" title="在线平台Overleaf"></a>在线平台<a href="https://cn.overleaf.com/">Overleaf</a></h3><p>本文章接下来对LaTeX的使用介绍主要以该平台为例。</p><hr><h1 id="LaTeX排版"><a href="#LaTeX排版" class="headerlink" title="LaTeX排版"></a>LaTeX排版</h1><h2 id="LaTeX文稿的排版过程"><a href="#LaTeX文稿的排版过程" class="headerlink" title="LaTeX文稿的排版过程"></a>LaTeX文稿的排版过程</h2><ol><li><p><strong>编写源文件</strong>：tex 源文件为纯文本文件，以 <code>.tex</code> 为扩展名</p><ul><li>可以使用任何文本编辑器编写, 如: WinEdt, EditPlus, Vi, Emacs, 推荐 WinEdt，专门针对 tex 开发, 提供许多便捷功能, 有助于提高排版效率</li></ul></li><li><p><strong>编译</strong>：用 <code>pdflatex</code> (英文文档) 或 <code>xelatex</code> (中文文档) 编译，生成相应的 pdf 文件</p></li></ol><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212181900.png" alt="来源：华东师范大学潘建瑜老师的课件"></p><h2 id="第一个LaTeX文件"><a href="#第一个LaTeX文件" class="headerlink" title="第一个LaTeX文件"></a>第一个LaTeX文件</h2><p>创建一个新的 LaTeX 项目。你可以在自己的电脑上创建 <code>.tex</code> 文件，也可以在 Overleaf 中启动新项目。让我们从最简单的示例开始：</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">{</span><span class="token keyword">article</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">%指定文档类型</span><span class="token comment" spellcheck="true">% 序言区</span><span class="token comment" spellcheck="true">%</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">% 正文</span>First document. This is a simple example, with no extra parameters or packages included.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212183155.png" alt="编译后的效果"></p><p>可以看到，LaTeX 已经对文本进行了格式化（如首行缩进）。下面我们仔细看一下上面这段代码每个部分的功能。</p><ul><li><p>代码的第一行声明了文档的类型，称为**类 (class)**。类控制文档的整体外观，不同类型的文档需要选择不同的类，比如，简历与论文需要不同的类。在这个例子中，类是 <code>article</code>，是最简单和最常见的 LaTeX 类。其他类型的文档可能需要使用不同的类，例如 <code>book</code> 或 <code>report</code>。</p></li><li><p>在<code>\begin &#123;document&#125;</code> 和 <code>\end &#123;document&#125;</code>这两个标记之间写入文档内容。这部分就是文档的**主体 (body)**，你可以在此处开始编写和更改文本。要在 PDF 中查看更改的结果，必须首先编译文档。</p></li></ul><blockquote><p>在 Overleaf 中只需单击 重新编译（Recompile）。还可以单击重新编译按钮旁边的小箭头，并将 “自动编译” 设置为 “开”，这样编辑文件时项目将会自动重新编译。<br>LATEX 源文件: 正文 + 命令 + 注解<br>排版命令 (简称 命令): 反斜杠开头的字符串<br>注解符: 百分号 %，注释的内容不会被显示出来<br>文档类型: \documentclass{…} (论文, 书籍, 幻灯片, 海报)<br>环境: <code>\begin&#123;...&#125;</code> 开头, <code>\end&#123;...&#125;</code> 结尾</p></blockquote><h2 id="LaTex命令"><a href="#LaTex命令" class="headerlink" title="LaTex命令"></a>LaTex命令</h2><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\command</span><span class="token function selector">\command</span><span class="token punctuation">[</span>option<span class="token punctuation">]</span><span class="token punctuation">{</span>arguments<span class="token punctuation">}</span></code></pre><ul><li>方括号中的是可选的 (称为选项)，花括号中的参数是必需的。</li></ul><pre class=" language-latex"><code class="language-latex">例: 一些常用命令<span class="token function selector">\documentcalss</span>, <span class="token function selector">\title</span>, <span class="token function selector">\author</span>, <span class="token function selector">\date</span>, <span class="token function selector">\usepackage</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">环境名</span><span class="token punctuation">}</span>, <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">环境名</span><span class="token punctuation">}</span> 组成一个环境</code></pre><ul><li>定义新命令</li></ul><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\newcommand</span><span class="token punctuation">{</span>新命令<span class="token punctuation">}</span><span class="token punctuation">{</span>命令内容<span class="token punctuation">}</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span>已有命令<span class="token punctuation">}</span><span class="token punctuation">{</span>命令内容<span class="token punctuation">}</span>例：<span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\eps</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\varepsilon</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">% $\eps$ = ε</span></code></pre><h2 id="分组和环境"><a href="#分组和环境" class="headerlink" title="分组和环境"></a>分组和环境</h2><ul><li>分组<ul><li>有些命令只对其参数起作用，如<code>\textbf&#123;abc&#125;</code></li><li>有些命令对后面所有的内容都起作用，这些命令通常也称为声明，如<code>\bfseries</code></li><li>可以利用大括号 (即分组) 来限制声明的作用范围</li></ul></li></ul><pre class=" language-latex"><code class="language-latex">This is <span class="token function selector">\textbf</span><span class="token punctuation">{</span>bold face<span class="token punctuation">}</span> style.    <span class="token comment" spellcheck="true">% bold face 粗体显示</span>This is <span class="token function selector">\bfseries</span> bold face style.   <span class="token comment" spellcheck="true">% bold face style. 粗体显示</span>This is <span class="token punctuation">{</span><span class="token function selector">\bfseries</span> bold face<span class="token punctuation">}</span> style. <span class="token comment" spellcheck="true">% bold face 粗体显示</span></code></pre><ul><li>环境：某些具有特定格式的内容需要放在相应的环境中, 如表格，数学公式等<ul><li>document 是 LaTeX 的一个最基本的环境，一篇文档有且只能有一个 document 环境</li></ul></li></ul><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">环境名</span><span class="token punctuation">}</span>...<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">环境名</span><span class="token punctuation">}</span></code></pre><h2 id="文档的序言区"><a href="#文档的序言区" class="headerlink" title="文档的序言区"></a>文档的序言区</h2><p>在基本框架中，文本是在 <code>\begin &#123;document&#125;</code> 命令之后输入的。在这个命令之前 <code>.tex</code> 文件中的所有内容都称为 **序言 (preamble)**。</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>12pt, letterpaper<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">article</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">[</span>utf8<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">inputenc</span><span class="token punctuation">}</span></code></pre><ul><li>位于源文件的最前面, 用于指定文档的整体结构和布局, 必须且只能选一种<ul><li>常用文档类: article, book, beamer, ctexart, ctexbook, ctexbeamer. 常用选项:<ul><li>10pt(缺省值)，11pt，12pt，指定基本字体的大小</li><li>letterpaper(缺省值)，a4paper，a5paper，…  指定纸张的大小</li><li>单双面选项：oneside，twoside，openright，openany</li><li>数学公式：leqno (公式编号在左边)，fleqn (靠左显示行间公式)</li></ul></li></ul></li><li>导言区用于放置<strong>全局控制命令</strong>，如：调用宏包，设置页面大小，…</li><li>放在导言区的命令对整个文档都起作用</li></ul><blockquote><p>更多有关 <a href="https://www.overleaf.com/learn/Page_size_and_margins">页面大小和边距</a> 的信息，可以参阅这篇文章。</p></blockquote><p><code>\usepackage[utf8]&#123;inputenc&#125;</code>这行命令指定了文档的编码，可以省略或更改为其他编码，但建议使用 utf-8。除非特别需要其他编码，否则请将此行添加到序言中。</p><h2 id="添加标题、作者和日期"><a href="#添加标题、作者和日期" class="headerlink" title="添加标题、作者和日期"></a>添加标题、作者和日期</h2><p>要将标题、作者和日期添加到文档中，就必须<strong>在序言中</strong>（不是文章的主体中）添加下面三行。它们是：</p><ul><li><code>\title&#123;标题&#125;</code></li><li><code>\author&#123;姓名&#125;</code><ul><li><code>\thanks&#123;简介&#125;</code>在 author 命令的大括号里添加这条命令，可以添加上标和脚注。如果你需要在文章中感谢一个机构，这个功能将非常有用。</li></ul></li><li><code>\date&#123;February 2021&#125;</code>你可以手动输入日期，或使用 \today 命令，以便在编译文档时自动更新日期。</li></ul><p>现在可以使用 <code>\maketitle</code> 命令在文档上打印这些信息。这条命令应该写在文档 主体 (body) 中你想要打印标题的位置。示例：</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>12pt, letterpaper, twoside<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">article</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">[</span>utf8<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">inputenc</span><span class="token punctuation">}</span><span class="token function selector">\title</span><span class="token punctuation">{</span>LaTeX Tutorial<span class="token punctuation">}</span><span class="token function selector">\author</span><span class="token punctuation">{</span>Cheng Budong <span class="token function selector">\thanks</span><span class="token punctuation">{</span>School of computer Science and Engineering<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\date</span><span class="token punctuation">{</span>December 2021<span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span class="token function selector">\maketitle</span>We have now added a title, author and date to our first <span class="token function selector">\LaTeX</span><span class="token punctuation">{</span><span class="token punctuation">}</span> document!<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212194706.png" alt="编译后的效果"></p><h2 id="换行，分段，分页"><a href="#换行，分段，分页" class="headerlink" title="换行，分段，分页"></a>换行，分段，分页</h2><ul><li><p>换行：自然换行 (若需强制换行，可使用 <code>\\</code> 或 <code>\linebreak</code>)</p><ul><li>一般情况下, 不建议使用强制换行</li></ul></li><li><p>分段：一个空行或 <code>\par</code></p><ul><li>建议使用空行进行分段，简洁直观</li></ul></li><li><p>分页：自然分页，若需 强制分页, 可用 <code>\newpage</code>，<code>\clearpage</code> 或 <code>\pagebreak</code></p><ul><li>一般情况下，不建议使用强制分页</li></ul></li><li><p>行间距：行间距伸展因子 <code>\baselinestretch</code> 或伸展命令 <code>\linespread</code></p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\baselinestretch</span><span class="token punctuation">}</span><span class="token punctuation">{</span>1.2<span class="token punctuation">}</span><span class="token function selector">\linespread</span><span class="token punctuation">{</span>1.2<span class="token punctuation">}</span></code></pre></li><li><p>段落间距和段落缩进：用自动设定的即可，英文每节的第一段首行不会自动缩进</p></li></ul><blockquote><p>可以在这篇有关 <a href="https://www.overleaf.com/learn/Paragraphs_and_new_lines">段落和换行</a> 的文章中找到更多信息。</p></blockquote><h2 id="加粗、斜体和下划线"><a href="#加粗、斜体和下划线" class="headerlink" title="加粗、斜体和下划线"></a>加粗、斜体和下划线</h2><ul><li>加粗：在 LaTeX 中，加粗字体使用 <code>\textbf&#123;&#125;</code> 命令。</li><li>斜体：在 LaTeX 中，斜体使用 <code>\textit&#123;&#125;</code> 命令。</li><li>下划线：在 LaTeX 中，下划线使用 <code>\underline&#123;&#125;</code> 命令。</li></ul><p>示例：</p><pre class=" language-latex"><code class="language-latex">Some of the <span class="token function selector">\textbf</span><span class="token punctuation">{</span>greatest<span class="token punctuation">}</span>were made by <span class="token function selector">\textbf</span><span class="token punctuation">{</span><span class="token function selector">\textit</span><span class="token punctuation">{</span>accident<span class="token punctuation">}</span><span class="token punctuation">}</span>.discoveries in <span class="token function selector">\underline</span><span class="token punctuation">{</span>science<span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212200351.png" alt="编译后的效果"></p><h2 id="引入宏包"><a href="#引入宏包" class="headerlink" title="引入宏包"></a>引入宏包</h2><p>宏包可用于更改 LaTeX 文档的默认外观，或实现更多功能。</p><ul><li>宏包调用方法 (只能出现在导言区)  <code>\usepackage[选项]&#123;宏包名&#125;</code></li><li>如果宏包不带选项, 则可以多个一起调用, 如: </li></ul><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">amsmath,amssymb,amsfonts</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">[</span>pagebackref<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">hyperref</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">[</span>numbers,sort<span class="token punctuation">&amp;</span>compress<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">natbib</span><span class="token punctuation">}</span></code></pre><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><p>LaTeX本身不能管理图像，因此需要使用一个 包 (package)。在这个例子中，要实现在文档中添加图片，需要使用 graphicx 包。graphicx 包提供了新的命令<code>\includegraphics&#123;&#125;</code>和<code>\graphicspath&#123;&#125;</code>。</p><ul><li>支持的图片格式：pdf，jpg，png (pdfLaTeX 和 xeLaTeX 编译)<ul><li>eps 格式的图片，epstopdf 宏包, 自动将 eps 转换为 pdf</li></ul></li><li>图形文件名中可以含路径</li><li>常用选项有<ul><li>width, height：指定图形的宽度和高度 (若只指定宽度或高度, 则按比例缩放)</li><li>scale：缩放因子，如 scale=0.5</li></ul></li></ul><p>添加图片的示例：</p><pre class=" language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">% 在序言区导入包</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">graphicx</span><span class="token punctuation">}</span><span class="token function selector">\graphicspath</span><span class="token punctuation">{</span><span class="token punctuation">{</span>images/<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">% 告诉LaTeX，这些图片保存在当前目录下名为images的文件夹中。</span><span class="token comment" spellcheck="true">% 在需要插入图片的地方写</span><span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>scale=0.5<span class="token punctuation">]</span><span class="token punctuation">{</span>overleaf.png<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">% 将图像实际包含在文档中的命令，scale缩放因子</span></code></pre><blockquote><p>注意：在 Overleaf 中，你需要首先上传图片。有关更多详细信息，请参见有关<a href="https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes#Generating_high-res_and_low-res_images">生成高分辨率和低分辨率图像</a>的内容。</p></blockquote><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212204315.png" alt="编译后的效果"></p><h3 id="标题、标签和引用"><a href="#标题、标签和引用" class="headerlink" title="标题、标签和引用"></a>标题、标签和引用</h3><p>可以像下面这样，在 figure 环境中对图片添加标题、标签和引用。</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">figure</span><span class="token punctuation">}</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span>    <span class="token function selector">\centering</span>    <span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>width=0.5<span class="token function selector">\textwidth</span><span class="token punctuation">]</span><span class="token punctuation">{</span>overleaf<span class="token punctuation">}</span>    <span class="token function selector">\caption</span><span class="token punctuation">{</span>overleaf icon<span class="token punctuation">}</span>    <span class="token function selector">\label</span><span class="token punctuation">{</span><span class="token keyword">fig:icon</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">figure</span><span class="token punctuation">}</span>As you can see in the figure <span class="token function selector">\ref</span><span class="token punctuation">{</span><span class="token keyword">fig:icon</span><span class="token punctuation">}</span>.</code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210237.png" alt="编译后的效果"></p><p>在这个示例中，有三个重要的命令：</p><ul><li><code>\caption&#123;overleaf icon&#125;</code>：此命令为图形设置标题。你可以将这条命令放置在图的上方或下方。</li><li><code>\label&#123;fig:icon&#125;</code>：如果你需要在文档中引用图像，请使用这条命令为图像设置标签。标签可以为图像编上号，并与下一个命令结合，对图片进行引用。</li><li><code>\ref&#123;fig:icon&#125;</code>：这条命令在编译后将显示替换为被引用图片对应的编号。</li></ul><blockquote><p>将图像放置在 LaTeX 文档中时，应始终将它们放置在 figure 环境或类似环境中，以便 LaTeX 适配图像和文字。<br>图片排版技巧：<a href="https://blog.csdn.net/qq_31347869/article/details/103832190">图片的插入及排版方法</a>，</p></blockquote><hr><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><p>在 LaTeX 中创建列表非常简单。可以使用不同的环境来创建不同形式的列表。环境是我们文档中具有不同呈现形式的各个部分。它们以<code>\begin&#123;...&#125;</code> 命令开始，以<code>\end&#123;...&#125;</code>命令结束。</p><p>列表主要有两种类型，<strong>有序列表</strong>和<strong>无序列表</strong>。分别使用不同的环境。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表是由 itemize 环境生成的。每个条目之前必须有 \item，如下所示。默认情况下，各个条目用黑点表示。条目中的文本可以是任何长度。</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">itemize</span><span class="token punctuation">}</span><span class="token function selector">\item</span><span class="token punctuation">[</span>标签<span class="token punctuation">]</span> 条目内容· · · · · ·<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">itemize</span><span class="token punctuation">}</span></code></pre><ul><li>缺省的标签与层数有关，分别为：<code>·，-，∗</code></li><li>也可通过选项标签来指定标签</li><li>不要标签：\item </li></ul><p>无序列表示例：</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">itemize</span><span class="token punctuation">}</span>  <span class="token function selector">\item</span> The individual entries are indicated with a black dot, a so-called bullet.  <span class="token function selector">\item</span> The text in the entries may be of any length.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">itemize</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210954.png" alt="编译后的效果"></p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表在 enumerate 环境中创建，针对条目的语法与无序列表一致。与无序列表一样，每个条目前必须添加 \item，它将自动生成标记该项目的数字，由从 1 开始。</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">enumerate</span><span class="token punctuation">}</span><span class="token function selector">\item</span><span class="token punctuation">[</span>标签<span class="token punctuation">]</span> 条目内容· · · · · ·<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">enumerate</span><span class="token punctuation">}</span></code></pre><ul><li>缺省标签为自动编号的符号，与层数有关，分别为:<ul><li>第一层：阿拉伯数字后跟圆点: 1. 2.</li><li>第二层：圆括号包围的小写拉丁字母: (a) (b)</li><li>第三层：小写罗马数字后跟圆点: i. ii.</li><li>第四层：大写拉丁字母后跟圆点: A. B.</li></ul></li><li>高级列表功能：list 环境，enumitem 宏包</li></ul><p>有序列表示例：</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">enumerate</span><span class="token punctuation">}</span>  <span class="token function selector">\item</span> This is the first entry in our list  <span class="token function selector">\item</span> The list numbers increase with each entry we add<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">enumerate</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212211202.png" alt="编译后的效果"></p><hr><h2 id="添加数学表达式"><a href="#添加数学表达式" class="headerlink" title="添加数学表达式"></a>添加数学表达式</h2><p>LaTeX 中有两种模式用于数学表达式：<strong>行内 (inline)模式</strong>和<strong>行间 (display)</strong> 模式。行内模式编写的公式是文本中的一部分，行间模式编写的公式不在段落中，而是放在单独的行上。</p><h3 id="行内"><a href="#行内" class="headerlink" title="行内"></a>行内</h3><p>要在行内模式下添加数学表达式，可以使用以下定界符之一，它们作用相同。选择哪个完全取决于个人喜好，推荐第一种。</p><pre class=" language-latex"><code class="language-latex"><span class="token equation string">$ ... $</span><span class="token equation string">\(... \)</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">math</span><span class="token punctuation">}</span><span class="token equation string"> ... </span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">math</span><span class="token punctuation">}</span></code></pre><p>行内模式示例：</p><pre class=" language-latex"><code class="language-latex">In physics, the mass-energy equivalence is statedby the equation <span class="token equation string">$E=mc^2$</span>, discovered in 1905 by Albert Einstein.</code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212213703.png" alt="编译后的效果"></p><h3 id="行间"><a href="#行间" class="headerlink" title="行间"></a>行间</h3><p>要在行间模式下显示数学公式，可以使用以下定界符之一。</p><pre class=" language-latex"><code class="language-latex"><span class="token equation string">\[ ... \]</span> <span class="token comment" spellcheck="true">% displaymath 环境的简化形式</span><span class="token equation string">$$</span> ··· <span class="token equation string">$$</span> <span class="token comment" spellcheck="true">% 与上面等价, 但可用\eqno 或 \leqno 手工编号</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">displaymath</span><span class="token punctuation">}</span> ... <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">displaymath</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">% 不带编号的单行公式数学环境</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">equation</span><span class="token punctuation">}</span><span class="token equation string"> ... </span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">equation</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">% 带 自动编号 的单行公式数学环境</span></code></pre><p>行间模式示例：</p><pre class=" language-latex"><code class="language-latex">The mass-energy equivalence is described by the famous equation<span class="token equation string">\[E=mc^2 \]</span>discovered in 1905 by Albert Einstein. In natural units (<span class="token equation string">$c = 1$</span>), the formula expresses the identity<span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">equation</span><span class="token punctuation">}</span><span class="token equation string">E=m</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">equation</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212215015.png" alt="编译后的效果"></p><blockquote><p>重要说明：equation* 环境是由外部软件包提供的，请参阅 <a href="https://www.overleaf.com/learn/Aligning_equations">amsmath文章</a>。<br><a href="https://texfaq.org/FAQ-dolldoll">不鼓励</a> 使用<code>$$ $$</code>，因为它会产生不一致的间距，而且可能不适用于某些数学软件包。<br>相关资料：<a href="https://blog.csdn.net/qq_17783559/article/details/88181836">Latex所有常用数学符号整理</a>，<a href="https://www.latexlive.com/">在线LaTeX公式编辑器</a></p></blockquote><hr><h2 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>在科学文献中，通常会在摘要部分里面简述论文的主要内容。在 LaTeX 中有针对摘要部分设计的环境。摘要环境会将文本以特殊格式放在文档顶部。</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">abstract</span><span class="token punctuation">}</span>This is a simple paragraph at the beginning of the document.A brief introduction about the main subject.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">abstract</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span></code></pre><h3 id="章节命令"><a href="#章节命令" class="headerlink" title="章节命令"></a>章节命令</h3><p>用来组织文档的命令因文档类型而异，最简单的组织形式是分节，它对所有文档格式均可用。</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\chapter</span><span class="token punctuation">{</span><span class="token headline class-name">First Chapter</span><span class="token punctuation">}</span><span class="token function selector">\section</span><span class="token punctuation">{</span><span class="token headline class-name">Introduction</span><span class="token punctuation">}</span>This is the first section.Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortisfacilisis sem. Nullam nec mi et neque pharetra sollicitudin. Praesent imperdietmi nec ante.Donec ullamcorper, felis non sodales...<span class="token function selector">\section</span><span class="token punctuation">{</span><span class="token headline class-name">Second Section</span><span class="token punctuation">}</span>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem. Nullam nec mi et neque pharetra sollicitudin. Praesent imperdiet mi necante...<span class="token function selector">\subsection</span><span class="token punctuation">{</span><span class="token headline class-name">First Subsection</span><span class="token punctuation">}</span>Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...<span class="token function selector">\section*</span><span class="token punctuation">{</span><span class="token headline class-name">Unnumbered Section</span><span class="token punctuation">}</span>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem</code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222432.png" alt="编译后的效果"></p><p>命令 <code>\section&#123;&#125;</code> 标记一个新分节的开始，在大括号内设置标题。分节编号是自动的，也可以通过在命令中加一个<code>*</code>来禁用编号，像这样：<code>\section*&#123;&#125;</code>。也可以有 \subsection{}，甚至 \subsubsection{}。下面列出了基本的标题深度级别：</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222849.png"></p><blockquote><p>请注意，\part 和 \chapter 仅在 report 和 book 类中可用。<br>有关文档结构的更完整讨论，请参阅 <a href="https://www.overleaf.com/learn/Sections_and_chapters">这篇文章</a>。</p></blockquote><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li><strong>thebibliography形式</strong><br>这种形式不需要额外的文件，参考文献信息直接在 thebibliography 环境内填写。</li></ol><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">thebibliography</span><span class="token punctuation">}</span><span class="token punctuation">{</span>编号样本<span class="token punctuation">}</span><span class="token function selector">\bibitem</span><span class="token punctuation">[</span>编号<span class="token punctuation">]</span><span class="token punctuation">{</span>标签<span class="token punctuation">}</span> 文献条目<span class="token function selector">\bibitem</span><span class="token punctuation">[</span>编号<span class="token punctuation">]</span><span class="token punctuation">{</span>标签<span class="token punctuation">}</span> 文献条目...<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">thebibliography</span><span class="token punctuation">}</span></code></pre><ul><li>“编号”：通常省略，系统自动按顺序编号，如 [1]，[2]，…</li><li>“编号样本”：指定用多大地方显示 “编号”，一般为数字，位数等于最大编号的位数</li><li>标签 ：文献的 id，可以由字母，数字和除逗号外的符号组成<ul><li>每个文献的标签必须唯一 (互不相同)</li><li>文献的引用：\cite{标签}，\cite{标签1，标签2}</li></ul></li><li>文献条目：论文 (作者，标题，期刊，卷期，年代，页码)，书籍 (作者，书名，出版社，年代)</li><li>参考文献的高级定制: natbib 宏包 (详细用法参见宏包手册)</li></ul><p>示例：</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">thebibliography</span><span class="token punctuation">}</span><span class="token punctuation">{</span>00<span class="token punctuation">}</span><span class="token function selector">\bibitem</span><span class="token punctuation">{</span>b2<span class="token punctuation">}</span> L. Bariah, D. Shehada and E. Salaha, ``Recent Advancesin VANET Security:A Survey," Vehicular Technology Conference. 2016.<span class="token function selector">\bibitem</span><span class="token punctuation">{</span>b3<span class="token punctuation">}</span> S. A. A. Shah, E. Ahmed, F. Xia, A. Karim, M. Shiraz and R. M. Noor, ``Adaptive beaconing approaches for vehicular ad hoc networks: A survey", IEEE Systems Journal, vol. 12, no. 2, pp. 1263-1277, 2018.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">thebibliography</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212224152.png" alt="编译后的效果"></p><ol start="2"><li><strong>Bibtex格式</strong></li></ol><p>这种方式是把参考文献写在<code>.bib</code>文件中，然后和<code>.tex</code>放在同一文件夹下，<code>.tex</code>直接引用<code>.bib</code>中的参考文献。这种方法比较简单，不需要你根据期刊的格式每个都改动，只需要你找到相关的文件，按照Bibtex格式放到<code>.bib</code>文件中，在<code>tex</code>文件中会按照指定的参考文献格式现实。</p><pre class=" language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">% 从google学术或者百度学术上找到参考文采用，然后引用->导出Bibtex格式，粘贴到.bib文件中</span>@article<span class="token punctuation">{</span>greenwade93,    author  = "George D. Greenwade",    title   = "The <span class="token punctuation">{</span>C<span class="token punctuation">}</span>omprehensive <span class="token punctuation">{</span>T<span class="token punctuation">}</span>ex <span class="token punctuation">{</span>A<span class="token punctuation">}</span>rchive <span class="token punctuation">{</span>N<span class="token punctuation">}</span>etwork (<span class="token punctuation">{</span>CTAN<span class="token punctuation">}</span>)",    year    = "1993",    journal = "TUGBoat",    volume  = "14",    number  = "3",    pages   = "342--351"<span class="token punctuation">}</span></code></pre><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\bibliographystyle</span><span class="token punctuation">{</span>ieeetr<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">%设置参考文献类型</span><span class="token function selector">\bibliography</span><span class="token punctuation">{</span>sample<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">%声明参考文献文件名称</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212230200.png" alt="Bibtex格式示例"></p><blockquote><p>参考资料：<a href="https://zymin.cn/arcticle/latex-reference-with-bib.html">LaTeX 参考文献及格式调整</a></p></blockquote><hr><h2 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h2><h3 id="一个简单的表格"><a href="#一个简单的表格" class="headerlink" title="一个简单的表格"></a>一个简单的表格</h3><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">{</span> c c c <span class="token punctuation">}</span> cell1 <span class="token punctuation">&amp;</span> cell2 <span class="token punctuation">&amp;</span> cell3 <span class="token function selector">\\</span> cell4 <span class="token punctuation">&amp;</span> cell5 <span class="token punctuation">&amp;</span> cell6 <span class="token function selector">\\</span> cell7 <span class="token punctuation">&amp;</span> cell8 <span class="token punctuation">&amp;</span> cell9<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231756.png"></p><ul><li><code>tabular</code> 环境是创建表的默认 LaTeX 方法。必须为此环境指定一个参数，这个例子里是 <code>&#123;c c c&#125;</code>。这告诉 LaTeX，表格将有三列，每列中的文本居中。你还可以使用 <code>r</code> 将文本向右对齐，使用 <code>l</code> 进行左对齐。</li><li>符号 <code>&amp;</code> 是分隔符，每行中的分隔符始终少于列数。要转到表格的下一行，需要使用换行命令 <code>\\</code>。</li><li>将整个表包装在 <code>center</code> 环境中，以让它出现在页面的中心。</li></ul><h3 id="添加边框"><a href="#添加边框" class="headerlink" title="添加边框"></a>添加边框</h3><p><code>tabular</code> 环境很灵活，可以在每列之间放置分隔线。</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">{</span> |c|c|c| <span class="token punctuation">}</span> <span class="token function selector">\hline</span> cell1 <span class="token punctuation">&amp;</span> cell2 <span class="token punctuation">&amp;</span> cell3 <span class="token function selector">\\</span> cell4 <span class="token punctuation">&amp;</span> cell5 <span class="token punctuation">&amp;</span> cell6 <span class="token function selector">\\</span> cell7 <span class="token punctuation">&amp;</span> cell8 <span class="token punctuation">&amp;</span> cell9 <span class="token function selector">\\</span> <span class="token function selector">\hline</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231902.png"></p><p>使用水平线命令 <code>\hline</code> 和垂直线参数 <code>|</code> 来添加边框。</p><ul><li><code>&#123;|c|c|c|&#125;</code>：这声明表中将会有由垂直线分隔的三列。<code>|</code> 符号指定这些列应由垂直线分隔。</li><li><code>\hline</code>：这条命令将插入一条水平线。这个示例中，我们在表格的顶部和底部加入了水平线。\hline 的使用次数没有限制。</li></ul><blockquote><p>可以借助 <a href="https://www.tablesgenerator.com/">TablesGenerator.com</a> 这样的在线工具导出表格的 LaTeX 代码。<em>“文件”&gt;“粘贴表数据”</em> 选项从电子表格软件粘贴数据。</p></blockquote><h3 id="标题、标签和引用-1"><a href="#标题、标签和引用-1" class="headerlink" title="标题、标签和引用"></a>标题、标签和引用</h3><p>可以使用与图片几乎相同的方式来为表格添加标题、标签和引用。唯一的区别是，使用<code>table</code>环境代替了<code>figure</code>环境。</p><pre class=" language-latex"><code class="language-latex">Table <span class="token function selector">\ref</span><span class="token punctuation">{</span><span class="token keyword">table:data</span><span class="token punctuation">}</span> is an example of referenced <span class="token function selector">\LaTeX</span><span class="token punctuation">{</span><span class="token punctuation">}</span> elements.<span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">table</span><span class="token punctuation">}</span><span class="token punctuation">[</span>h!<span class="token punctuation">]</span><span class="token function selector">\centering</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">{</span>||c c c c||<span class="token punctuation">}</span> <span class="token function selector">\hline</span> Col1 <span class="token punctuation">&amp;</span> Col2 <span class="token punctuation">&amp;</span> Col2 <span class="token punctuation">&amp;</span> Col3 <span class="token function selector">\\</span> <span class="token punctuation">[</span>0.5ex<span class="token punctuation">]</span> <span class="token function selector">\hline</span><span class="token function selector">\hline</span> 1 <span class="token punctuation">&amp;</span> 6 <span class="token punctuation">&amp;</span> 87837 <span class="token punctuation">&amp;</span> 787 <span class="token function selector">\\</span> 2 <span class="token punctuation">&amp;</span> 7 <span class="token punctuation">&amp;</span> 78 <span class="token punctuation">&amp;</span> 5415 <span class="token function selector">\\</span> 3 <span class="token punctuation">&amp;</span> 545 <span class="token punctuation">&amp;</span> 778 <span class="token punctuation">&amp;</span> 7507 <span class="token function selector">\\</span> 4 <span class="token punctuation">&amp;</span> 545 <span class="token punctuation">&amp;</span> 18744 <span class="token punctuation">&amp;</span> 7560 <span class="token function selector">\\</span> 5 <span class="token punctuation">&amp;</span> 88 <span class="token punctuation">&amp;</span> 788 <span class="token punctuation">&amp;</span> 6344 <span class="token function selector">\\</span> <span class="token punctuation">[</span>1ex<span class="token punctuation">]</span> <span class="token function selector">\hline</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token function selector">\caption</span><span class="token punctuation">{</span>Table to test captions and labels<span class="token punctuation">}</span><span class="token function selector">\label</span><span class="token punctuation">{</span><span class="token keyword">table:data</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">table</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212232247.png" alt="编译后的效果"></p><hr><h2 id="添加算法伪代码"><a href="#添加算法伪代码" class="headerlink" title="添加算法伪代码"></a>添加算法伪代码</h2><p>在LaTeX中写伪代码也是需要导入外部宏包，常用的宏包有<code>algorithms</code>、<code>algorithmicx</code> 和 <code>algorithm2e</code>。</p><p><code>algorithms</code>和<code>algorithmicx</code>一般一起使用， 简易但可定制性不高。<code>algorithm2e</code>相对复杂些，但是操作性更高，可定制性更强，所以这里主要详细介绍<code>algorithm2e</code>的使用。</p><h3 id="algorithms和algorithmicx示例"><a href="#algorithms和algorithmicx示例" class="headerlink" title="algorithms和algorithmicx示例"></a>algorithms和algorithmicx示例</h3><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">algorithm</span><span class="token punctuation">}</span>  <span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\algorithmicrequire</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\textbf</span><span class="token punctuation">{</span>Input:<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\algorithmicensure</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\textbf</span><span class="token punctuation">{</span>Output:<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token function selector">\caption</span><span class="token punctuation">{</span>Calculate <span class="token equation string">$y = x^n$</span><span class="token punctuation">}</span>     <span class="token function selector">\label</span><span class="token punctuation">{</span><span class="token keyword">alg3</span><span class="token punctuation">}</span>     <span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">algorithmic</span><span class="token punctuation">}</span>        <span class="token function selector">\REQUIRE</span> <span class="token equation string">$n <span class="token equation-command regex">\geq</span> 0 <span class="token equation-command regex">\vee</span> x <span class="token equation-command regex">\neq</span> 0$</span>         <span class="token function selector">\ENSURE</span> <span class="token equation string">$y = x^n$</span>         <span class="token function selector">\STATE</span> <span class="token equation string">$y <span class="token equation-command regex">\gets</span> 1$</span>         <span class="token function selector">\IF</span><span class="token punctuation">{</span><span class="token equation string">$n &lt; 0$</span><span class="token punctuation">}</span>         <span class="token function selector">\STATE</span> <span class="token equation string">$X <span class="token equation-command regex">\gets</span> 1 / x$</span>         <span class="token function selector">\STATE</span> <span class="token equation string">$N <span class="token equation-command regex">\gets</span> -n$</span>         <span class="token function selector">\ELSE</span>         <span class="token function selector">\STATE</span> <span class="token equation string">$X <span class="token equation-command regex">\gets</span> x$</span>         <span class="token function selector">\STATE</span> <span class="token equation string">$N <span class="token equation-command regex">\gets</span> n$</span>         <span class="token function selector">\ENDIF</span>         <span class="token function selector">\WHILE</span><span class="token punctuation">{</span><span class="token equation string">$N <span class="token equation-command regex">\neq</span> 0$</span><span class="token punctuation">}</span>         <span class="token function selector">\IF</span><span class="token punctuation">{</span><span class="token equation string">$N$</span> is even<span class="token punctuation">}</span>         <span class="token function selector">\STATE</span> <span class="token equation string">$X <span class="token equation-command regex">\gets</span> X <span class="token equation-command regex">\times</span> X$</span>         <span class="token function selector">\STATE</span> <span class="token equation string">$N <span class="token equation-command regex">\gets</span> N / 2$</span>         <span class="token function selector">\ELSE</span><span class="token punctuation">[</span><span class="token equation string">$N$</span> is odd<span class="token punctuation">]</span> <span class="token function selector">\STATE</span> <span class="token equation string">$y <span class="token equation-command regex">\gets</span> y <span class="token equation-command regex">\times</span> X$</span>         <span class="token function selector">\STATE</span> <span class="token equation string">$N <span class="token equation-command regex">\gets</span> N - 1$</span>         <span class="token function selector">\ENDIF</span>         <span class="token function selector">\ENDWHILE</span>     <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">algorithmic</span><span class="token punctuation">}</span> <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">algorithm</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：<br>要在序言区引入宏包：\usepackage{algorithm, algorithmic}<br>\renewcommand{\algorithmicrequire}{\textbf{Input:}} 将官方的require关键字换成常用的input<br>\renewcommand{\algorithmicensure}{\textbf{Output:}} 将官方的ensure关键字换成常用的output</p></blockquote><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211213105605.png" alt="编译后的效果"></p><h3 id="algorithm2e"><a href="#algorithm2e" class="headerlink" title="algorithm2e"></a>algorithm2e</h3><ol><li><strong>第一个示例</strong></li></ol><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">{</span><span class="token keyword">article</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">[</span>linesnumbered,ruled<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">algorithm2e</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">% 导入宏包</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">algorithm</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">% 伪代码开始</span>    <span class="token function selector">\caption</span><span class="token punctuation">{</span>identify Row Context<span class="token punctuation">}</span>    <span class="token function selector">\KwIn</span><span class="token punctuation">{</span><span class="token equation string">$r_i$</span>, <span class="token equation string">$Backgrd(T_i)$</span>=<span class="token equation string">${T_1,T_2,<span class="token equation-command regex">\ldots</span> ,T_n}$</span> and similarity threshold <span class="token equation string">$<span class="token equation-command regex">\theta</span>_r$</span><span class="token punctuation">}</span>    <span class="token function selector">\KwOut</span><span class="token punctuation">{</span><span class="token equation string">$con(r_i)$</span><span class="token punctuation">}</span>    <span class="token equation string">$con(r_i)= <span class="token equation-command regex">\Phi</span>$</span><span class="token function selector">\;</span>    <span class="token function selector">\For</span><span class="token punctuation">{</span><span class="token equation string">$j=1;j <span class="token equation-command regex">\le</span> n;j <span class="token equation-command regex">\ne</span> i$</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span>      float <span class="token equation string">$maxSim=0$</span> <span class="token function selector">\;</span>      <span class="token equation string">$r^{maxSim}=null$</span> <span class="token function selector">\;</span>      <span class="token function selector">\While</span><span class="token punctuation">{</span>not end of <span class="token equation string">$T_j$</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span>        compute Jaro(<span class="token equation string">$r_i,r_m$</span>)(<span class="token equation string">$r_m<span class="token equation-command regex">\in</span> T_j$</span>) <span class="token function selector">\;</span>        <span class="token function selector">\If</span><span class="token punctuation">{</span><span class="token equation string">$(Jaro(r_i,r_m) <span class="token equation-command regex">\ge</span> <span class="token equation-command regex">\theta</span>_r)<span class="token equation-command regex">\wedge</span> (Jaro(r_i,r_m)<span class="token equation-command regex">\ge</span> r^{maxSim})$</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span>          replace <span class="token equation string">$r^{maxSim}$</span> with <span class="token equation string">$r_m$</span> <span class="token function selector">\;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token equation string">$con(r_i)=con(r_i)<span class="token equation-command regex">\cup</span> {r^{maxSim}}$</span> <span class="token function selector">\;</span>    <span class="token punctuation">}</span>    return <span class="token equation string">$con(r_i)$</span> <span class="token function selector">\;</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">algorithm</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">% 伪代码结束</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span> </code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211213112018.png"></p><blockquote><p><strong>注意：</strong>每一行的结尾必须以 <code>\;</code> 结束, 只有那些以宏命令开始的不应该以 <code>\;</code> 结束, 例如在此示例中的 <code>\caption</code>、<code>\KwIn</code> 、<code>\KwOut</code>属于宏命令, 不需要以 <code>\;</code> 结尾. </p></blockquote><ol start="2"><li><strong>常用环境</strong></li></ol><ul><li>algorithm：这是最常用的环境</li><li>algorithm*：与前者一样, 但它用于两列文本中, 使算法跨两列</li></ul><ol start="3"><li><strong>基本关键字</strong></li></ol><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211213142106.png"></p><ol start="4"><li><strong>算法布局</strong></li></ol><p>在引入宏包时，在option选项中加入了 linesnumbered 和 ruled，所以在算法伪代码中会有行编号和上下尺（即三线表样式）。当然，外部的封装环境不止 ruled 一种选项, 也可以选择完全封闭的选项亦或者完全没有外部边框的选项。</p><ul><li>boxed：将算法封装在框中</li><li>boxruled：用方框将算法环绕，将标题放在上方，并在标题后添加一行</li><li>ruled：在顶部和底部都有一条线的算法。请注意，标题不再位于算法下方，而是在算法开始时设置</li><li>algoruled：如上所述，但在尺后留有多余的空格</li><li>tworuled：tworuled 的行为就 ruled 的一样，但标题后面没有加一行</li><li>plain：默认值，无功能</li></ul><ol start="5"><li><strong>第二个示例</strong></li></ol><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">{</span><span class="token keyword">article</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">[</span>linesnumbered,ruled<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">algorithm2e</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">algorithm</span><span class="token punctuation">}</span>  <span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\algorithmcfname</span><span class="token punctuation">}</span><span class="token punctuation">{</span>Pseudo code<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">% 这句如果写在引言区，将对全部算法生效</span>  <span class="token function selector">\SetKwData</span><span class="token punctuation">{</span>Left<span class="token punctuation">}</span><span class="token punctuation">{</span>left<span class="token punctuation">}</span><span class="token function selector">\SetKwData</span><span class="token punctuation">{</span>This<span class="token punctuation">}</span><span class="token punctuation">{</span>this<span class="token punctuation">}</span><span class="token function selector">\SetKwData</span><span class="token punctuation">{</span>Up<span class="token punctuation">}</span><span class="token punctuation">{</span>up<span class="token punctuation">}</span>  <span class="token function selector">\SetKwFunction</span><span class="token punctuation">{</span>Union<span class="token punctuation">}</span><span class="token punctuation">{</span>Union<span class="token punctuation">}</span><span class="token function selector">\SetKwFunction</span><span class="token punctuation">{</span>FindCompress<span class="token punctuation">}</span><span class="token punctuation">{</span>FindCompress<span class="token punctuation">}</span>  <span class="token function selector">\SetKwInOut</span><span class="token punctuation">{</span>Input<span class="token punctuation">}</span><span class="token punctuation">{</span>input<span class="token punctuation">}</span><span class="token function selector">\SetKwInOut</span><span class="token punctuation">{</span>Output<span class="token punctuation">}</span><span class="token punctuation">{</span>output<span class="token punctuation">}</span>  <span class="token function selector">\Input</span><span class="token punctuation">{</span>A bitmap <span class="token equation string">$Im$</span> of size <span class="token equation string">$w<span class="token equation-command regex">\times</span> l$</span><span class="token punctuation">}</span>  <span class="token function selector">\Output</span><span class="token punctuation">{</span>A partition of the bitmap<span class="token punctuation">}</span>  <span class="token function selector">\BlankLine</span>  <span class="token function selector">\emph</span><span class="token punctuation">{</span>special treatment of the first line<span class="token punctuation">}</span><span class="token function selector">\;</span>  <span class="token function selector">\For</span><span class="token punctuation">{</span><span class="token equation string">$i<span class="token equation-command regex">\leftarrow</span> 2$</span> <span class="token function selector">\KwTo</span> <span class="token equation string">$l$</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token function selector">\emph</span><span class="token punctuation">{</span>special treatment of the first element of line <span class="token equation string">$i$</span><span class="token punctuation">}</span><span class="token function selector">\;</span>    <span class="token function selector">\For</span><span class="token punctuation">{</span><span class="token equation string">$j<span class="token equation-command regex">\leftarrow</span> 2$</span> <span class="token function selector">\KwTo</span> <span class="token equation string">$w$</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\label</span><span class="token punctuation">{</span><span class="token keyword">forins</span><span class="token punctuation">}</span>      <span class="token function selector">\Left</span><span class="token equation string">$<span class="token equation-command regex">\leftarrow</span>$</span> <span class="token function selector">\FindCompress</span><span class="token punctuation">{</span><span class="token equation string">$Im[i,j-1]$</span><span class="token punctuation">}</span><span class="token function selector">\;</span>      <span class="token function selector">\Up</span><span class="token equation string">$<span class="token equation-command regex">\leftarrow</span>$</span> <span class="token function selector">\FindCompress</span><span class="token punctuation">{</span><span class="token equation string">$Im[i-1,]$</span><span class="token punctuation">}</span><span class="token function selector">\;</span>      <span class="token function selector">\This</span><span class="token equation string">$<span class="token equation-command regex">\leftarrow</span>$</span> <span class="token function selector">\FindCompress</span><span class="token punctuation">{</span><span class="token equation string">$Im[i,j]$</span><span class="token punctuation">}</span><span class="token function selector">\;</span>      <span class="token function selector">\If</span>(<span class="token function selector">\tcp*</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">{</span>O(<span class="token function selector">\Left</span>,<span class="token function selector">\This</span>)==1<span class="token punctuation">}</span>)<span class="token punctuation">{</span><span class="token function selector">\Left</span> compatible with <span class="token function selector">\This</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\label</span><span class="token punctuation">{</span><span class="token keyword">lt</span><span class="token punctuation">}</span>        <span class="token function selector">\lIf</span><span class="token punctuation">{</span><span class="token function selector">\Left</span> <span class="token equation string">$&lt;$</span> <span class="token function selector">\This</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\Union</span><span class="token punctuation">{</span><span class="token function selector">\Left</span>,<span class="token function selector">\This</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token function selector">\lElse</span><span class="token punctuation">{</span><span class="token function selector">\Union</span><span class="token punctuation">{</span><span class="token function selector">\This</span>,<span class="token function selector">\Left</span><span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function selector">\lForEach</span><span class="token punctuation">{</span>element <span class="token equation string">$e$</span> of the line <span class="token equation string">$i$</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\FindCompress</span><span class="token punctuation">{</span>p<span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function selector">\caption</span><span class="token punctuation">{</span>disjoint decomposition<span class="token punctuation">}</span>  <span class="token function selector">\label</span><span class="token punctuation">{</span><span class="token keyword">algo_disjdecomp</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">algorithm</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211213141730.png" alt="编译后的效果"></p><hr><h1 id="Overleaf写LaTeX"><a href="#Overleaf写LaTeX" class="headerlink" title="Overleaf写LaTeX"></a>Overleaf写LaTeX</h1><h2 id="Overleaf网站：链接"><a href="#Overleaf网站：链接" class="headerlink" title="Overleaf网站：链接"></a>Overleaf网站：<a href="https://cn.overleaf.com/project">链接</a></h2><p>Overleaf是一个使用LaTeX进行多人协同编辑的平台，可以免费注册和使用，不用下载LaTeX软件，是最为著名的LaTeX在线协作系统。主要特色是有LaTeX插件，编辑功能十分完善，有实时预览（即编即看，无需手动编译）的功能。科研工作者可以在各大期刊的网站上下载到其Overleaf模板，进行论文写作。</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf%E9%A6%96%E9%A1%B5.png" alt="Overleaf项目首页"></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212153121.png"></p><ul><li><strong>空白项目</strong>：一个最基本的.tex文档，适用于从零开始定制个人性化的板式。</li></ul><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154608.png" alt="空白项目"></p><ul><li><strong>样例项目</strong>：一个通用的模板，包含了一篇论文的基本结构、基础样式，作者可以在此模板上填充自己的内容，适用于快速开始一篇论文的撰写。</li></ul><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154413.png" alt="带模板项目"></p><ul><li><strong>上传项目</strong>：通过其它地方下载的模板创建项目，适用于使用所投期刊提供的模板撰写论文。</li></ul><ul><li><strong>从模板库导入</strong>：通过Overleaf平台的模板库中寻找模板，里面有各式各样的模板。</li></ul><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212160030.png"></p><h2 id="编辑页面介绍"><a href="#编辑页面介绍" class="headerlink" title="编辑页面介绍"></a>编辑页面介绍</h2><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233704.png" alt="页面介绍"></p><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf_uploadFig.png"></p><h2 id="下载完成的文档"><a href="#下载完成的文档" class="headerlink" title="下载完成的文档"></a>下载完成的文档</h2><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233900.png"></p><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul><li>LaTeX工作室在知识库：<a href="https://www.latexstudio.net/texdoc/#/">链接</a></li><li>华东师范大学潘建瑜老师讲义：<a href="http://math.ecnu.edu.cn/~jypan/Teaching/Latex/">链接</a></li><li>简短的 LaTeX2e 介绍：<a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/info/lshort/chinese/lshort-zh-cn.pdf">链接</a></li><li>algorithm2e 宏包官方文档：<a href="http://tug.ctan.org/macros/latex/contrib/algorithm2e/doc/algorithm2e.pdf">链接</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> overleaf </tag>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>共用体</title>
      <link href="/gong-yong-ti.html"/>
      <url>/gong-yong-ti.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是共用体"><a href="#什么是共用体" class="headerlink" title="什么是共用体"></a>什么是共用体</h2><ul><li>和结构体不同的是，结构体的每个成员都是占用一块独立的存储空间，而共用体<strong>所有的成员都占用同一块存储空间</strong>。</li><li>和结构体一样，共用体在使用之前必须先定义共用体类型，再定义共用体变量。</li></ul><h2 id="定义共用体类型"><a href="#定义共用体类型" class="headerlink" title="定义共用体类型"></a>定义共用体类型</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">union</span> 共用体名<span class="token punctuation">{</span>    数据类型 属性名称<span class="token punctuation">;</span>    数据类型 属性名称<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p> <strong>特点</strong>: 由于所有属性共享同一块内存空间，所以只要其中一个属性发生了改变，其它的属性都会受到影响 </p></blockquote><h2 id="定义共用体类型变量"><a href="#定义共用体类型变量" class="headerlink" title="定义共用体类型变量"></a>定义共用体类型变量</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">union</span> 共用体名 共用体变量名称<span class="token punctuation">;</span></code></pre><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">union</span> Person <span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">union</span> Person p1<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof = %i\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>    p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1.age = %i\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 25</span>    p1<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1.ch = %c\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// a</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1.age = %i\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 97</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>通信中的数据包会用到共用体，因为不知道对方会发送什么样的数据包过来，用共用体定义几种格式的包，收到包之后就可以根据包的格式取出数据。</li><li>节约内存。如果有2个很长的数据结构，但不会同时使用，比如一个表示老师，一个表示学生，要统计老师和学生的情况，用结构体就比较浪费内存，这时就可以考虑用共用体来设计。</li><li>某些应用需要大量的临时变量，这些变量类型不同，而且会随时更换。而你的堆栈空间有限，不能同时分配那么多临时变量。这时可以使用共用体让这些变量共享同一个内存空间，这些临时变量不用长期保存，用完即丢，和寄存器差不多，不用维护。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言：结构体</title>
      <link href="/jie-gou-ti.html"/>
      <url>/jie-gou-ti.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是结构体"><a href="#什么是结构体" class="headerlink" title="什么是结构体"></a>什么是结构体</h2><p>结构体是一种构造类型，允许用户自定义，用于保存一组不同类型的数据。例如，书籍信息，书的编号应为整型；书名应为字符型。显然这组数据不能用数组来存放, 为了解决这个问题，C语言中给出了一种构造数据类型——“结构(structure)”或叫“结构体”。</p><h2 id="定义结构体类型"><a href="#定义结构体类型" class="headerlink" title="定义结构体类型"></a>定义结构体类型</h2><p>通过定义结构体类型来告诉编译器，我们的结构体中需要存储哪些类型的数据。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> 结构体名 <span class="token punctuation">{</span>    类型名<span class="token number">1</span> 成员名<span class="token number">1</span><span class="token punctuation">;</span>    类型名<span class="token number">2</span> 成员名<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    类型名n 成员名n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>示例：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books<span class="token punctuation">{</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span>  <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意不要丢掉末尾的分号</p></blockquote><h2 id="定义结构体变量"><a href="#定义结构体变量" class="headerlink" title="定义结构体变量"></a>定义结构体变量</h2><p>定义好结构体类型后，我们就可以利用定义的结构体类型来定义结构体变量。</p><p>&nbsp;<br>格式：<code>struct 结构体名 结构体变量名</code>; </p><ul><li>先定义结构体类型，再定义变量</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book1<span class="token punctuation">;</span></code></pre><ul><li>定义结构体类型的同时定义变量</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books <span class="token punctuation">{</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token punctuation">}</span> book2<span class="token punctuation">;</span></code></pre><ul><li>匿名结构体定义结构体变量 (这种方法可以省略结构体类型名，但不能复用)</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token punctuation">}</span> book3<span class="token punctuation">;</span></code></pre><h2 id="访问结构体成员"><a href="#访问结构体成员" class="headerlink" title="访问结构体成员"></a>访问结构体成员</h2><p>使用成员访问运算符<code>.</code>来访问结构体成员，形式为：<code>结构体变量名.成员名</code>。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books <span class="token punctuation">{</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Books book1<span class="token punctuation">;</span>boo1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"C语言"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="结构体变量的初始化"><a href="#结构体变量的初始化" class="headerlink" title="结构体变量的初始化"></a>结构体变量的初始化</h2><ul><li>定义的同时按顺序初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C语言"</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>定义的同时不按顺序初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>先定义再逐个初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book3<span class="token punctuation">;</span>book3<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>book3<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Python"</span><span class="token punctuation">;</span></code></pre><ul><li>先定义再一次性初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book4<span class="token punctuation">;</span>book4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> Books<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="结构体类型作用域"><a href="#结构体类型作用域" class="headerlink" title="结构体类型作用域"></a>结构体类型作用域</h2><ul><li>结构体类型定义在函数内部的作用域与局部变量的作用域是相同的<ul><li>从定义的那一行开始，直到遇到return或者大括号结束为止</li></ul></li><li>结构体类型定义在函数外部的作用域与全局变量的作用域是相同的<ul><li>从定义的那一行开始，直到本文结束为止</li></ul></li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books <span class="token punctuation">{</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Books book1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C语言"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个同名的局部结构体，会屏蔽掉全局结构体</span>    <span class="token keyword">struct</span> Books <span class="token punctuation">{</span>        <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>author<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Books book1<span class="token punctuation">;</span>    book1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// book1.title = "Python"; // 由于屏蔽掉了全局结构体，此处会报错</span>    book1<span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token string">"Brian"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//局部结构体作用域到这结束</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//此处使用的是全局的结构体</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p>结构体数组与数据值型数组不同之处在于每个数组元素都一个结构体类型的数据，它们分别包括各个成员项。</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219134658.png"></p><p>&nbsp;<br>格式：<code>struct 结构体类型名称 数组名称[元素个数]</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>定义的同时做初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化了前两个</span></code></pre><ul><li>先定义在初始化</li></ul><pre class=" language-c"><code class="language-c">book<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>book<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Python"</span><span class="token punctuation">;</span></code></pre><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p>指向结构体变量的指针。</p><p>&nbsp;<br>格式：<code>struct 结构体类型名 *结构体指针变量名;</code></p><p>通过结构体指针访问结构体成员的两种方式：</p><ul><li><code>(*结构体指针变量名).成员名</code></li><li><code>结构体指针变量名-&gt;成员名</code></li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books <span class="token punctuation">{</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Books book1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> Books <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>book1<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>book_id<span class="token punctuation">,</span> p<span class="token operator">-></span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><blockquote><p>(*结构体指针变量名)的 ( ) 不能省略，因为成员符<code>.</code>的优先级高于<code>*</code>。 </p></blockquote><h2 id="结构体内存分析"><a href="#结构体内存分析" class="headerlink" title="结构体内存分析"></a>结构体内存分析</h2><ul><li>给结构体变量开辟存储空间和给普通开辟存储空间一样, 会从内存地址大的位置开始开辟</li><li>给结构体成员开辟存储空间和给数组元素开辟存储空间一样, 会从所占用内存地址小的位置开始开辟</li><li>结构体变量占用的内存空间是其最大成员的大小的倍数(对齐问题)</li></ul><blockquote><p>计算机系统对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的起始地址的值是某个数 k 的倍数，这就是所谓的内存对齐，而这个 k 则被称为该数据类型的对齐模数(alignment modulus)。<br>对齐的优点：</p><ul><li>简化了处理器与内存之间传输系统的设计</li><li>可以提升读取数据的速度。<br>比如：处理器每次读写内存的时候都从某个8倍数的地址开始，一次读出或写入8个字节的数据，假如软件能保证double类型的数据都从8倍数地址开始，那么读或写一个double类型数据就只需要一次内存操作。否则，我们就可能需要两次内存操作才能完成这个动作，因为数据或许恰好横跨在两个符合对齐要求的8字节内存块上。</li></ul></blockquote><h3 id="对齐规则"><a href="#对齐规则" class="headerlink" title="对齐规则"></a>对齐规则</h3><ol><li>结构体变量的首地址能够被其最大基本类型成员的大小所整除。</li></ol><blockquote><p><strong>备注</strong>：编译器在给结构体开辟空间时，首先找到结构体中最宽的基本数据类型，然后寻找内存地址能被该基本数据类型所整除的位置，作为结构体的首地址。将这个最宽的基本数据类型的大小作为上面介绍的对齐模数。</p></blockquote><ol start="2"><li>结构体每个成员相对于结构体首地址的偏移量是当前成员大小的整数倍。</li></ol><blockquote><p><strong>备注</strong>：为结构体的一个成员开辟空间之前，编译器首先检查预开辟空间的首地址相对于结构体首地址的偏移是否是该成员的整数倍，若是，则存放该成员，反之，则在该成员和上一个成员之间填充一定的字节，以达到整数倍的要求，也就是将预开辟空间的首地址后移几个字节。</p><ul><li>在GCC中，对齐模数最大只能是4，也就是说，即使结构体中有double类型，对齐模数还是4。</li><li>除了平台差异外，还有预编译指令<code>#pragma pack(n)</code>手动设置，n–只能填1 2 4 8 16</li></ul></blockquote><ol start="3"><li>结构体的总大小为其最大基本类型成员大小的整数倍。</li></ol><blockquote><p><strong>备注</strong>：结构体总大小是包括填充字节，最后一个成员满足上面两条以外，还必须满足第三条，否则就必须在最后填充几个字节以达到本条要求。</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 基本数据类型大小, win 64位。</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 4</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 4</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 8</span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Str1 <span class="token punctuation">{</span>                                            <span class="token keyword">char</span> a<span class="token punctuation">;</span>        <span class="token keyword">char</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>str1<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str1<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">2</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211207161618.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Str2 <span class="token punctuation">{</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span>     <span class="token keyword">char</span> b<span class="token punctuation">;</span>     <span class="token keyword">int</span>  c<span class="token punctuation">;</span> <span class="token punctuation">}</span>str2<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str2<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">8</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size2.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Str3 <span class="token punctuation">{</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span>  c<span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>str3<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str3<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">12</span>    </code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size3.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Str4 <span class="token punctuation">{</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span>  c<span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span>str4<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str4<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">16</span>    </code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size4.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> str5 <span class="token punctuation">{</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span>    <span class="token keyword">short</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token punctuation">;</span>    <span class="token keyword">char</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>str5<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str4<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">24</span> </code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size5.png"></p><h2 id="结构体嵌套定义"><a href="#结构体嵌套定义" class="headerlink" title="结构体嵌套定义"></a>结构体嵌套定义</h2><p>成员也可以又是一个结构，即构成了嵌套的结构 。</p><p>例如：在Books中嵌套Date结构</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_struct.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Date <span class="token punctuation">{</span>    <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Books <span class="token punctuation">{</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Date publication_time<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>连续使用成员运算符<code>.</code>来访问嵌套结构体的成员</p><pre class=" language-c"><code class="language-c">book1<span class="token punctuation">.</span>publication_time<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2021</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span>publication_time<span class="token punctuation">.</span>month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span>publication_time<span class="token punctuation">.</span>day <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></code></pre><h2 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h2><ul><li>结构体虽然是构造类型，但是结构体之间的赋值是值拷贝，而不是地址传递。</li><li>结构体变量作为函数参数形参时也是值传递，在函数内修改形参，不会影响外界实参。</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> Books <span class="token punctuation">{</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Books book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> Books book1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Books book2<span class="token punctuation">;</span>    book2 <span class="token operator">=</span> book1<span class="token punctuation">;</span>    book2<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"C++"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 C</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book2<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book2<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 C++</span>    <span class="token function">f</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 Python</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 C</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Books book<span class="token punctuation">)</span> <span class="token punctuation">{</span>    book<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Python"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分支结构</title>
      <link href="/fen-zhi-jie-gou.html"/>
      <url>/fen-zhi-jie-gou.html</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。</p><h3 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名。下面的例子中演示了如何构造一个分支结构。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""用户身份验证"""</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入用户名: '</span><span class="token punctuation">)</span>password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入口令: '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用户名是admin且密码是123456则身份验证成功否则身份验证失败</span><span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'admin'</span> <span class="token operator">and</span> password <span class="token operator">==</span> <span class="token string">'123456'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'身份验证成功!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'身份验证失败!'</span><span class="token punctuation">)</span></code></pre><p>&nbsp;<br>需要说明的是，不同于C++、Java等编程语言，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，强烈建议大家<strong>不要使用制表键来缩进代码</strong>，如果你已经习惯了这么做，可以<strong>设置代码编辑工具将1个制表键自动变成4个空格</strong>，很多的代码编辑工具都支持这项功能。</p><blockquote><p><strong>提示</strong>：<code>if</code>和<code>else</code>的最后面有一个<code>:</code>，它是用英文输入法输入的冒号；程序中输入的<code>&#39;</code>、<code>&quot;</code>、<code>=</code>、<code>(</code>、<code>)</code>等特殊字符，都是在英文输入法状态下输入的。有很多初学者经常不注意这一点，结果运行代码的时候就会遇到很多莫名其妙的错误提示。<strong>强烈建议</strong>大家在写代码的时候都<strong>打开英文输入法</strong>（注意是英文输入法而不是中文输入法的英文输入模式），这样可以避免很多不必要的麻烦。</p></blockquote><p>&nbsp;<br>当然如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p><p>$$<br>f(x)=\begin{cases}<br>3x-5 &amp; (x&gt;1) \\<br>x+2 &amp; (-1 \leq x \leq 1) \\<br>5x+3 &amp; (x&lt;-1)<br>\end{cases}<br>$$</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""分段函数求值"""</span>x <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'x = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">5</span><span class="token keyword">elif</span> x <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">else</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'f({x}) = {y}'</span><span class="token punctuation">)</span></code></pre><p>&nbsp;<br>当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在<code>if</code>的内部构造出一个新的分支结构，同理<code>elif</code>和<code>else</code>中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""分段函数求值"""</span>x <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'x = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">5</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'f({x}) = {y}'</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>说明：</strong> 大家可以自己感受和评判一下这两种写法到底是哪一种更好。在<a href="https://www.python.org/dev/peps/pep-0020/"><strong>Python之禅</strong></a>中有这么一句话：“Flat is better than nested”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次如果很多，会严重的影响代码的可读性，所以能使用扁平化结构时就不要使用嵌套结构。<strong>Python之禅翻译版</strong></p></blockquote><blockquote><p>优美 &gt; 丑陋<br>明确 &gt; 隐晦<br>简单 &gt; 复杂<br>复杂 &gt; 繁复<br>扁平 &gt; 嵌套<br>稀疏 &gt; 拥挤<br>可读性很重要<br>固然代码的实用性比洁癖更重要，<br>所谓的“特例”也往往没有特殊到必须违背上述规则的程度<br>除非必要，否则不要无故忽视异常<br>如果遇到模棱两可的逻辑，请不要自作聪明地瞎猜。<br>应该提供一种，且最好只提供一种，一目了然的途径<br>当然这是没法一蹴而就的，除非你是荷兰人<br>固然，立刻着手 好过 永远不做。<br>然而，永远不做 也好过 闷头蛮干<br>倘若你的实现很难解释，它一定不是个好主意<br>倘若你的实现一目了然，它可能是个好主意<br>命名空间大法好，同志们要多多搞！</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h3 id="例子1：英制单位英寸与公制单位厘米互换。"><a href="#例子1：英制单位英寸与公制单位厘米互换。" class="headerlink" title="例子1：英制单位英寸与公制单位厘米互换。"></a>例子1：英制单位英寸与公制单位厘米互换。</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""英制单位英寸和公制单位厘米互换"""</span>value <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入长度: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>unit <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入单位: '</span><span class="token punctuation">)</span><span class="token keyword">if</span> unit <span class="token operator">==</span> <span class="token string">'in'</span> <span class="token operator">or</span> unit <span class="token operator">==</span> <span class="token string">'英寸'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%f英寸 = %f厘米'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> value <span class="token operator">*</span> <span class="token number">2.54</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">elif</span> unit <span class="token operator">==</span> <span class="token string">'cm'</span> <span class="token operator">or</span> unit <span class="token operator">==</span> <span class="token string">'厘米'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%f厘米 = %f英寸'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> value <span class="token operator">/</span> <span class="token number">2.54</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入有效的单位'</span><span class="token punctuation">)</span></code></pre><h3 id="例子2：百分制成绩转换为等级制成绩。"><a href="#例子2：百分制成绩转换为等级制成绩。" class="headerlink" title="例子2：百分制成绩转换为等级制成绩。"></a>例子2：百分制成绩转换为等级制成绩。</h3><blockquote><p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""百分制成绩转换为等级制成绩"""</span>score <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入成绩: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'A'</span><span class="token keyword">elif</span> score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'B'</span><span class="token keyword">elif</span> score <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'C'</span><span class="token keyword">elif</span> score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'D'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'E'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'对应的等级是:'</span><span class="token punctuation">,</span> grade<span class="token punctuation">)</span></code></pre><h3 id="例子3：输入三条边长，如果能构成三角形就计算周长和面积。"><a href="#例子3：输入三条边长，如果能构成三角形就计算周长和面积。" class="headerlink" title="例子3：输入三条边长，如果能构成三角形就计算周长和面积。"></a>例子3：输入三条边长，如果能构成三角形就计算周长和面积。</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积"""</span>a <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'a = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'b = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'c = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> a <span class="token operator">+</span> b <span class="token operator">></span> c <span class="token operator">and</span> a <span class="token operator">+</span> c <span class="token operator">></span> b <span class="token operator">and</span> b <span class="token operator">+</span> c <span class="token operator">></span> a<span class="token punctuation">:</span>    peri <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'周长: {peri}'</span><span class="token punctuation">)</span>    half <span class="token operator">=</span> peri <span class="token operator">/</span> <span class="token number">2</span>    area <span class="token operator">=</span> <span class="token punctuation">(</span>half <span class="token operator">*</span> <span class="token punctuation">(</span>half <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>half <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>half <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'面积: {area}'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不能构成三角形'</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>说明：</strong> 上面通过边长计算三角形面积的公式叫做<a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/zh-hans/%25E6%25B5%25B7%25E4%25BC%25A6%25E5%2585%25AC%25E5%25BC%258F">海伦公式</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语言元素</title>
      <link href="/python-yu-yan-yuan-su.html"/>
      <url>/python-yu-yan-yuan-su.html</url>
      
        <content type="html"><![CDATA[<p>作为一个程序员，可能经常会被外行人问到两个问题，其一是“什么是（计算机）程序”，其二是“写（计算机）程序能做什么”，这里我们先对两个问题做一个回答。<strong>程序是指令的集合</strong>，<strong>写程序就是用指令控制计算机做我们想让它做的事情</strong>。那么，为什么要用Python语言来写程序呢？因为<strong>Python语言简单优雅</strong>，相比C、C++、Java这样的编程语言，<strong>Python对初学者更加友好</strong>，当然这并不是说Python不像其他语言那样强大，<strong>Python几乎是无所不能的</strong>，在第一节课的时候，我们就说到了Python可以用于服务器程序开发、云平台开发、数据分析、机器学习等各个领域。当然，Python语言还可以用来粘合其他语言开发的系统，所以也经常被戏称为“<strong>胶水语言</strong>”。</p><hr><h2 id="一些计算机常识"><a href="#一些计算机常识" class="headerlink" title="一些计算机常识"></a>一些计算机常识</h2><p>在开始系统的学习编程之前，我们先来科普一些计算机的基础知识。计算机的硬件系统通常由五大部件构成，包括：<strong>运算器</strong>、<strong>控制器</strong>、<strong>存储器</strong>、<strong>输入设备</strong>和<strong>输出设备</strong>。其中，运算器和控制器放在一起就是我们常说的<strong>中央处理器</strong>，它的功能是执行各种运算和控制指令。刚才我们提到过程序是指令的集合，写程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。目前，我们使用的计算机基本都是“冯·诺依曼体系结构”的计算机，这种计算机有两个关键点：一是要将<strong>存储设备与中央处理器分开</strong>；二是将<strong>数据以二进制方式编码</strong>。</p><p>&nbsp;<br>二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法本质是一样的。人类因为有十根手指所以使用了十进制，因为在计数时十根手指用完之后就只能用进位的方式来表示更大的数值。当然凡事都有例外，玛雅人可能是因为长年光着脚的原因，把脚趾头也都用上了，于是他们使用了二十进制的计数法。在这种计数法的指导下，玛雅人的历法就与我们平常使用的历法并不相同。按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“的荒诞说法。今天很多人都在猜测，玛雅文明之所以发展缓慢跟使用了二十进制是有关系的。对于计算机来说，二进制在物理器件上最容易实现的，因为可以用高电压表示1，用低电压表示0。不是所有写程序的人都需要知道十进制与二进制如何转换，大多数时候我们即便不了解这些知识也能写出程序，但是我们必须要知道<strong>计算机是使用二进制计数的</strong>，不管什么<strong>数据到了计算机内存中都是以二进制形式存在的</strong>。</p><h2 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h2><p>要想在计算机内存中保存数据，首先就得说一说变量这个概念。在编程语言中，<strong>变量是数据的载体</strong>，简单的说就是一块用来保存数据的内存空间，<strong>变量的值可以被读取和修改</strong>，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，最常见的就是数值，除了数值之外还有文本、图形、音频、视频等各种各样的数据。虽然数据在计算机中都是以二进制形态存在的，但是我们可以用不同类型的变量来表示数据类型的差异。<strong>Python中的数据类型很多</strong>，而且也<strong>允许我们自定义新的数据类型</strong>（这一点在后面会讲到），这里我们需要先了解几种常用的数据类型。</p><ul><li><strong>整型（int）</strong>：Python中可以处理任意大小的整数，而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li><strong>浮点型（float）</strong>：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li><strong>字符串型（str）</strong>：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>。</li><li><strong>布尔型（bool）</strong>：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。</li><li><strong>复数型</strong>：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li></ul><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有自己的名字一样。在Python中，变量命名需要遵循以下这些规则，这些规则又分为必须遵守的硬性规则和建议遵守的非硬性规则。</p><p>&nbsp;<br>硬性规则：</p><ol><li>变量名由<strong>字母</strong>、数字和<strong>下划线</strong>构成，数字不能开头。需要说明的是，这里说的字母指的是Unicode字符，Unicode称为万国码，囊括了世界上大部分的文字系统，这也就意味着中文、日文、希腊字母等都可以作为变量名中的字符，但是像<code>!</code>、<code>@</code>、<code>#</code>这些特殊字符是不能出现在变量名中的，而且我们强烈建议大家<strong>尽可能使用英文字母</strong>。</li><li><strong>大小写敏感</strong>，简单的说就是大写的<code>A</code>和小写的<code>a</code>是两个不同的变量。</li><li>变量名<strong>不要跟Python语言的关键字</strong>（有特殊含义的单词，后面会讲到）和<strong>保留字</strong>（如函数、模块等的名字）<strong>发生重名的冲突</strong>。</li></ol><p>&nbsp;<br>非硬性规则：</p><ol><li>变量名通常使用小写英文字母，多个单词用下划线进行连接。</li><li>受保护的变量用单个下划线开头（后面会讲到）。</li><li>私有的变量用两个下划线开头（后面会讲到）。</li></ol><p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到<strong>见名知意</strong>也非常重要。</p><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><p>下面通过几个例子来说明变量的类型和变量使用。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""使用变量保存数据并进行加减乘除运算"""</span>a <span class="token operator">=</span> <span class="token number">45</span>          <span class="token comment" spellcheck="true"># 变量a保存了45</span>b <span class="token operator">=</span> <span class="token number">12</span>          <span class="token comment" spellcheck="true"># 变量b保存了12</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 57</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 33</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 540</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3.75</span></code></pre><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""使用type()检查变量的类型"""</span>a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token number">12.345</span>c <span class="token operator">=</span> <span class="token string">'hello, world'</span>d <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;class 'int'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;class 'float'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;class 'bool'></span></code></pre><p>不同类型的变量可以相互转换，这一点可以通过Python的内置函数来实现。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>下面的例子为大家演示了Python中的类型转换。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""Python中的类型转换"""</span>a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token number">12.345</span>c <span class="token operator">=</span> <span class="token string">'hello, world'</span>d <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 整数转成浮点数</span><span class="token keyword">print</span><span class="token punctuation">(</span>float<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 100.0</span><span class="token comment" spellcheck="true"># 浮点型转成字符串 (输出字符串时不会看到引号哟)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 12.345</span><span class="token comment" spellcheck="true"># 字符串转成布尔型 (有内容的字符串都会变成True)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># True</span><span class="token comment" spellcheck="true"># 布尔型转成整数 (True会转成1，False会转成0)</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 将整数变成对应的字符 (97刚好对应字符表中的字母a)</span><span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a</span><span class="token comment" spellcheck="true"># 将字符转成整数 (Python中字符和字符串表示法相同)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 97</span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/python_yunsuanfu.png"></p><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>Python中的算术运算符非常丰富，除了大家最为熟悉的加减乘除之外，还有整除运算符、求模（求余数）运算符和求幂运算符。下面的例子为大家展示了算术运算符的使用。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""算术运算符"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 加法运算 444</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">-</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 减法运算 198</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">*</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 乘法运算 39483</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">/</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 除法运算 2.6097560975609757</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">%</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 求模运算 75</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">//</span> <span class="token number">123</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 整除运算 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 求幂运算 103041</span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""赋值运算符和复合赋值运算符"""</span>a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">3</span>a <span class="token operator">+=</span> b        <span class="token comment" spellcheck="true"># 相当于：a = a + b 13</span>a <span class="token operator">*=</span> a <span class="token operator">+</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true"># 相当于：a = a * (a + 2) 13*(13+2)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 算一下这里会输出什么 </span></code></pre><h3 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，需要提醒的是比较相等用的是<code>==</code>，请注意这里是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的运算符；比较不相等用的是<code>!=</code>，这不同于数学上的不等号，Python 2中曾经使用过<code>&lt;&gt;</code>来表示不等关系，大家知道就可以了。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>&nbsp;<br>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。</p><p><code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。</p><p>&nbsp;<br><code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。</p><p>&nbsp;<br><code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，<code>not</code>后面的布尔值如果是<code>True</code>，运算结果就是<code>False</code>；而<code>not</code>后面的布尔值如果是<code>False</code>，运算结果就是<code>True</code>。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""比较运算符和逻辑运算符的使用"""</span>flag0 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>flag1 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span>flag2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">1</span>flag3 <span class="token operator">=</span> flag1 <span class="token operator">and</span> flag2flag4 <span class="token operator">=</span> flag1 <span class="token operator">or</span> flag2flag5 <span class="token operator">=</span> <span class="token operator">not</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag0 ='</span><span class="token punctuation">,</span> flag0<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># flag0 = True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag1 ='</span><span class="token punctuation">,</span> flag1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># flag1 = True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag2 ='</span><span class="token punctuation">,</span> flag2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># flag2 = False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag3 ='</span><span class="token punctuation">,</span> flag3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># flag3 = False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag4 ='</span><span class="token punctuation">,</span> flag4<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># flag4 = True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag5 ='</span><span class="token punctuation">,</span> flag5<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># flag5 = False</span></code></pre><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code><br>先做<code>1 == 1</code>，产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p></blockquote><h3 id="例子1：华氏温度转换为摄氏温度"><a href="#例子1：华氏温度转换为摄氏温度" class="headerlink" title="例子1：华氏温度转换为摄氏温度"></a>例子1：华氏温度转换为摄氏温度</h3><blockquote><p><strong>提示</strong>：华氏温度到摄氏温度的转换公式为：$C=(F-32)/18$。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""将华氏温度转换为摄氏温度"""</span>f <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入华氏温度: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1.8</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.1f华氏度 = %.1f摄氏度'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>说明</strong>：在使用<code>print</code>函数输出时，也可以对字符串内容进行格式化处理，上面<code>print</code>函数中的字符串<code>%.1f</code>是一个占位符，稍后会由一个<code>float</code>类型的变量值替换掉它。同理，如果字符串中有<code>%d</code>，后面可以用一个<code>int</code>类型的变量值替换掉它，而<code>%s</code>会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中<code>&#123;f:.1f&#125;</code>和<code>&#123;c:.1f&#125;</code>可以先看成是<code>&#123;f&#125;</code>和<code>&#123;c&#125;</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{f:.1f}华氏度 = {c:.1f}摄氏度'</span><span class="token punctuation">)</span></code></pre><h3 id="例子2：输入圆的半径计算周长和面积"><a href="#例子2：输入圆的半径计算周长和面积" class="headerlink" title="例子2：输入圆的半径计算周长和面积"></a>例子2：输入圆的半径计算周长和面积</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""输入半径计算圆的周长和面积"""</span>radius <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入圆的半径: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>perimeter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3.1416</span> <span class="token operator">*</span> radiusarea <span class="token operator">=</span> <span class="token number">3.1416</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'周长: %.2f'</span> <span class="token operator">%</span> perimeter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'面积: %.2f'</span> <span class="token operator">%</span> area<span class="token punctuation">)</span></code></pre><h3 id="例子3：输入年份判断是不是闰年。"><a href="#例子3：输入年份判断是不是闰年。" class="headerlink" title="例子3：输入年份判断是不是闰年。"></a>例子3：输入年份判断是不是闰年。</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""输入年份 如果是闰年输出True 否则输出False"""</span>year <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入年份: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>is_leap <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">or</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span>is_leap<span class="token punctuation">)</span></code></pre><blockquote><p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站计算机类学习资源整理</title>
      <link href="/b-zhan-ji-suan-ji-lei-xue-xi-zi-yuan-zheng-li.html"/>
      <url>/b-zhan-ji-suan-ji-lei-xue-xi-zi-yuan-zheng-li.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><hr><h3 id="1-计算机网络微课堂"><a href="#1-计算机网络微课堂" class="headerlink" title="1.  计算机网络微课堂"></a>1.  计算机网络微课堂</h3><p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=1"><strong>https://www.bilibili.com/video/BV1c4411d7jb?p=1</strong></a></p><p>讲师：湖科大教书匠<br>评价：通俗易懂，重点知识十分细致，配合实验，而且有考研408 的难题的讲解，也是非常适合考研党，除了课程内容外还有很多习题讲解视频。因此就业党和考研党都可以食用。</p><h3 id="2-王道计算机考研-计算机网络"><a href="#2-王道计算机考研-计算机网络" class="headerlink" title="2.  王道计算机考研 计算机网络"></a>2.  王道计算机考研 计算机网络</h3><p><a href="https://www.bilibili.com/video/BV19E411D78Q?p=1"><strong>https://www.bilibili.com/video/BV19E411D78Q?p=1</strong></a></p><p>UP：王道论坛<br>评价：小姐姐声音非常好听，百听不厌，内容与考研高度贴合，非常适合考研党和声音控。</p><h2 id="二、数据结构与算法"><a href="#二、数据结构与算法" class="headerlink" title="二、数据结构与算法"></a>二、数据结构与算法</h2><hr><h3 id="1-【郝斌】-数据结构入门"><a href="#1-【郝斌】-数据结构入门" class="headerlink" title="1.【郝斌】-数据结构入门"></a>1.【郝斌】-数据结构入门</h3><p><a href="https://www.bilibili.com/video/BV11s41167h6?p=1"><strong>https://www.bilibili.com/video/BV11s41167h6?p=1</strong></a><br>老师：郝斌<br>评价：思路是以初学者的思路来思考的，非常适合小白</p><h3 id="2-【C语言描述】《数据结构和算法》（小甲鱼）"><a href="#2-【C语言描述】《数据结构和算法》（小甲鱼）" class="headerlink" title="2.【C语言描述】《数据结构和算法》（小甲鱼）"></a>2.【C语言描述】《数据结构和算法》（小甲鱼）</h3><p><a href="https://www.bilibili.com/video/BV1jW411K7yg?p=1"><strong>https://www.bilibili.com/video/BV1jW411K7yg?p=1</strong></a><br>我UP：鱼C-小甲鱼<br>评价：良心 up ，授课风格相比大学教授，语言风趣幽默，不死板，用例子带知识点，容易听得进去，亲和力拉满</p><h3 id="3-尚硅谷-Java-数据结构与-Java-算法（Java数据结构与算法）"><a href="#3-尚硅谷-Java-数据结构与-Java-算法（Java数据结构与算法）" class="headerlink" title="3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）"></a>3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）</h3><p><a href="https://www.bilibili.com/video/BV1E4411H73v?p=1"><strong>https://www.bilibili.com/video/BV1E4411H73v?p=1</strong></a><br>UP：尚硅谷<br>讲师：韩顺平<br>评价：用JAVA语言讲数据结构和算法，韩老师视频内容全，并且每次课都会带着你写代码，把每一个例子都会实现，韩老师口碑也不必多言了。</p><h2 id="三、操作系统"><a href="#三、操作系统" class="headerlink" title="三、操作系统"></a>三、操作系统</h2><hr><h3 id="1-完结-2020-南京大学-操作系统：设计与实现-蒋炎岩"><a href="#1-完结-2020-南京大学-操作系统：设计与实现-蒋炎岩" class="headerlink" title="1.  [完结] 2020 南京大学  操作系统：设计与实现 (蒋炎岩)"></a>1.  [完结] 2020 南京大学  操作系统：设计与实现 (蒋炎岩)</h3><p><a href="https://www.bilibili.com/video/BV1N741177F5?p=1"><strong>https://www.bilibili.com/video/BV1N741177F5?p=1</strong></a><br>评价：南大的课质量真的硬，老师讲课时用的课本是 Remzi 的 Operating Systems: Three Easy Pieces ，老师的每一节视频都比较长，一次肝完贼爽，老师把晦涩的东西讲的也非常的通俗易懂，豁然开朗.</p><h3 id="2-清华-操作系统原理-向勇、陈渝"><a href="#2-清华-操作系统原理-向勇、陈渝" class="headerlink" title="2.  清华 操作系统原理(向勇、陈渝)"></a>2.  清华 操作系统原理(向勇、陈渝)</h3><p><a href="https://www.bilibili.com/video/BV1uW411f72n"><strong>https://www.bilibili.com/video/BV1uW411f72n</strong></a><br>评价：讲解非常细致，但是稍微需要有一定的基础（毕竟老师平时是给清华大学讲课的）对于我这种考不上清华的人来说，能给我个听清华老师讲课的机会，还有什么可说的呢？</p><h2 id="四、计算机组成原理"><a href="#四、计算机组成原理" class="headerlink" title="四、计算机组成原理"></a>四、计算机组成原理</h2><hr><h3 id="1-计算机组成原理（哈工大刘宏伟）"><a href="#1-计算机组成原理（哈工大刘宏伟）" class="headerlink" title="1.   计算机组成原理（哈工大刘宏伟）"></a>1.   计算机组成原理（哈工大刘宏伟）</h3><p><a href="https://www.bilibili.com/video/BV1t4411e7LH?p=1"><strong>https://www.bilibili.com/video/BV1t4411e7LH?p=1</strong></a><br>评价：他的课课不仅适合考研人，也非常适合初学者，初学者也听得懂。建议 1.5 倍速食用。</p><h2 id="五、编译原理"><a href="#五、编译原理" class="headerlink" title="五、编译原理"></a>五、编译原理</h2><hr><h3 id="1-编译原理（哈工大）"><a href="#1-编译原理（哈工大）" class="headerlink" title="1. 编译原理（哈工大）"></a>1. 编译原理（哈工大）</h3><p><a href="https://www.bilibili.com/video/BV1zW411t7YE?p=1"><strong>https://www.bilibili.com/video/BV1zW411t7YE?p=1</strong></a><br>评价：PPT 做的非常认真，讲得也很通俗易懂，思路清晰。直观简洁的，全程没有一句废话。<br>上面五块内容很多选用了大学教授的课程视频，因为这几门课原本就是科班生的必修课，加上近来针对新人和应届生的面试逐渐“八股化”，因此很多概念性的课本知识不得不补。</p><h2 id="六、编程语言学习"><a href="#六、编程语言学习" class="headerlink" title="六、编程语言学习"></a>六、编程语言学习</h2><hr><h3 id="1-程序设计入门-C语言-浙江大学慕课-翁恺"><a href="#1-程序设计入门-C语言-浙江大学慕课-翁恺" class="headerlink" title="1. 程序设计入门-C语言 浙江大学慕课 翁恺"></a>1. 程序设计入门-C语言 浙江大学慕课 翁恺</h3><p>B站：<a href="https://www.bilibili.com/video/BV19W411B7w1?p=1"><strong>https://www.bilibili.com/video/BV19W411B7w1?p=1</strong></a><br>中国大学MOOC：<a href="https://www.icourse163.org/course/ZJU-199001"><strong>https://www.icourse163.org/course/ZJU-199001</strong></a></p><h3 id="2-【C语言】《带你学C带你飞》小甲鱼"><a href="#2-【C语言】《带你学C带你飞》小甲鱼" class="headerlink" title="2. 【C语言】《带你学C带你飞》小甲鱼"></a>2. 【C语言】《带你学C带你飞》小甲鱼</h3><p><a href="https://www.bilibili.com/video/BV17s411N78s?p=1"><strong>https://www.bilibili.com/video/BV17s411N78s?p=1</strong></a></p><h2 id="七、MySQL"><a href="#七、MySQL" class="headerlink" title="七、MySQL"></a>七、MySQL</h2><hr><h3 id="1-MySQL基础教程丨mysql数据库实战（sql数据库优化）"><a href="#1-MySQL基础教程丨mysql数据库实战（sql数据库优化）" class="headerlink" title="1.  MySQL基础教程丨mysql数据库实战（sql数据库优化）"></a>1.  MySQL基础教程丨mysql数据库实战（sql数据库优化）</h3><p><a href="https://www.bilibili.com/video/BV1xW411u7ax"><strong>https://www.bilibili.com/video/BV1xW411u7ax</strong></a><br>课程来自尚硅谷，有基础有实战。</p><h3 id="2-尚硅谷MySQL数据库高级，mysql优化，数据库优化"><a href="#2-尚硅谷MySQL数据库高级，mysql优化，数据库优化" class="headerlink" title="2  尚硅谷MySQL数据库高级，mysql优化，数据库优化"></a>2  尚硅谷MySQL数据库高级，mysql优化，数据库优化</h3><p><a href="https://www.bilibili.com/video/BV1KW411u7vy"><strong>https://www.bilibili.com/video/BV1KW411u7vy</strong></a><br>尚硅谷的课程特点就是分好多好多好多P，每一集都好短，集数超多，如果第一天没有被这种设定劝退的话，讲的还是不错的。</p><h2 id="八、Maven、Git"><a href="#八、Maven、Git" class="headerlink" title="八、Maven、Git"></a>八、Maven、Git</h2><hr><h3 id="1-2020最新Maven教程-Maven基础篇之Maven实战入门"><a href="#1-2020最新Maven教程-Maven基础篇之Maven实战入门" class="headerlink" title="1. 2020最新Maven教程-Maven基础篇之Maven实战入门"></a>1. 2020最新Maven教程-Maven基础篇之Maven实战入门</h3><p><a href="https://www.bilibili.com/video/BV1dp4y1Q7Hf"><strong>https://www.bilibili.com/video/BV1dp4y1Q7Hf</strong></a><br>课程来自动力节点，从是什么，做什么，为什么到怎么用，分步清晰</p><h3 id="2-Git与GitHub基础全套完整版教程（快速上手，一套搞定）"><a href="#2-Git与GitHub基础全套完整版教程（快速上手，一套搞定）" class="headerlink" title="2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）"></a>2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）</h3><h5 id="https-www-bilibili-com-video-BV1pW411A7a5"><a href="#https-www-bilibili-com-video-BV1pW411A7a5" class="headerlink" title="https://www.bilibili.com/video/BV1pW411A7a5"></a><a href="https://www.bilibili.com/video/BV1pW411A7a5">https://www.bilibili.com/video/BV1pW411A7a5</a></h5><p>尚硅谷的课程，评价如题，Git和GitHub快速上手一套搞定 </p><h2 id="九、Linux"><a href="#九、Linux" class="headerlink" title="九、Linux"></a>九、Linux</h2><hr><h3 id="1-【小白入门-通俗易懂】2021韩顺平-一周学会Linux"><a href="#1-【小白入门-通俗易懂】2021韩顺平-一周学会Linux" class="headerlink" title="1.【小白入门 通俗易懂】2021韩顺平 一周学会Linux"></a>1.【小白入门 通俗易懂】2021韩顺平 一周学会Linux</h3><p><a href="https://www.bilibili.com/video/BV1Sv411r7vd"><strong>https://www.bilibili.com/video/BV1Sv411r7vd</strong></a><br>通俗易懂，从0开始，够肝的话，一周真的可以。</p><h2 id="十、面试、简历、职场、学习法、技巧、脱口秀"><a href="#十、面试、简历、职场、学习法、技巧、脱口秀" class="headerlink" title="十、面试、简历、职场、学习法、技巧、脱口秀"></a>十、面试、简历、职场、学习法、技巧、脱口秀</h2><hr><h3 id="1-不高兴就喝水-水哥yyds！"><a href="#1-不高兴就喝水-水哥yyds！" class="headerlink" title="1. 不高兴就喝水  水哥yyds！"></a>1. 不高兴就喝水  水哥yyds！</h3><p><a href="https://space.bilibili.com/412704776"><strong>https://space.bilibili.com/412704776</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> B站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMS服务激活win10和office</title>
      <link href="/kms-fu-wu-ji-huo-win10-he-office.html"/>
      <url>/kms-fu-wu-ji-huo-win10-he-office.html</url>
      
        <content type="html"><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>服务器地址：<a href="http://kms.03k.org/">http://kms.03k.org</a>(<a href="https://03k.org/go/kmscheck.html">点击检查是否可用</a>)；<br>服务作用：在线激活windows和office<br>适用对象：VOL版本的windows和office<br>适用版本：截止到win10和office2016的所有版本<br>公开地址有：</p><blockquote><p><a href="https://moe.best/kms.html">kms.loli.best</a><br><a href="https://kms.cangshui.net/">kms.cangshui.net</a><br><a href="https://blog.kuretru.com/kms/">kms.kuretru.com</a></p></blockquote><h2 id="激活win10："><a href="#激活win10：" class="headerlink" title="激活win10："></a>激活win10：</h2><ol><li>一般来说，只要确保的下载的是VL批量版本并且没有手动安装过任何key，你只需要<strong>使用管理员权限运行cmd</strong>执行一句命令就足够：</li></ol><pre class=" language-bash"><code class="language-bash">slmgr /skms kms.03k.org</code></pre><p>这句命令的意思是，把kms服务器地址设置（set kms）<a href="https://link.zhihu.com/?target=http://%25E4%25B8%25BAkms.03k.org">为kms.03k.org</a>，设置成功如下：</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211208124943.png"></p><ol start="2"><li>然后一句命令手动激活：</li></ol><pre class=" language-bash"><code class="language-bash">slmgr /ato</code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211208125022.png"></p><h2 id="激活office"><a href="#激活office" class="headerlink" title="激活office"></a>激活office</h2><ol><li>首先你的office必须是vol版本，否则无法激活。</li></ol><p>找到你的office安装目录，比如C:\Program Files (x86)\Microsoft Office\Office16</p><blockquote><p>64位的就是C:\Program Files\Microsoft Office\Office16<br>office16是office2016，office15就是2013，office14就是2010.</p></blockquote><p>然后目录对的话，该目录下面应该有个OSPP.VBS。</p><ol start="2"><li>接下来我们就cd到这个目录下面，例如（请更改为自己的实际安装目录）：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token string">"C:\Program Files (x86)\Microsoft Office\Office16"</span></code></pre><p>如果你不知道你的office装在哪个目录，可以打开一个程序比如word，然后用打开任务管理员右键选择“打开文件所在的位置”。</p><ol start="3"><li>然后执行注册kms服务器地址：</li></ol><pre class=" language-bash"><code class="language-bash">cscript ospp.vbs /sethst:kms.03k.org</code></pre><blockquote><p>/sethst参数就是指定kms服务器地址。</p></blockquote><p>一般ospp.vbs可以拖进去cmd窗口，所以也可以这么弄：</p><pre class=" language-bash"><code class="language-bash">cscript <span class="token string">"C:\Program Files (x86)\Microsoft Office\Office16\OSPP.VBS"</span> /sethst:kms.03k.org</code></pre><p>一般来说，“一句命令已经完成了”，但一般office不会马上连接kms服务器进行激活，所以我们额外补充一条手动激活命令：</p><pre class=" language-bash"><code class="language-bash">cscript ospp.vbs /act</code></pre><p>如果提示看到successful的字样，那么就是激活成功了，重新打开office就好。</p>]]></content>
      
      
      <categories>
          
          <category> 软件与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10激活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Python</title>
      <link href="/chu-shi-python.html"/>
      <url>/chu-shi-python.html</url>
      
        <content type="html"><![CDATA[<h2 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h2><p>Python是由荷兰人吉多·范罗苏姆（Guido von Rossum，后面都称呼他为Guido）发明的一种编程语言。</p><h3 id="Python的历史"><a href="#Python的历史" class="headerlink" title="Python的历史"></a>Python的历史</h3><p>1989年圣诞节：Guido开始写Python语言的编译器。<br>1991年2月：第一个Python解释器诞生，它是用C语言实现的，可以调用C语言的库函数。<br>1994年1月：Python 1.0正式发布。<br>2000年10月：Python 2.0发布，Python的整个开发过程更加透明，生态圈开始慢慢形成。<br>2008年12月：Python 3.0发布，引入了诸多现代编程语言的新特性，但并不完全兼容之前的Python代码。</p><blockquote><p><strong>说明</strong>：大多数软件的版本号一般分为三段，形如A.B.C，其中A表示大版本号，当软件整体重写升级或出现不向后兼容的改变时，才会增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。</p></blockquote><h3 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h3><p>Python的优点很多，简单的可以总结为以下几点。</p><ol><li>简单明了，学习曲线低，比很多编程语言都容易上手。</li><li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li><li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li><li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li><li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li></ol><p>Python的缺点主要集中在以下几点。</p><ol><li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li><li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li><li>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。</li></ol><h3 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h3><p>目前Python在<strong>Web服务器应用开发</strong>、云基础设施开发、<strong>网络数据采集</strong>（爬虫）、<strong>数据分析</strong>、量化交易、<strong>机器学习</strong>、<strong>自动化测试</strong>、<strong>自动化运维</strong>等领域都有用武之地。</p><h3 id="安装Python环境"><a href="#安装Python环境" class="headerlink" title="安装Python环境"></a>安装Python环境</h3><p>想要开始你的Python编程之旅，首先得在计算机上安装Python环境，简单的说就是得安装运行Python程序的工具，通常也称之为Python解释器。我们强烈建议大家安装Python 3的环境，很明显它是目前更好的选择。</p><h4 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h4><p>可以在<a href="https://www.python.org/">Python官方网站</a>找到<a href="https://www.python.org/downloads/">下载链接</a>并下载Python 3的安装程序。对于Windows操作系统，可以下载“executable installer”。</p><p>&nbsp;<br>双击运行刚才下载的安装程序，会打开Python环境的安装向导。在执行安装向导的时候，记得勾选“Add Python 3.x to PATH”选项，这个选项会帮助我们将Python的解释器添加到PATH环境变量中（不理解没关系，照做就行）。安装完成后可以打开Windows的“命令行提示符”工具并输入下面的命令来检查Python解释器是否安装成功。</p><pre class=" language-bash"><code class="language-bash">python --version</code></pre><p>执行上面的命令如果看了Python解释器对应的版本号（如：Python 3.7.6），说明你的安装已经成功了。</p><h4 id="macOS环境"><a href="#macOS环境" class="headerlink" title="macOS环境"></a>macOS环境</h4><p>macOS自带了Python 2，可以通过<a href="https://www.python.org/">Python官方网站</a>提供的下载链接找到适合macOS的“macOS installer”来安装Python 3，安装过程基本不需要做任何勾选，直接点击“下一步”即可。安装完成后，可以通过在“终端”工具中输入<code>python3</code>命令来调用Python 3解释器，因为如果直接输入<code>python</code>，将会调用Python 2的解释器。</p><h3 id="Python开发工具"><a href="#Python开发工具" class="headerlink" title="Python开发工具"></a>Python开发工具</h3><h4 id="交互式环境"><a href="#交互式环境" class="headerlink" title="交互式环境"></a>交互式环境</h4><p>我们打开Windows的“命令行提示符”工具，输入命令<code>python</code>然后回车就可以进入到Python的交互式环境中。所谓交互式环境，就是我们输入一行代码回车，代码马上会被执行，如果代码有产出结果，那么结果会被显示在窗口中。例如：</p><pre class=" language-bash"><code class="language-bash">Python 3.7.6Type <span class="token string">"help"</span>, <span class="token string">"copyright"</span>, <span class="token string">"credits"</span> or <span class="token string">"license"</span> <span class="token keyword">for</span> <span class="token function">more</span> information.<span class="token operator">>></span><span class="token operator">></span> 2 * 36<span class="token operator">>></span><span class="token operator">></span> 2 + 35</code></pre><blockquote><p><strong>温馨提示</strong>：使用macOS系统的用户需要打开“终端”工具，输入<code>python3</code><br>进入交互式环境。</p></blockquote><p>如果希望退出交互式环境，可以在交互式环境中输入<code>quit()</code>，如下所示。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="文本编辑器-Visual-Studio-Code"><a href="#文本编辑器-Visual-Studio-Code" class="headerlink" title="文本编辑器 - Visual Studio Code"></a>文本编辑器 - Visual Studio Code</h4><p>Visual Studio Code（通常简称为VS Code）是一个由微软开发能够在Windows、 Linux和macOS等操作系统上运行的代码编辑神器。它支持语法高亮、自动补全、多点编辑、运行调试等一系列便捷功能，而且能够支持多种编程语言。</p><h4 id="集成开发环境-PyCharm"><a href="#集成开发环境-PyCharm" class="headerlink" title="集成开发环境 - PyCharm"></a>集成开发环境 - PyCharm</h4><p>如果用Python开发商业项目，我们推荐大家使用专业的工具PyCharm。PyCharm是捷克的JetBrains公司开发的用于Python开发的集成开发环境（IDE)，所谓集成开发环境是说这个工具中提供了代码编写、代码运行和调试、代码分析、代码版本控制等各种功能，因此特别适合商业项目的开发。在<a href="https://www.jetbrains.com/">JetBrains的官方网站</a>上提供了PyCharm的<a href="https://www.jetbrains.com/pycharm/download/#section=windows">下载链接</a>，其中社区版（Community）是免费的但功能相对弱小，专业版（Professional）功能非常强大，但需要按年或月付费使用，新用户可以试用30天时间。关于如何使用PyCharm来进行Python开发，在后续的课程中进行讲解。</p><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello, world"></a>hello, world</h3><p>按照行业惯例，我们学习任何一门编程语言写的第一个程序都是输出<code>hello, world</code>，因为这段代码是伟大的丹尼斯·里奇（C语言之父，和肯·汤普森一起开发了Unix操作系统）和布莱恩·柯尼汉（awk语言的发明者）在他们的不朽著作_The C Programming Language_中写的第一段代码。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello, world'</span><span class="token punctuation">)</span></code></pre><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p>我们将上面的代码命名为<code>hello.py</code>。如果你使用的是Windows操作系统，接下来可以在你保存代码的目录下先按住键盘上的<code>shift</code>键再点击鼠标右键，这时候鼠标右键菜单中会出现“命令行提示符”选项，点击该选项就可以打开“命令行提示符”工具，我们输入下面的命令。</p><pre class=" language-bash"><code class="language-bash">python hello.py</code></pre><blockquote><p><strong>提醒</strong>：我们也可以在任意位置打开“命令行提示符”或“终端”工具，然后将需要执行的Python代码通过拖拽的方式拖入到“命令行提示符”或“终端”中，这样相当于指定了文件的绝对路径来运行该文件中的Python代码。再次提醒，macOS系统要通过<code>python3</code>命令来运行该程序。</p></blockquote><p>你可以尝试将上面程序单引号中的<code>hello, world</code>换成其他内容；你也可以尝试着多写几个这样的语句，看看会运行出怎样的结果。需要提醒大家，上面代码中的<code>print(&#39;hello, world&#39;)</code>就是一条完整的语句，我们用Python写程序，最好<strong>每一行代码中只有一条语句</strong>。虽然使用<code>;</code>分隔符可以将多个语句写在一行代码中，但是最好不要这样做，因为代码会变得非常难看。</p><h3 id="注释你的代码"><a href="#注释你的代码" class="headerlink" title="注释你的代码"></a>注释你的代码</h3><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。简单的说，<strong>注释会让代码更容易看懂但不会影响程序的执行结果</strong>。</p><p>&nbsp;<br>Python中有两种形式的注释：</p><ol><li>单行注释：以#和空格开头，可以注释掉从<code>#</code>开始后面一整行的内容。</li><li>多行注释：三个引号开头，三个引号结尾，通常用于添加多行说明性内容。</li></ol><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""第一个Python程序 - hello, worldVersion: 0.1Author: chengbudong"""</span><span class="token comment" spellcheck="true"># print('hello, world')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你好，世界！"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
