<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo管理文章的基本操作</title>
      <link href="/2021/12/20/hexo-guan-li-wen-zhang-de-ji-ben-cao-zuo/"/>
      <url>/2021/12/20/hexo-guan-li-wen-zhang-de-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建md文件"><a href="#1-创建md文件" class="headerlink" title="1. 创建md文件"></a>1. 创建md文件</h1><p>Hexo 使用 Markdown 解析文章，md文件也就是Markdown文件，通过以下命令创建：</p><pre class=" language-git"><code class="language-git">hexo n &lt;title><span class="token comment" spellcheck="true"># 例如</span>hexo n <span class="token string">"Hexo管理文章的基本操作"</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220111012.png"></p><p>这里可以看到创建了一个Hexo管理文章的基本操作.md，保存在<code>\source\_posts</code>文件夹下。打开该文件，使用Markdown语法即可书写文章内容。</p><h1 id="2-三种布局"><a href="#2-三种布局" class="headerlink" title="2. 三种布局"></a>2. 三种布局</h1><p>创建md文件时，我们可以指定布局，Hexo布局有三种：post（文章）、draft（草稿）、page（页面）。</p><p>&nbsp;<br>在新建文件时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件（可以理解为模板）来建立md文件：</p><ul><li>如果没有指定布局类型，则为默认布局post，即<code>hexo n = hexo n post</code>。</li><li>当我们创建不同布局的md文件时，它们会存储在不同路径：</li></ul><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220130338.png"></p><blockquote><p>对于page，Hexo会创建一个以标题为名的文件夹，并在该文件夹下生成一个index.md文件，page布局顾名思义就是用来DIY我们博客页面的。</p></blockquote><p>&nbsp;<br><strong>draft</strong>：<br>draft这种布局在创建时会被保存到<code>\source\_drafts</code>文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到_drafts文件夹中。</p><ul><li>可在启动服务器时加上 –draft 参数来查看草稿。<code>hexo s --draft</code></li><li>可以在站点配置文件中把 render_drafts 参数设为 true 来预览草稿。</li><li>可以通过 publish 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。<code>hexo publish [layout] &lt;title&gt;</code></li></ul><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211220131544.png"></p><h1 id="3-Front-matter"><a href="#3-Front-matter" class="headerlink" title="3. Front-matter"></a>3. Front-matter</h1><p>当我们创建一个md文件后，打开后会看到一些内容，这些称为Front-matter，它是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre><code>---title: Hexo管理文章的基本操作 # 文章标题，也就是创建时指定的名字date: 2021-12-20 11:06:18 # 创建时间tags: # 标签---</code></pre><blockquote><p>在Typora中我们在md文件的首行（必须是第一行）输入<code>---</code> ，然后按回车就可以插入Front-matter了。<br>注意：参数的<code>:</code>后面有一个空格。</p></blockquote><ul><li><strong>Front-matter预定义参数</strong></li></ul><pre><code>---layout: 布局 # 默认为true, 如果你不想你的文章被处理, 可以设置为falsetitle: 标题  # 标题会显示在最上方居中位置catalog:  # 是否显示段落目录date: 创建日期 # 如果不指定则为默认值-文件创建日期, 可以自定义。tags: 标签 # 不适用于page布局categoreies: 分类 # 不适用于page布局update: 更新日期 # 如果不指定则为默认值-文件修改后重新生成静态文件的日期。comments: ture # 是否开启文章的评论功能, 默认值为truesubtitle:  # 子标题header-img:  # 顶部背景图片top:  # 是否置顶permalink:  # 覆盖文章网址keywords:  # 仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）---</code></pre><ul><li><strong>添加分类与标签</strong><br>只有文章（post布局）支持分类和标签，需要在Front-matter中设置。分类有层级关系，标签没有。例如：</li></ul><pre><code>categories:- 个人博客 #（第一层级）- Hexo博客 #（第二层级）tags:- Hexo- 博客</code></pre><p>添加多个分类：</p><pre><code>categories:- [日常, 生活]- [日常, 随想]</code></pre><h1 id="4-基本操作"><a href="#4-基本操作" class="headerlink" title="4. 基本操作"></a>4. 基本操作</h1><ul><li>清除缓存：<code>hexo clean</code></li><li>生成静态文件：<code>hexo generate</code>可简写为<code>hexo g</code></li><li>启动服务器：<code>hexo server</code>简写为<code>hexo s</code>，常用参数：<code>-p</code>重设端口</li><li>部署：<code>hexo deploy</code>简写为<code>hexo d</code>，用于将网站部署到服务器上。常用参数：-g，<code>hexo d -g</code>部署前预先生成静态文件。</li></ul><p>&nbsp;<br>一般发布文章或者修改博客后需要这些操作：清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p><pre class=" language-git"><code class="language-git">hexo clean &amp;&amp; hexo s -g # 清除缓存>生成静态文件>启动服务器hexo d # 部署</code></pre><blockquote><p>更多操作查看：<a href="https://hexo.bootcss.com/docs/">Hexo官方文档</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言：结构体</title>
      <link href="/2021/12/08/jie-gou-ti/"/>
      <url>/2021/12/08/jie-gou-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是结构体"><a href="#什么是结构体" class="headerlink" title="什么是结构体"></a>什么是结构体</h2><p>结构体是一种构造类型，允许用户自定义，用于保存一组不同类型的数据。例如，书籍信息，书的编号应为整型；书名应为字符型。显然这组数据不能用数组来存放, 为了解决这个问题，C语言中给出了一种构造数据类型——“结构(structure)”或叫“结构体”。</p><h2 id="定义结构体类型"><a href="#定义结构体类型" class="headerlink" title="定义结构体类型"></a>定义结构体类型</h2><p>通过定义结构体类型来告诉编译器，我们的结构体中需要存储哪些类型的数据。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> 结构体名 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    类型名<span class="token number">1</span> 成员名<span class="token number">1</span><span class="token punctuation">;</span>    类型名<span class="token number">2</span> 成员名<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    类型名n 成员名n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>示例：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span>  <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意不要丢掉末尾的分号</p></blockquote><h2 id="定义结构体变量"><a href="#定义结构体变量" class="headerlink" title="定义结构体变量"></a>定义结构体变量</h2><p>定义好结构体类型后，我们就可以利用定义的结构体类型来定义结构体变量。</p><p>&nbsp;<br>格式：<code>struct 结构体名 结构体变量名</code>; </p><ul><li>先定义结构体类型，再定义变量</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book1<span class="token punctuation">;</span></code></pre><ul><li>定义结构体类型的同时定义变量</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> book2<span class="token punctuation">;</span></code></pre><ul><li>匿名结构体定义结构体变量 (这种方法可以省略结构体类型名，但不能复用)</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> book3<span class="token punctuation">;</span></code></pre><h2 id="访问结构体成员"><a href="#访问结构体成员" class="headerlink" title="访问结构体成员"></a>访问结构体成员</h2><p>使用成员访问运算符<code>.</code>来访问结构体成员，形式为：<code>结构体变量名.成员名</code>。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Books book1<span class="token punctuation">;</span>boo1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"C语言"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="结构体变量的初始化"><a href="#结构体变量的初始化" class="headerlink" title="结构体变量的初始化"></a>结构体变量的初始化</h2><ul><li>定义的同时按顺序初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C语言"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ul><li>定义的同时不按顺序初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ul><li>先定义再逐个初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book3<span class="token punctuation">;</span>book3<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>book3<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Python"</span><span class="token punctuation">;</span></code></pre><ul><li>先定义再一次性初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book4<span class="token punctuation">;</span>book4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> Books<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="结构体类型作用域"><a href="#结构体类型作用域" class="headerlink" title="结构体类型作用域"></a>结构体类型作用域</h2><ul><li>结构体类型定义在函数内部的作用域与局部变量的作用域是相同的<ul><li>从定义的那一行开始，直到遇到return或者大括号结束为止</li></ul></li><li>结构体类型定义在函数外部的作用域与全局变量的作用域是相同的<ul><li>从定义的那一行开始，直到本文结束为止</li></ul></li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Books book1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C语言"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个同名的局部结构体，会屏蔽掉全局结构体</span>    <span class="token keyword">struct</span> Books <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>author<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Books book1<span class="token punctuation">;</span>    book1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// book1.title = "Python"; // 由于屏蔽掉了全局结构体，此处会报错</span>    book1<span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token string">"Brian"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//局部结构体作用域到这结束</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处使用的是全局的结构体</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p>结构体数组与数据值型数组不同之处在于每个数组元素都一个结构体类型的数据，它们分别包括各个成员项。</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211219134658.png"></p><p>&nbsp;<br>格式：<code>struct 结构体类型名称 数组名称[元素个数]</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>定义的同时做初始化</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books book<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化了前两个</span></code></pre><ul><li>先定义在初始化</li></ul><pre class=" language-c"><code class="language-c">book<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>book<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Python"</span><span class="token punctuation">;</span></code></pre><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p>指向结构体变量的指针。</p><p>&nbsp;<br>格式：<code>struct 结构体类型名 *结构体指针变量名;</code></p><p>通过结构体指针访问结构体成员的两种方式：</p><ul><li><code>(*结构体指针变量名).成员名</code></li><li><code>结构体指针变量名-&gt;成员名</code></li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Books <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Books book1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Books <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>book1<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>book_id<span class="token punctuation">,</span> p<span class="token operator">-></span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>(*结构体指针变量名)的 ( ) 不能省略，因为成员符<code>.</code>的优先级高于<code>*</code>。 </p></blockquote><h2 id="结构体内存分析"><a href="#结构体内存分析" class="headerlink" title="结构体内存分析"></a>结构体内存分析</h2><ul><li>给结构体变量开辟存储空间和给普通开辟存储空间一样, 会从内存地址大的位置开始开辟</li><li>给结构体成员开辟存储空间和给数组元素开辟存储空间一样, 会从所占用内存地址小的位置开始开辟</li><li>结构体变量占用的内存空间是其最大成员的大小的倍数(对齐问题)<blockquote><p>计算机系统对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的起始地址的值是某个数 k 的倍数，这就是所谓的内存对齐，而这个 k 则被称为该数据类型的对齐模数(alignment modulus)。<br>对齐的优点：</p><ul><li>简化了处理器与内存之间传输系统的设计</li><li>可以提升读取数据的速度。<br>比如：处理器每次读写内存的时候都从某个8倍数的地址开始，一次读出或写入8个字节的数据，假如软件能保证double类型的数据都从8倍数地址开始，那么读或写一个double类型数据就只需要一次内存操作。否则，我们就可能需要两次内存操作才能完成这个动作，因为数据或许恰好横跨在两个符合对齐要求的8字节内存块上。</li></ul></blockquote></li></ul><h3 id="对齐规则"><a href="#对齐规则" class="headerlink" title="对齐规则"></a>对齐规则</h3><ol><li><p>结构体变量的首地址能够被其最大基本类型成员的大小所整除。</p><blockquote><p><strong>备注</strong>：编译器在给结构体开辟空间时，首先找到结构体中最宽的基本数据类型，然后寻找内存地址能被该基本数据类型所整除的位置，作为结构体的首地址。将这个最宽的基本数据类型的大小作为上面介绍的对齐模数。</p></blockquote></li><li><p>结构体每个成员相对于结构体首地址的偏移量是当前成员大小的整数倍。</p><blockquote><p><strong>备注</strong>：为结构体的一个成员开辟空间之前，编译器首先检查预开辟空间的首地址相对于结构体首地址的偏移是否是该成员的整数倍，若是，则存放该成员，反之，则在该成员和上一个成员之间填充一定的字节，以达到整数倍的要求，也就是将预开辟空间的首地址后移几个字节。</p><ul><li>在GCC中，对齐模数最大只能是4，也就是说，即使结构体中有double类型，对齐模数还是4。</li><li>除了平台差异外，还有预编译指令<code>#pragma pack(n)</code>手动设置，n–只能填1 2 4 8 16</li></ul></blockquote></li><li><p>结构体的总大小为其最大基本类型成员大小的整数倍。</p><blockquote><p><strong>备注</strong>：结构体总大小是包括填充字节，最后一个成员满足上面两条以外，还必须满足第三条，否则就必须在最后填充几个字节以达到本条要求。</p></blockquote></li></ol><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 基本数据类型大小, win 64位。</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 4</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 4</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 8</span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Str1 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                            <span class="token keyword">char</span> a<span class="token punctuation">;</span>        <span class="token keyword">char</span> b<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>str1<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str1<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">2</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/20211207161618.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Str2 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span>     <span class="token keyword">char</span> b<span class="token punctuation">;</span>     <span class="token keyword">int</span>  c<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>str2<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str2<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">8</span></code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size2.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Str3 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span>  c<span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>str3<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str3<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">12</span>    </code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size3.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Str4 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span>  c<span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>str4<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str4<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">16</span>    </code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size4.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> str5 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span>    <span class="token keyword">short</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token punctuation">;</span>    <span class="token keyword">char</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>str5<span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str4<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">24</span> </code></pre><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size5.png"></p><h2 id="结构体嵌套定义"><a href="#结构体嵌套定义" class="headerlink" title="结构体嵌套定义"></a>结构体嵌套定义</h2><p>成员也可以又是一个结构，即构成了嵌套的结构 。</p><p>例如：在Books中嵌套Date结构</p><p><img src="https://gitee.com/chengbudong/noteimg/raw/master/image/struct_struct.png"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Date <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Books <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Date publication_time<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>连续使用成员运算符<code>.</code>来访问嵌套结构体的成员</p><pre class=" language-c"><code class="language-c">book1<span class="token punctuation">.</span>publication_time<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2021</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span>publication_time<span class="token punctuation">.</span>month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span>publication_time<span class="token punctuation">.</span>day <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></code></pre><h2 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h2><ul><li>结构体虽然是构造类型，但是结构体之间的赋值是值拷贝，而不是地址传递。</li><li>结构体变量作为函数参数形参时也是值传递，在函数内修改形参，不会影响外界实参。</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> Books <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Books book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Books book1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Books book2<span class="token punctuation">;</span>    book2 <span class="token operator">=</span> book1<span class="token punctuation">;</span>    book2<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"C++"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 C</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book2<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book2<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 C++</span>    <span class="token function">f</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 Python</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 C</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Books book<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Python"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>book_id<span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
