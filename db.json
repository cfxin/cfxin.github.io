{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/font/SourceHanSerif.ttc","path":"font/SourceHanSerif.ttc","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","path":"medias/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/katongrenwu.gif","path":"medias/katongrenwu.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo4.png","path":"medias/logo4.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo2.png","path":"medias/logo2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/qianynaghao.gif","path":"medias/qianynaghao.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/suolong1.gif","path":"medias/suolong1.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/wallhaven.png","path":"medias/wallhaven.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/namei.gif","path":"medias/namei.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/suolong2.gif","path":"medias/suolong2.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.png","path":"medias/featureimages/10.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.png","path":"medias/featureimages/11.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.png","path":"medias/featureimages/12.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.png","path":"medias/featureimages/13.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.png","path":"medias/featureimages/14.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.png","path":"medias/featureimages/15.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.png","path":"medias/featureimages/16.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.png","path":"medias/featureimages/17.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.png","path":"medias/featureimages/18.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.png","path":"medias/featureimages/19.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.png","path":"medias/featureimages/20.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.png","path":"medias/featureimages/21.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.png","path":"medias/featureimages/22.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.png","path":"medias/featureimages/23.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/24.png","path":"medias/featureimages/24.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/25.png","path":"medias/featureimages/25.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/26.png","path":"medias/featureimages/26.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/27.png","path":"medias/featureimages/27.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/28.png","path":"medias/featureimages/28.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/29.png","path":"medias/featureimages/29.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/30.png","path":"medias/featureimages/30.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/31.png","path":"medias/featureimages/31.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/33.png","path":"medias/featureimages/33.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/34.png","path":"medias/featureimages/34.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/32.png","path":"medias/featureimages/32.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/35.png","path":"medias/featureimages/35.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/36.png","path":"medias/featureimages/36.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/37.png","path":"medias/featureimages/37.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/38.png","path":"medias/featureimages/38.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/39.png","path":"medias/featureimages/39.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/40.png","path":"medias/featureimages/40.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/41.png","path":"medias/featureimages/41.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/42.png","path":"medias/featureimages/42.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/43.png","path":"medias/featureimages/43.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/44.png","path":"medias/featureimages/44.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/45.png","path":"medias/featureimages/45.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/46.png","path":"medias/featureimages/46.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/47.png","path":"medias/featureimages/47.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/48.png","path":"medias/featureimages/48.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/49.png","path":"medias/featureimages/49.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/50.png","path":"medias/featureimages/50.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/51.png","path":"medias/featureimages/51.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/52.png","path":"medias/featureimages/52.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/53.png","path":"medias/featureimages/53.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/55.png","path":"medias/featureimages/55.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/56.png","path":"medias/featureimages/56.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/57.png","path":"medias/featureimages/57.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/54.png","path":"medias/featureimages/54.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/58.png","path":"medias/featureimages/58.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/59.png","path":"medias/featureimages/59.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/61.png","path":"medias/featureimages/61.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/60.png","path":"medias/featureimages/60.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/62.png","path":"medias/featureimages/62.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/63.png","path":"medias/featureimages/63.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/64.png","path":"medias/featureimages/64.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/66.png","path":"medias/featureimages/66.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/65.png","path":"medias/featureimages/65.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/67.png","path":"medias/featureimages/67.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/68.png","path":"medias/featureimages/68.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/69.png","path":"medias/featureimages/69.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.png","path":"medias/featureimages/7.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/70.png","path":"medias/featureimages/70.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/71.png","path":"medias/featureimages/71.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/73.png","path":"medias/featureimages/73.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/72.png","path":"medias/featureimages/72.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/74.png","path":"medias/featureimages/74.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/75.png","path":"medias/featureimages/75.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/78.png","path":"medias/featureimages/78.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/77.png","path":"medias/featureimages/77.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/76.png","path":"medias/featureimages/76.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/79.png","path":"medias/featureimages/79.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.png","path":"medias/featureimages/8.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/80.png","path":"medias/featureimages/80.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/81.png","path":"medias/featureimages/81.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/82.png","path":"medias/featureimages/82.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/83.png","path":"medias/featureimages/83.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/84.png","path":"medias/featureimages/84.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/85.png","path":"medias/featureimages/85.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/86.png","path":"medias/featureimages/86.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/87.png","path":"medias/featureimages/87.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/88.png","path":"medias/featureimages/88.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/89.png","path":"medias/featureimages/89.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.png","path":"medias/featureimages/9.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg1.jpg","path":"medias/coverImg/coverImg1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/90.png","path":"medias/featureimages/90.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg3.jpg","path":"medias/coverImg/coverImg3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg2.jpg","path":"medias/coverImg/coverImg2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg4.jpg","path":"medias/coverImg/coverImg4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg6.jpg","path":"medias/coverImg/coverImg6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg5.jpg","path":"medias/coverImg/coverImg5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"161cb2516d2bb866d18a8e4a268f3f4c692cd55d","modified":1640854643604},{"_id":"source/_data/friends.json","hash":"197357e39000ec180f2b2ade455514d19917bed3","modified":1640854643605},{"_id":"source/_posts/B站计算机类学习资源整理.md","hash":"1c098052e1920dd27165e0df7ea414c242e98739","modified":1640854643605},{"_id":"source/_posts/Hexo管理文章的基本操作.md","hash":"2d9f4e352c65d71a1b195474158f20a9e447dc91","modified":1640854643605},{"_id":"source/_posts/LaTeX的使用.md","hash":"c06b64060d53873a8e86786cbbbeed470026e183","modified":1640854643607},{"_id":"source/_posts/KMS服务激活win10和office.md","hash":"bb21e64200d044a3beb01d417b2c15bfe61f99d4","modified":1640854643606},{"_id":"source/_posts/Mysql 8.0以上重置初始密码的方法（Win10）.md","hash":"2a336b2c26030a7717e5c3f477c221c97934211b","modified":1640854643607},{"_id":"source/_posts/Typora自动上传图片.md","hash":"1e660c48b584eddff6bf63ab804fc957086c3e09","modified":1640854643608},{"_id":"source/_posts/PicGo配置图床.md","hash":"0de7318477eb94cf5f9fbd4f7c1985b18d4d9245","modified":1640854643607},{"_id":"source/_posts/git连接GitHub报错port 22 Connection timed out.md","hash":"2df89056de2ebc02f2e3dcb65d4406fd8467b8a5","modified":1640854643608},{"_id":"source/_posts/markdown语法.md","hash":"587c1c4f711c327aab9d06b3e68ac33b6bdb0d65","modified":1640854643608},{"_id":"source/_posts/test.md","hash":"017f387247fe4e0f2b5a9c2a960f20b8be89eb3a","modified":1640854643608},{"_id":"source/_posts/vscode搭建一站式博客写作环境.md","hash":"2d918663f72179318a6a95dfe879aa26ff6c595f","modified":1640854643609},{"_id":"source/_posts/wsl2(Ubuntu) + Miniconda3 + PyCharm配置.md","hash":"a09dca2b9d00f34305c0e6bcafc4e3ba92aa63ee","modified":1640854643609},{"_id":"source/_posts/Python语言元素.md","hash":"0567ba84a4bee6a3d6e7ebb2cf9e0a9081f09bc9","modified":1640854643607},{"_id":"source/_posts/共用体.md","hash":"9aa762dda1a3b4327c611b4d18107a99125c2f62","modified":1640854643609},{"_id":"source/_posts/分支结构.md","hash":"cc876704d8bde82bddb840e906369eb170c90c92","modified":1640854643609},{"_id":"source/_posts/初识Python.md","hash":"901810a7ed3507c5d3a34d08cc4bdb731340cb0f","modified":1640854643609},{"_id":"source/_posts/结构体.md","hash":"9fa610c3560e350380bb76f130285e777bb143b7","modified":1640854643610},{"_id":"source/_posts/论文写作-网站和工具分享.md","hash":"7e3b91c9943fdd089007762a0befca66b0512393","modified":1640854643610},{"_id":"source/categories/index.md","hash":"4cf9f95958e7459554608bf70420418888afdaf7","modified":1640854643611},{"_id":"source/about/index.md","hash":"eea84293ef330b02867d4a91747b2ee8180ab7ec","modified":1640854643610},{"_id":"source/friends/index.md","hash":"96517ad1131c1526fdb68d1906955640c2d6b08d","modified":1640854643611},{"_id":"source/navigate/index.md","hash":"7dcd007def5d5ad8764e7c5f8151e0c19fbfe74e","modified":1640870031034},{"_id":"source/tags/index.md","hash":"ecdd72b8063c8cd3eef7ef33146b8421aed71a18","modified":1640854643611},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1640854643611},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1640854643612},{"_id":"themes/hexo-theme-matery/README.md","hash":"ddaf6310154e314385d63041da61c418055314f6","modified":1640854643612},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1640854643612},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"de62c2eba5a36fdedbef14fa35325ac298254dc7","modified":1641024262612},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a2267aed16d52f4adeb13f555d36d076855387af","modified":1640854643613},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1640854643614},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"e14edcb86129d14625ca3623ac96ae3e457ae829","modified":1640854643614},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"d494bd8d38e82bbb960c54a7f92bc23081a36bc4","modified":1640854643615},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1640854643614},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1640854643732},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1640854643732},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1640854643732},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1640854643734},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1640854643734},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"a777733e03d954ac265a3d0523245bd191732130","modified":1640854643734},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1640854643735},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1640854643735},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1640854643735},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1640854643735},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1640854643736},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"5a9f5c13e1e9e6375c58f50e58b2e64ec9cc9f6e","modified":1640876267494},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1640854643736},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1640854643615},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"acd18121108659b3dd7a94c10943e5f6a4938239","modified":1640854643615},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1640854643615},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1640854643736},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1640854643716},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1640854643717},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1640854643716},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1640854643717},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1640854643717},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"23304ede5dd70e1e5074c5d1b008ec9d3974ba7f","modified":1640854643717},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1640854643717},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"b3ff20cdc8f6e1987ab1c1b82994550cbeb3ac66","modified":1641023723688},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1640854643718},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1640854643718},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1640854643718},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1640854643719},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"bf96ff47df2d81bf2edb2a8c6737e36b8b08aca3","modified":1640854643719},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1640854643719},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1640854643720},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1640854643719},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1640854643720},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1640854643720},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1640854643720},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"592ab53c7dd040808ea9f3d201e7661da7e6a7cc","modified":1641023902293},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1640854643721},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"83d187c684c4c785fc2fa2ea5eea4f89c67f3c21","modified":1640854643723},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1640854643723},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1640854643724},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1640854643723},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1640854643724},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1640854643724},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"674e3005600c3608998001f9f6e9c52832258ce7","modified":1640854643725},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1640854643725},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1640854643725},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1640854643726},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1640854643726},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1640854643726},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1640854643726},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1640854643729},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1640854643729},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1640854643727},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1640854643729},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1640854643730},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1640854643730},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1640854643730},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1640854643731},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1640854643731},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1640854643731},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1640854643737},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1640854643737},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1640854643737},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"9145d60753fd59278a63fe865047e50aafe66c23","modified":1640854643738},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1640854643739},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1640854643737},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"443af406ae55a44139f4b85f9083b76b4540f108","modified":1640872497388},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1640854643741},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1640854643741},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1640854643746},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","hash":"f7367c83303ecb4807383559355a81ebcfc4302f","modified":1640854643900},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"28630a9cd0e0898d3d0f5a5bd16fe9e24663ecb9","modified":1641023033992},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1640854643909},{"_id":"themes/hexo-theme-matery/layout/navigate.ejs","hash":"d830b1fc4f1f6a4b883554ed3cce589f0337f435","modified":1640870473215},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"93434bac6bc3509c766bb6b7a74d6b3ff65832ef","modified":1640875209804},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1640854644108},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1640854643748},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1640854643747},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1640854643748},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1640854643748},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1640854643749},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1640854643764},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1640854643765},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1640854643814},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1640854643823},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1640854643814},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1640854643823},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1640854643823},{"_id":"themes/hexo-theme-matery/source/medias/logo2.png","hash":"4107f346d2c57eb0626300446c800f706da6e824","modified":1640854644110},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1640854643832},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1640854643831},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1640854643747},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1640854643832},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1640854643838},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1640854643838},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1640854643841},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1640854643842},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1640854643842},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1640854643843},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1640854643844},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1640854643844},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1640854643858},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1640854643870},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1640854643874},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1640854643874},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1640854643874},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1640854643874},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1640854643890},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1640854643890},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1640854643891},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1640854643891},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1640854643891},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1640854643892},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1640854643892},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1640854643893},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1640854643896},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1640854643896},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1640854643898},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1640854643909},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1640854643909},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1640854643909},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1640854643909},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.png","hash":"6f96f6bf3b1086a24f19f9457d06906feaab481a","modified":1640854643996},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/33.png","hash":"2e62aedf1f82b92ec53f969e15cda086b43aaba3","modified":1640854644002},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/36.png","hash":"3c5c32857df1a986aa16548ee6c177004cec2b11","modified":1640854644003},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/85.png","hash":"1f47c82254c6c110c426aa5ee2b643fd4f709d90","modified":1640854644104},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"a57ee68d11601b0fd8e5037fc241ff65a754473c","modified":1640854643750},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1640854643756},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1640854643757},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1640854643758},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1640854643758},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1640854643845},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1640854643845},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1640854643845},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1640854643846},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1640854643846},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1640854643846},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1640854643857},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1640854643846},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1640854643857},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1640854643893},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1640854643893},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1640854643894},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1640854643894},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1640854643894},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1640854643895},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1640854643895},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"5419b113aaeaaa7ce00fa8d0c6a416400738a7fc","modified":1640854643740},{"_id":"themes/hexo-theme-matery/source/medias/logo4.png","hash":"11794f41b6b6b2a4d8577d8296852b33027f1bdf","modified":1640854644111},{"_id":"themes/hexo-theme-matery/source/medias/katongrenwu.gif","hash":"2431a90d12c7217a71b81b584fbe0cbaa401984a","modified":1640854644108},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1640854643838},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1640854643842},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1640854643843},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1640854643899},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.png","hash":"3d387c10180c8889b4425f79f027fb2c74e34878","modified":1640854643987},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.png","hash":"a68e4e573684f949e5afc6c7355069c82c7d07fd","modified":1640854643987},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.png","hash":"ccd7a0a4c7c98ceff035b21713fa6e60fe985127","modified":1640854643988},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.png","hash":"fc2b790e632319fc8b7a549ed71faed9b024fd75","modified":1640854643988},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.png","hash":"93a7a08f449e1d5c9eb3ac668d764702b32fbc38","modified":1640854643992},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.png","hash":"0424cedc5e40488af5a8553a4b4596e2b226dcab","modified":1640854643993},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.png","hash":"c0ddf76fa1cff87156acf7fac428e7e3b7af2fd3","modified":1640854643993},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.png","hash":"db6b9ced2c03e10376fa3f6c8c679488a06dcf57","modified":1640854643994},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.png","hash":"b1ffa1b7d3fe2cf5139a45e65227017cbfdf2ce6","modified":1640854643995},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.png","hash":"43e90ac37b3eaae2dcc1b523ba73543c52412539","modified":1640854643995},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/25.png","hash":"c63730d1b14a097a94eb1ca140a983838d7454a0","modified":1640854643997},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/24.png","hash":"37c4528aab8bcad2f3e90bb4f2e333bd9ba48e39","modified":1640854643996},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/27.png","hash":"5c61df357031dec9c58698b520ec81ef44150cdc","modified":1640854643998},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/26.png","hash":"3b986cd3c83dc62f32374d2357ac807599fd19ca","modified":1640854643997},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/28.png","hash":"f30a3fb11fd93f989226d90f7fbc865edd80a1da","modified":1640854643999},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/29.png","hash":"2d22eb0fcb29ba4799838ce9afa3b44a8bc09522","modified":1640854643999},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/34.png","hash":"068059dbb211a86f35eafdfc9c7e4601222a938e","modified":1640854644003},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/35.png","hash":"5c8b5fbcb576d2867ea6279a45097d3a9eaaddc5","modified":1640854644003},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/38.png","hash":"690660cf9ea2a96a9c577595adf9ee0061eb9ce0","modified":1640854644005},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/39.png","hash":"7fd0e55ddfe8accf4228d1ed5a0f85f6d2b9b530","modified":1640854644005},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/41.png","hash":"57cb3b1942034a4434164dd0e95706c85804e0a4","modified":1640854644007},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/42.png","hash":"e400d3068343a4250914129a578f66bfaecc2069","modified":1640854644007},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/43.png","hash":"b5c52527987ad0daf5c5408f7c9edc9fec710b72","modified":1640854644008},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/44.png","hash":"42fd9d206709157f56e6e9ea49c57680ac5c4efc","modified":1640854644008},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/46.png","hash":"922edeb7322f92aa3dfdf50146d102cdfd7cdbfa","modified":1640854644009},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/47.png","hash":"ff33e2c03da68064cf13fd28b6ffb874175015fe","modified":1640854644020},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/48.png","hash":"d2bdacd9e908bae56bba5b63fad52069f0f1bde5","modified":1640854644022},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/49.png","hash":"a6ced423193bd5f7656f2de626690a7b6d94920e","modified":1640854644022},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/50.png","hash":"9d9cfb05951787187cb624abefd43694c54977e9","modified":1640854644024},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/53.png","hash":"0e0c47b0344f7b692d4ba960d9573f7f42d4ca5a","modified":1640854644025},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/55.png","hash":"2a14c5b267e9e9369aceb4e0df590ddf4e4ed6d8","modified":1640854644026},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/54.png","hash":"e63f712c1cebd0ce0d03ce9be921e2f3cd7cc718","modified":1640854644025},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/56.png","hash":"780e41ec97a2ee786d42ec7ab6a5edc150486005","modified":1640854644026},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/57.png","hash":"b6d72f75720bd46f2dda7b41a08e1b4769debda2","modified":1640854644026},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/58.png","hash":"15e6cdbb31483706bcde5aaedecec156d4d29692","modified":1640854644027},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/59.png","hash":"0172475998b9543bb7b280ad172eea5f1ab5a988","modified":1640854644027},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/60.png","hash":"ddc16d22f1e0844b073e8daaa648abd1f983e556","modified":1640854644029},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/61.png","hash":"2b5dc39e68acabef8319f79ff4951e7e1b783311","modified":1640854644029},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/62.png","hash":"6ce5a70e13b6d1fa98bba106b3f58a34f7358599","modified":1640854644030},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/63.png","hash":"ce1816ee036df5ad287621dc178d0706350d2e26","modified":1640854644030},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/64.png","hash":"50b2e3a4a28fc0b3ce9f8c703143d77d665a4e1d","modified":1640854644031},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/65.png","hash":"1ebfaff3361111518ea90e1ebaace7bbe26f41e3","modified":1640854644031},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/66.png","hash":"7982e1d51e6556a066623d510019f0c045adbdbc","modified":1640854644063},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/67.png","hash":"5e18b83d599d2672a5dace09893c23a4c9199c97","modified":1640854644064},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/69.png","hash":"3a607c657c98d2d152943b13033d1f28bf8b2f6e","modified":1640854644065},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/68.png","hash":"961d5344092839990b7172d6b5ef37311513098e","modified":1640854644064},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.png","hash":"e592a02ca1ce6150957dce226048033f241fa027","modified":1640854644065},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/70.png","hash":"00c7c8060c3e01060691b7ae5319dbbdd3c2ba9b","modified":1640854644066},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/71.png","hash":"ce272b33ced9ca2c65fbccc424293ef8d2ae8f1e","modified":1640854644066},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/73.png","hash":"0bf448ea730b49d530d60ee2758024d132719c24","modified":1640854644067},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/72.png","hash":"cde1b4fb483608f3d5e54c456ca805c2aa44c0e0","modified":1640854644066},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/74.png","hash":"f0e3aac64bb49c35fdf8e8ba469b3a03fca295a3","modified":1640854644067},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/75.png","hash":"4db14880424400799912e96d66bc135615d43267","modified":1640854644068},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/79.png","hash":"75f2c77f29f9d365c58acdb20df1d635c11bbafb","modified":1640854644069},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/77.png","hash":"a847cd2568b6a60ab79c856838ec6d491e6be1dd","modified":1640854644068},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/78.png","hash":"ccdc8bd183da20e1190899df9d017f66cadd143c","modified":1640854644069},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/81.png","hash":"1812a98a7e6149fb09c1542830ec75b117bb2c0c","modified":1640854644070},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/82.png","hash":"af0eb03438e37c37a2acf15d26851ff5b07fe8ea","modified":1640854644071},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/83.png","hash":"0c673be82b80cf469ea9899ce02e10cb57fcd723","modified":1640854644071},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/84.png","hash":"e182fdf3b734f525e5aa51be4c20e39a2246bc74","modified":1640854644072},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/86.png","hash":"875b6dba4fc53c875e32bc772afe8d5b3b67fbc3","modified":1640854644105},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/88.png","hash":"2df0cb6fe2eaec338209aa6590a3dababfec0540","modified":1640854644106},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/89.png","hash":"8d4476731632f6734fa77779b14c779eaee2dcf2","modified":1640854644106},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.png","hash":"919114b5ad9a8c8d255fb156ee80c13f3c369236","modified":1640854644107},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1640854643756},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"8a4a55db46c5dbfef9c6703fa2d04e89cbfcf633","modified":1640854643749},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1640854643756},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1640854643764},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1640854643764},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"7781550f4542e4b38defbf7820b54a7c92f2d072","modified":1640854644119},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1640854643833},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1640854643859},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1640854643859},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1640854643899},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/90.png","hash":"ffe5689c8f5679f3f733f8a228b979725a0fef3c","modified":1640854644107},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.png","hash":"9dd87818a396c7e6987a0c3385dd7ec33b674f9e","modified":1640854643992},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.png","hash":"1e8e17e243f8e130e7f85fc13b1dbe12f655485c","modified":1640854643993},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.png","hash":"8a28da79c7156ec017c0fef6092311608a4b8fa9","modified":1640854643995},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/30.png","hash":"210cc4e5e39a48bf85637266e999608721e95ac5","modified":1640854644001},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/31.png","hash":"4262134e5ad2f413b64351cb7bff8c61f088d86c","modified":1640854644002},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/32.png","hash":"5c2c22234cc69e6e9d9e2905f4074a18b26de2e4","modified":1640854644002},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/37.png","hash":"be762ddeb00ea4ca1bde52cf459aa110109d97f2","modified":1640854644004},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/40.png","hash":"5d05e7c2a5dc193c6f29e6adb1fd735104982fa0","modified":1640854644006},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/51.png","hash":"28144d3eb72efe1ed222c46990ca68cca16093df","modified":1640854644024},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/52.png","hash":"a8fbac5c9aced17973a7db0a5c241bcf637f802e","modified":1640854644025},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/76.png","hash":"236af6ddc6793d03521b5ea5ea69e2e742c55bc7","modified":1640854644068},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.png","hash":"c2039ff9e81bf5b62b956a2799f7cb2a4e2b3b6f","modified":1640854644070},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/80.png","hash":"ca73e13d90fa51274dfd32091b6f1af38313c437","modified":1640854644070},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/87.png","hash":"98ed95d4b2ac70ce23cfed21875b3c08b93d2319","modified":1640854644105},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg2.jpg","hash":"02c89d70217bbf03eed5e30447191532110e5ed2","modified":1640854643911},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1640854643751},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1640854643755},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"326e1d8f0b23f6df95cd6784fdf330bc6414ecd0","modified":1640854643757},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1640854643741},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"a92697d0482ac47c448271a6f55e690353f3a600","modified":1640854644110},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"a4de02ea56e0dd4713333a733e4f7abded81923b","modified":1640854643908},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"bf61efcb5e9c73843b0739e23493b8842126f3fc","modified":1640854643994},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg1.jpg","hash":"1a1fdcaf323d5468cf724207aa736b8fa3b5e664","modified":1640854643910},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg3.jpg","hash":"6923ad30f26a4172fef4b69e1db958a2fcbe0e5b","modified":1640854643912},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg6.jpg","hash":"5eddad7c42b8ebd89b27094154262347f2ce9695","modified":1640854643981},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1640854643759},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1640854643763},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"6559a4a429ce230b84e1e8270e0c5dca44862111","modified":1640854643903},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"06c094ebf6a82d70d8ad2d2e42b9e24e0017e119","modified":1640854644118},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg5.jpg","hash":"64fc66a1ed9b2d84a9bb64f1462f0e9d00ce22af","modified":1640854643980},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"526aa9d60a9d3c50684739f29f1bc28ce1b22584","modified":1640854643902},{"_id":"themes/hexo-theme-matery/source/medias/namei.gif","hash":"a9cda0861a6c1c31ef2953aeac90d17ff5da44dd","modified":1640854644112},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"fefa500c13c9c7a8b7faf3e421d1f9f480d42d77","modified":1640854643906},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"fba4c52f9fcb29cd09aed74d0bbf40350124ce2f","modified":1640854644006},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"1c2510406939462cee2dc7722e3ffecaeec657ef","modified":1640854644029},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1640854643898},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"30fabd0bba02d46562cad284c6e043ec12ff339d","modified":1640854643904},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/45.png","hash":"5f13b926ff33ab27e62425293f53845f5149b5c8","modified":1640854644009},{"_id":"themes/hexo-theme-matery/source/medias/suolong1.gif","hash":"0f19113cc665576d61eada7aaad3a7f0185f7507","modified":1640854644121},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"e82957a0361ace019d01b92ebe04e0447b773ae4","modified":1640854643905},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"c4aa9e6c6f6ee01ac9067bf464f5ec10ba8b1daa","modified":1640854644001},{"_id":"themes/hexo-theme-matery/source/medias/wallhaven.png","hash":"ac1230ce00b39f78f4635d18e46f0267add2e7cf","modified":1640854644128},{"_id":"themes/hexo-theme-matery/source/medias/coverImg/coverImg4.jpg","hash":"b9e979a03776b1be4f460e166fb2123ebd0dd28e","modified":1640854643979},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1640854643837},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"907bfbbe295332750575900984a00136de0f0e90","modified":1640854643753},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1640854643841},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"d77f10f90255c000ec7883165f863b6bff374763","modified":1640854644024},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"f8f025b5a593cd9aa4680890bf39c272e2417937","modified":1640854643907},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"d92687d30fa0d43f9ae71009398507bf813a6875","modified":1640854643762},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1640854643873},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"f5308330e1b9854bc18d14cf5550dd0405e4582f","modified":1640854643987},{"_id":"themes/hexo-theme-matery/source/medias/suolong2.gif","hash":"9df29a728628272797a49254cdc67239c13a3b17","modified":1640854644126},{"_id":"themes/hexo-theme-matery/source/medias/qianynaghao.gif","hash":"2e8a4157a2884328cfae677f44a3a4ae7767ed55","modified":1640854644117},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1640854643869},{"_id":"themes/hexo-theme-matery/source/font/SourceHanSerif.ttc","hash":"0b6b80da8bd7e4e84d04fbec3312a1c19a827050","modified":1639729873129},{"_id":"themes/hexo-theme-matery/source/_config.yml","hash":"cba410996af3d869efd5871dec5b41f5dffa1a46","modified":1641024038586}],"Category":[{"name":"资源分享","_id":"ckxviwv3n00048ou1bn8h4g2v"},{"name":"博客建设","_id":"ckxviwv3s000c8ou1atzle6rw"},{"name":"软件与工具","_id":"ckxviwv3v000j8ou1btsgckvk"},{"name":"编程语言","_id":"ckxviwv47001e8ou1gwfbfjm3"}],"Data":[{"_id":"friends","data":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}],"Page":[{"title":"404","date":"2021-12-21T06:38:10.000Z","type":"404","layout":"404","description":"Oops～，迷路了！你来到了没有知识的荒原 :(","_content":"\n","source":"404.md","raw":"---\ntitle: 404\ndate: 2021-12-21 14:38:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，迷路了！你来到了没有知识的荒原 :(\"\n---\n\n","updated":"2021-12-30T08:57:23.604Z","path":"404.html","comments":1,"_id":"ckxviwv3f00008ou184a69q94","content":"","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2021-12-20T07:32:02.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-12-20 15:32:02\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-12-30T08:57:23.611Z","path":"categories/index.html","comments":1,"_id":"ckxviwv3l00028ou18q0g447s","content":"","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2021-12-20T07:43:18.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2021-12-20 15:43:18\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2021-12-30T08:57:23.611Z","path":"friends/index.html","comments":1,"_id":"ckxviwv3p00068ou1fq7s1ph5","content":"","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2021-12-20T07:40:00.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-12-20 15:40:00\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2021-12-30T08:57:23.610Z","path":"about/index.html","comments":1,"_id":"ckxviwv3q00088ou1f5tk51cm","content":"","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"navigate","date":"2021-12-30T12:52:28.000Z","type":"navigate","layout":"navigate","_content":"","source":"navigate/index.md","raw":"---\ntitle: navigate\ndate: 2021-12-30 20:52:28\ntype: \"navigate\"\nlayout: \"navigate\"\n---\n","updated":"2021-12-30T13:13:51.034Z","path":"navigate/index.html","comments":1,"_id":"ckxviwv3r000a8ou1cu0oa0yh","content":"","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2021-12-20T07:37:36.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-12-20 15:37:36\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-12-30T08:57:23.611Z","path":"tags/index.html","comments":1,"_id":"ckxviwv3t000f8ou17w8j2cob","content":"","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"B站计算机类学习资源整理","date":"2021-12-08T05:02:18.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"\n## 一、计算机网络\n\n---\n\n### 1.  计算机网络微课堂   \n[**https://www.bilibili.com/video/BV1c4411d7jb?p=1**](https://www.bilibili.com/video/BV1c4411d7jb?p=1)\n\n讲师：湖科大教书匠\n评价：通俗易懂，重点知识十分细致，配合实验，而且有考研408 的难题的讲解，也是非常适合考研党，除了课程内容外还有很多习题讲解视频。因此就业党和考研党都可以食用。\n\n### 2.  王道计算机考研 计算机网络    \n[**https://www.bilibili.com/video/BV19E411D78Q?p=1**](https://www.bilibili.com/video/BV19E411D78Q?p=1)\n\nUP：王道论坛\n评价：小姐姐声音非常好听，百听不厌，内容与考研高度贴合，非常适合考研党和声音控。\n\n## 二、数据结构与算法\n\n---\n\n### 1.【郝斌】-数据结构入门   \n[**https://www.bilibili.com/video/BV11s41167h6?p=1**](https://www.bilibili.com/video/BV11s41167h6?p=1)\n老师：郝斌\n评价：思路是以初学者的思路来思考的，非常适合小白\n\n### 2.【C语言描述】《数据结构和算法》（小甲鱼）   \n[**https://www.bilibili.com/video/BV1jW411K7yg?p=1**](https://www.bilibili.com/video/BV1jW411K7yg?p=1)\n我UP：鱼C-小甲鱼\n评价：良心 up ，授课风格相比大学教授，语言风趣幽默，不死板，用例子带知识点，容易听得进去，亲和力拉满\n\n### 3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）   \n[**https://www.bilibili.com/video/BV1E4411H73v?p=1**](https://www.bilibili.com/video/BV1E4411H73v?p=1)\nUP：尚硅谷\n讲师：韩顺平\n评价：用JAVA语言讲数据结构和算法，韩老师视频内容全，并且每次课都会带着你写代码，把每一个例子都会实现，韩老师口碑也不必多言了。\n\n## 三、操作系统\n\n---\n\n### 1.  [完结] 2020 南京大学  操作系统：设计与实现 (蒋炎岩) \n[**https://www.bilibili.com/video/BV1N741177F5?p=1**](https://www.bilibili.com/video/BV1N741177F5?p=1)\n评价：南大的课质量真的硬，老师讲课时用的课本是 Remzi 的 Operating Systems: Three Easy Pieces ，老师的每一节视频都比较长，一次肝完贼爽，老师把晦涩的东西讲的也非常的通俗易懂，豁然开朗.\n\n### 2.  清华 操作系统原理(向勇、陈渝)     \n[**https://www.bilibili.com/video/BV1uW411f72n**](https://www.bilibili.com/video/BV1uW411f72n)\n评价：讲解非常细致，但是稍微需要有一定的基础（毕竟老师平时是给清华大学讲课的）对于我这种考不上清华的人来说，能给我个听清华老师讲课的机会，还有什么可说的呢？\n\n## 四、计算机组成原理\n\n---\n\n### 1.   计算机组成原理（哈工大刘宏伟）   \n[**https://www.bilibili.com/video/BV1t4411e7LH?p=1**](https://www.bilibili.com/video/BV1t4411e7LH?p=1)\n评价：他的课课不仅适合考研人，也非常适合初学者，初学者也听得懂。建议 1.5 倍速食用。\n\n## 五、编译原理\n\n---\n\n### 1. 编译原理（哈工大）   \n[**https://www.bilibili.com/video/BV1zW411t7YE?p=1**](https://www.bilibili.com/video/BV1zW411t7YE?p=1)\n评价：PPT 做的非常认真，讲得也很通俗易懂，思路清晰。直观简洁的，全程没有一句废话。\n上面五块内容很多选用了大学教授的课程视频，因为这几门课原本就是科班生的必修课，加上近来针对新人和应届生的面试逐渐“八股化”，因此很多概念性的课本知识不得不补。\n\n## 六、编程语言学习\n\n---\n\n### 1. 程序设计入门-C语言 浙江大学慕课 翁恺\nB站：[**https://www.bilibili.com/video/BV19W411B7w1?p=1**](https://www.bilibili.com/video/BV19W411B7w1?p=1)\n中国大学MOOC：[**https://www.icourse163.org/course/ZJU-199001**](https://www.icourse163.org/course/ZJU-199001)\n\n### 2. 【C语言】《带你学C带你飞》小甲鱼\n[**https://www.bilibili.com/video/BV17s411N78s?p=1**](https://www.bilibili.com/video/BV17s411N78s?p=1)\n\n\n## 七、MySQL\n\n---\n\n### 1.  MySQL基础教程丨mysql数据库实战（sql数据库优化）\n[**https://www.bilibili.com/video/BV1xW411u7ax**](https://www.bilibili.com/video/BV1xW411u7ax)\n课程来自尚硅谷，有基础有实战。\n\n### 2  尚硅谷MySQL数据库高级，mysql优化，数据库优化      \n[**https://www.bilibili.com/video/BV1KW411u7vy**](https://www.bilibili.com/video/BV1KW411u7vy)\n尚硅谷的课程特点就是分好多好多好多P，每一集都好短，集数超多，如果第一天没有被这种设定劝退的话，讲的还是不错的。\n\n## 八、Maven、Git\n\n---\n\n### 1. 2020最新Maven教程-Maven基础篇之Maven实战入门  \n[**https://www.bilibili.com/video/BV1dp4y1Q7Hf**](https://www.bilibili.com/video/BV1dp4y1Q7Hf)\n课程来自动力节点，从是什么，做什么，为什么到怎么用，分步清晰\n\n### 2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）   \n##### [https://www.bilibili.com/video/BV1pW411A7a5](https://www.bilibili.com/video/BV1pW411A7a5)\n尚硅谷的课程，评价如题，Git和GitHub快速上手一套搞定 \n\n\n## 九、Linux\n\n---\n\n### 1.【小白入门 通俗易懂】2021韩顺平 一周学会Linux\n[**https://www.bilibili.com/video/BV1Sv411r7vd**](https://www.bilibili.com/video/BV1Sv411r7vd)\n通俗易懂，从0开始，够肝的话，一周真的可以。\n\n## 十、面试、简历、职场、学习法、技巧、脱口秀\n\n---\n\n### 1. 不高兴就喝水  水哥yyds！   \n[**https://space.bilibili.com/412704776**](https://space.bilibili.com/412704776)\n","source":"_posts/B站计算机类学习资源整理.md","raw":"---\ntitle: B站计算机类学习资源整理\ndate: 2021-12-08 13:02:18\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- B站\ncategories: \n- 资源分享\n---\n\n## 一、计算机网络\n\n---\n\n### 1.  计算机网络微课堂   \n[**https://www.bilibili.com/video/BV1c4411d7jb?p=1**](https://www.bilibili.com/video/BV1c4411d7jb?p=1)\n\n讲师：湖科大教书匠\n评价：通俗易懂，重点知识十分细致，配合实验，而且有考研408 的难题的讲解，也是非常适合考研党，除了课程内容外还有很多习题讲解视频。因此就业党和考研党都可以食用。\n\n### 2.  王道计算机考研 计算机网络    \n[**https://www.bilibili.com/video/BV19E411D78Q?p=1**](https://www.bilibili.com/video/BV19E411D78Q?p=1)\n\nUP：王道论坛\n评价：小姐姐声音非常好听，百听不厌，内容与考研高度贴合，非常适合考研党和声音控。\n\n## 二、数据结构与算法\n\n---\n\n### 1.【郝斌】-数据结构入门   \n[**https://www.bilibili.com/video/BV11s41167h6?p=1**](https://www.bilibili.com/video/BV11s41167h6?p=1)\n老师：郝斌\n评价：思路是以初学者的思路来思考的，非常适合小白\n\n### 2.【C语言描述】《数据结构和算法》（小甲鱼）   \n[**https://www.bilibili.com/video/BV1jW411K7yg?p=1**](https://www.bilibili.com/video/BV1jW411K7yg?p=1)\n我UP：鱼C-小甲鱼\n评价：良心 up ，授课风格相比大学教授，语言风趣幽默，不死板，用例子带知识点，容易听得进去，亲和力拉满\n\n### 3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）   \n[**https://www.bilibili.com/video/BV1E4411H73v?p=1**](https://www.bilibili.com/video/BV1E4411H73v?p=1)\nUP：尚硅谷\n讲师：韩顺平\n评价：用JAVA语言讲数据结构和算法，韩老师视频内容全，并且每次课都会带着你写代码，把每一个例子都会实现，韩老师口碑也不必多言了。\n\n## 三、操作系统\n\n---\n\n### 1.  [完结] 2020 南京大学  操作系统：设计与实现 (蒋炎岩) \n[**https://www.bilibili.com/video/BV1N741177F5?p=1**](https://www.bilibili.com/video/BV1N741177F5?p=1)\n评价：南大的课质量真的硬，老师讲课时用的课本是 Remzi 的 Operating Systems: Three Easy Pieces ，老师的每一节视频都比较长，一次肝完贼爽，老师把晦涩的东西讲的也非常的通俗易懂，豁然开朗.\n\n### 2.  清华 操作系统原理(向勇、陈渝)     \n[**https://www.bilibili.com/video/BV1uW411f72n**](https://www.bilibili.com/video/BV1uW411f72n)\n评价：讲解非常细致，但是稍微需要有一定的基础（毕竟老师平时是给清华大学讲课的）对于我这种考不上清华的人来说，能给我个听清华老师讲课的机会，还有什么可说的呢？\n\n## 四、计算机组成原理\n\n---\n\n### 1.   计算机组成原理（哈工大刘宏伟）   \n[**https://www.bilibili.com/video/BV1t4411e7LH?p=1**](https://www.bilibili.com/video/BV1t4411e7LH?p=1)\n评价：他的课课不仅适合考研人，也非常适合初学者，初学者也听得懂。建议 1.5 倍速食用。\n\n## 五、编译原理\n\n---\n\n### 1. 编译原理（哈工大）   \n[**https://www.bilibili.com/video/BV1zW411t7YE?p=1**](https://www.bilibili.com/video/BV1zW411t7YE?p=1)\n评价：PPT 做的非常认真，讲得也很通俗易懂，思路清晰。直观简洁的，全程没有一句废话。\n上面五块内容很多选用了大学教授的课程视频，因为这几门课原本就是科班生的必修课，加上近来针对新人和应届生的面试逐渐“八股化”，因此很多概念性的课本知识不得不补。\n\n## 六、编程语言学习\n\n---\n\n### 1. 程序设计入门-C语言 浙江大学慕课 翁恺\nB站：[**https://www.bilibili.com/video/BV19W411B7w1?p=1**](https://www.bilibili.com/video/BV19W411B7w1?p=1)\n中国大学MOOC：[**https://www.icourse163.org/course/ZJU-199001**](https://www.icourse163.org/course/ZJU-199001)\n\n### 2. 【C语言】《带你学C带你飞》小甲鱼\n[**https://www.bilibili.com/video/BV17s411N78s?p=1**](https://www.bilibili.com/video/BV17s411N78s?p=1)\n\n\n## 七、MySQL\n\n---\n\n### 1.  MySQL基础教程丨mysql数据库实战（sql数据库优化）\n[**https://www.bilibili.com/video/BV1xW411u7ax**](https://www.bilibili.com/video/BV1xW411u7ax)\n课程来自尚硅谷，有基础有实战。\n\n### 2  尚硅谷MySQL数据库高级，mysql优化，数据库优化      \n[**https://www.bilibili.com/video/BV1KW411u7vy**](https://www.bilibili.com/video/BV1KW411u7vy)\n尚硅谷的课程特点就是分好多好多好多P，每一集都好短，集数超多，如果第一天没有被这种设定劝退的话，讲的还是不错的。\n\n## 八、Maven、Git\n\n---\n\n### 1. 2020最新Maven教程-Maven基础篇之Maven实战入门  \n[**https://www.bilibili.com/video/BV1dp4y1Q7Hf**](https://www.bilibili.com/video/BV1dp4y1Q7Hf)\n课程来自动力节点，从是什么，做什么，为什么到怎么用，分步清晰\n\n### 2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）   \n##### [https://www.bilibili.com/video/BV1pW411A7a5](https://www.bilibili.com/video/BV1pW411A7a5)\n尚硅谷的课程，评价如题，Git和GitHub快速上手一套搞定 \n\n\n## 九、Linux\n\n---\n\n### 1.【小白入门 通俗易懂】2021韩顺平 一周学会Linux\n[**https://www.bilibili.com/video/BV1Sv411r7vd**](https://www.bilibili.com/video/BV1Sv411r7vd)\n通俗易懂，从0开始，够肝的话，一周真的可以。\n\n## 十、面试、简历、职场、学习法、技巧、脱口秀\n\n---\n\n### 1. 不高兴就喝水  水哥yyds！   \n[**https://space.bilibili.com/412704776**](https://space.bilibili.com/412704776)\n","slug":"B站计算机类学习资源整理","published":1,"updated":"2021-12-30T08:57:23.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3i00018ou1fdizc4ny","content":"<h2 id=\"一、计算机网络\"><a href=\"#一、计算机网络\" class=\"headerlink\" title=\"一、计算机网络\"></a>一、计算机网络</h2><hr>\n<h3 id=\"1-计算机网络微课堂\"><a href=\"#1-计算机网络微课堂\" class=\"headerlink\" title=\"1.  计算机网络微课堂\"></a>1.  计算机网络微课堂</h3><p><a href=\"https://www.bilibili.com/video/BV1c4411d7jb?p=1\"><strong>https://www.bilibili.com/video/BV1c4411d7jb?p=1</strong></a></p>\n<p>讲师：湖科大教书匠<br>评价：通俗易懂，重点知识十分细致，配合实验，而且有考研408 的难题的讲解，也是非常适合考研党，除了课程内容外还有很多习题讲解视频。因此就业党和考研党都可以食用。</p>\n<h3 id=\"2-王道计算机考研-计算机网络\"><a href=\"#2-王道计算机考研-计算机网络\" class=\"headerlink\" title=\"2.  王道计算机考研 计算机网络\"></a>2.  王道计算机考研 计算机网络</h3><p><a href=\"https://www.bilibili.com/video/BV19E411D78Q?p=1\"><strong>https://www.bilibili.com/video/BV19E411D78Q?p=1</strong></a></p>\n<p>UP：王道论坛<br>评价：小姐姐声音非常好听，百听不厌，内容与考研高度贴合，非常适合考研党和声音控。</p>\n<h2 id=\"二、数据结构与算法\"><a href=\"#二、数据结构与算法\" class=\"headerlink\" title=\"二、数据结构与算法\"></a>二、数据结构与算法</h2><hr>\n<h3 id=\"1-【郝斌】-数据结构入门\"><a href=\"#1-【郝斌】-数据结构入门\" class=\"headerlink\" title=\"1.【郝斌】-数据结构入门\"></a>1.【郝斌】-数据结构入门</h3><p><a href=\"https://www.bilibili.com/video/BV11s41167h6?p=1\"><strong>https://www.bilibili.com/video/BV11s41167h6?p=1</strong></a><br>老师：郝斌<br>评价：思路是以初学者的思路来思考的，非常适合小白</p>\n<h3 id=\"2-【C语言描述】《数据结构和算法》（小甲鱼）\"><a href=\"#2-【C语言描述】《数据结构和算法》（小甲鱼）\" class=\"headerlink\" title=\"2.【C语言描述】《数据结构和算法》（小甲鱼）\"></a>2.【C语言描述】《数据结构和算法》（小甲鱼）</h3><p><a href=\"https://www.bilibili.com/video/BV1jW411K7yg?p=1\"><strong>https://www.bilibili.com/video/BV1jW411K7yg?p=1</strong></a><br>我UP：鱼C-小甲鱼<br>评价：良心 up ，授课风格相比大学教授，语言风趣幽默，不死板，用例子带知识点，容易听得进去，亲和力拉满</p>\n<h3 id=\"3-尚硅谷-Java-数据结构与-Java-算法（Java数据结构与算法）\"><a href=\"#3-尚硅谷-Java-数据结构与-Java-算法（Java数据结构与算法）\" class=\"headerlink\" title=\"3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）\"></a>3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）</h3><p><a href=\"https://www.bilibili.com/video/BV1E4411H73v?p=1\"><strong>https://www.bilibili.com/video/BV1E4411H73v?p=1</strong></a><br>UP：尚硅谷<br>讲师：韩顺平<br>评价：用JAVA语言讲数据结构和算法，韩老师视频内容全，并且每次课都会带着你写代码，把每一个例子都会实现，韩老师口碑也不必多言了。</p>\n<h2 id=\"三、操作系统\"><a href=\"#三、操作系统\" class=\"headerlink\" title=\"三、操作系统\"></a>三、操作系统</h2><hr>\n<h3 id=\"1-完结-2020-南京大学-操作系统：设计与实现-蒋炎岩\"><a href=\"#1-完结-2020-南京大学-操作系统：设计与实现-蒋炎岩\" class=\"headerlink\" title=\"1.  [完结] 2020 南京大学  操作系统：设计与实现 (蒋炎岩)\"></a>1.  [完结] 2020 南京大学  操作系统：设计与实现 (蒋炎岩)</h3><p><a href=\"https://www.bilibili.com/video/BV1N741177F5?p=1\"><strong>https://www.bilibili.com/video/BV1N741177F5?p=1</strong></a><br>评价：南大的课质量真的硬，老师讲课时用的课本是 Remzi 的 Operating Systems: Three Easy Pieces ，老师的每一节视频都比较长，一次肝完贼爽，老师把晦涩的东西讲的也非常的通俗易懂，豁然开朗.</p>\n<h3 id=\"2-清华-操作系统原理-向勇、陈渝\"><a href=\"#2-清华-操作系统原理-向勇、陈渝\" class=\"headerlink\" title=\"2.  清华 操作系统原理(向勇、陈渝)\"></a>2.  清华 操作系统原理(向勇、陈渝)</h3><p><a href=\"https://www.bilibili.com/video/BV1uW411f72n\"><strong>https://www.bilibili.com/video/BV1uW411f72n</strong></a><br>评价：讲解非常细致，但是稍微需要有一定的基础（毕竟老师平时是给清华大学讲课的）对于我这种考不上清华的人来说，能给我个听清华老师讲课的机会，还有什么可说的呢？</p>\n<h2 id=\"四、计算机组成原理\"><a href=\"#四、计算机组成原理\" class=\"headerlink\" title=\"四、计算机组成原理\"></a>四、计算机组成原理</h2><hr>\n<h3 id=\"1-计算机组成原理（哈工大刘宏伟）\"><a href=\"#1-计算机组成原理（哈工大刘宏伟）\" class=\"headerlink\" title=\"1.   计算机组成原理（哈工大刘宏伟）\"></a>1.   计算机组成原理（哈工大刘宏伟）</h3><p><a href=\"https://www.bilibili.com/video/BV1t4411e7LH?p=1\"><strong>https://www.bilibili.com/video/BV1t4411e7LH?p=1</strong></a><br>评价：他的课课不仅适合考研人，也非常适合初学者，初学者也听得懂。建议 1.5 倍速食用。</p>\n<h2 id=\"五、编译原理\"><a href=\"#五、编译原理\" class=\"headerlink\" title=\"五、编译原理\"></a>五、编译原理</h2><hr>\n<h3 id=\"1-编译原理（哈工大）\"><a href=\"#1-编译原理（哈工大）\" class=\"headerlink\" title=\"1. 编译原理（哈工大）\"></a>1. 编译原理（哈工大）</h3><p><a href=\"https://www.bilibili.com/video/BV1zW411t7YE?p=1\"><strong>https://www.bilibili.com/video/BV1zW411t7YE?p=1</strong></a><br>评价：PPT 做的非常认真，讲得也很通俗易懂，思路清晰。直观简洁的，全程没有一句废话。<br>上面五块内容很多选用了大学教授的课程视频，因为这几门课原本就是科班生的必修课，加上近来针对新人和应届生的面试逐渐“八股化”，因此很多概念性的课本知识不得不补。</p>\n<h2 id=\"六、编程语言学习\"><a href=\"#六、编程语言学习\" class=\"headerlink\" title=\"六、编程语言学习\"></a>六、编程语言学习</h2><hr>\n<h3 id=\"1-程序设计入门-C语言-浙江大学慕课-翁恺\"><a href=\"#1-程序设计入门-C语言-浙江大学慕课-翁恺\" class=\"headerlink\" title=\"1. 程序设计入门-C语言 浙江大学慕课 翁恺\"></a>1. 程序设计入门-C语言 浙江大学慕课 翁恺</h3><p>B站：<a href=\"https://www.bilibili.com/video/BV19W411B7w1?p=1\"><strong>https://www.bilibili.com/video/BV19W411B7w1?p=1</strong></a><br>中国大学MOOC：<a href=\"https://www.icourse163.org/course/ZJU-199001\"><strong>https://www.icourse163.org/course/ZJU-199001</strong></a></p>\n<h3 id=\"2-【C语言】《带你学C带你飞》小甲鱼\"><a href=\"#2-【C语言】《带你学C带你飞》小甲鱼\" class=\"headerlink\" title=\"2. 【C语言】《带你学C带你飞》小甲鱼\"></a>2. 【C语言】《带你学C带你飞》小甲鱼</h3><p><a href=\"https://www.bilibili.com/video/BV17s411N78s?p=1\"><strong>https://www.bilibili.com/video/BV17s411N78s?p=1</strong></a></p>\n<h2 id=\"七、MySQL\"><a href=\"#七、MySQL\" class=\"headerlink\" title=\"七、MySQL\"></a>七、MySQL</h2><hr>\n<h3 id=\"1-MySQL基础教程丨mysql数据库实战（sql数据库优化）\"><a href=\"#1-MySQL基础教程丨mysql数据库实战（sql数据库优化）\" class=\"headerlink\" title=\"1.  MySQL基础教程丨mysql数据库实战（sql数据库优化）\"></a>1.  MySQL基础教程丨mysql数据库实战（sql数据库优化）</h3><p><a href=\"https://www.bilibili.com/video/BV1xW411u7ax\"><strong>https://www.bilibili.com/video/BV1xW411u7ax</strong></a><br>课程来自尚硅谷，有基础有实战。</p>\n<h3 id=\"2-尚硅谷MySQL数据库高级，mysql优化，数据库优化\"><a href=\"#2-尚硅谷MySQL数据库高级，mysql优化，数据库优化\" class=\"headerlink\" title=\"2  尚硅谷MySQL数据库高级，mysql优化，数据库优化\"></a>2  尚硅谷MySQL数据库高级，mysql优化，数据库优化</h3><p><a href=\"https://www.bilibili.com/video/BV1KW411u7vy\"><strong>https://www.bilibili.com/video/BV1KW411u7vy</strong></a><br>尚硅谷的课程特点就是分好多好多好多P，每一集都好短，集数超多，如果第一天没有被这种设定劝退的话，讲的还是不错的。</p>\n<h2 id=\"八、Maven、Git\"><a href=\"#八、Maven、Git\" class=\"headerlink\" title=\"八、Maven、Git\"></a>八、Maven、Git</h2><hr>\n<h3 id=\"1-2020最新Maven教程-Maven基础篇之Maven实战入门\"><a href=\"#1-2020最新Maven教程-Maven基础篇之Maven实战入门\" class=\"headerlink\" title=\"1. 2020最新Maven教程-Maven基础篇之Maven实战入门\"></a>1. 2020最新Maven教程-Maven基础篇之Maven实战入门</h3><p><a href=\"https://www.bilibili.com/video/BV1dp4y1Q7Hf\"><strong>https://www.bilibili.com/video/BV1dp4y1Q7Hf</strong></a><br>课程来自动力节点，从是什么，做什么，为什么到怎么用，分步清晰</p>\n<h3 id=\"2-Git与GitHub基础全套完整版教程（快速上手，一套搞定）\"><a href=\"#2-Git与GitHub基础全套完整版教程（快速上手，一套搞定）\" class=\"headerlink\" title=\"2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）\"></a>2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）</h3><h5 id=\"https-www-bilibili-com-video-BV1pW411A7a5\"><a href=\"#https-www-bilibili-com-video-BV1pW411A7a5\" class=\"headerlink\" title=\"https://www.bilibili.com/video/BV1pW411A7a5\"></a><a href=\"https://www.bilibili.com/video/BV1pW411A7a5\">https://www.bilibili.com/video/BV1pW411A7a5</a></h5><p>尚硅谷的课程，评价如题，Git和GitHub快速上手一套搞定 </p>\n<h2 id=\"九、Linux\"><a href=\"#九、Linux\" class=\"headerlink\" title=\"九、Linux\"></a>九、Linux</h2><hr>\n<h3 id=\"1-【小白入门-通俗易懂】2021韩顺平-一周学会Linux\"><a href=\"#1-【小白入门-通俗易懂】2021韩顺平-一周学会Linux\" class=\"headerlink\" title=\"1.【小白入门 通俗易懂】2021韩顺平 一周学会Linux\"></a>1.【小白入门 通俗易懂】2021韩顺平 一周学会Linux</h3><p><a href=\"https://www.bilibili.com/video/BV1Sv411r7vd\"><strong>https://www.bilibili.com/video/BV1Sv411r7vd</strong></a><br>通俗易懂，从0开始，够肝的话，一周真的可以。</p>\n<h2 id=\"十、面试、简历、职场、学习法、技巧、脱口秀\"><a href=\"#十、面试、简历、职场、学习法、技巧、脱口秀\" class=\"headerlink\" title=\"十、面试、简历、职场、学习法、技巧、脱口秀\"></a>十、面试、简历、职场、学习法、技巧、脱口秀</h2><hr>\n<h3 id=\"1-不高兴就喝水-水哥yyds！\"><a href=\"#1-不高兴就喝水-水哥yyds！\" class=\"headerlink\" title=\"1. 不高兴就喝水  水哥yyds！\"></a>1. 不高兴就喝水  水哥yyds！</h3><p><a href=\"https://space.bilibili.com/412704776\"><strong>https://space.bilibili.com/412704776</strong></a></p>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"一、计算机网络\"><a href=\"#一、计算机网络\" class=\"headerlink\" title=\"一、计算机网络\"></a>一、计算机网络</h2><hr>\n<h3 id=\"1-计算机网络微课堂\"><a href=\"#1-计算机网络微课堂\" class=\"headerlink\" title=\"1.  计算机网络微课堂\"></a>1.  计算机网络微课堂</h3><p><a href=\"https://www.bilibili.com/video/BV1c4411d7jb?p=1\"><strong>https://www.bilibili.com/video/BV1c4411d7jb?p=1</strong></a></p>\n<p>讲师：湖科大教书匠<br>评价：通俗易懂，重点知识十分细致，配合实验，而且有考研408 的难题的讲解，也是非常适合考研党，除了课程内容外还有很多习题讲解视频。因此就业党和考研党都可以食用。</p>\n<h3 id=\"2-王道计算机考研-计算机网络\"><a href=\"#2-王道计算机考研-计算机网络\" class=\"headerlink\" title=\"2.  王道计算机考研 计算机网络\"></a>2.  王道计算机考研 计算机网络</h3><p><a href=\"https://www.bilibili.com/video/BV19E411D78Q?p=1\"><strong>https://www.bilibili.com/video/BV19E411D78Q?p=1</strong></a></p>\n<p>UP：王道论坛<br>评价：小姐姐声音非常好听，百听不厌，内容与考研高度贴合，非常适合考研党和声音控。</p>\n<h2 id=\"二、数据结构与算法\"><a href=\"#二、数据结构与算法\" class=\"headerlink\" title=\"二、数据结构与算法\"></a>二、数据结构与算法</h2><hr>\n<h3 id=\"1-【郝斌】-数据结构入门\"><a href=\"#1-【郝斌】-数据结构入门\" class=\"headerlink\" title=\"1.【郝斌】-数据结构入门\"></a>1.【郝斌】-数据结构入门</h3><p><a href=\"https://www.bilibili.com/video/BV11s41167h6?p=1\"><strong>https://www.bilibili.com/video/BV11s41167h6?p=1</strong></a><br>老师：郝斌<br>评价：思路是以初学者的思路来思考的，非常适合小白</p>\n<h3 id=\"2-【C语言描述】《数据结构和算法》（小甲鱼）\"><a href=\"#2-【C语言描述】《数据结构和算法》（小甲鱼）\" class=\"headerlink\" title=\"2.【C语言描述】《数据结构和算法》（小甲鱼）\"></a>2.【C语言描述】《数据结构和算法》（小甲鱼）</h3><p><a href=\"https://www.bilibili.com/video/BV1jW411K7yg?p=1\"><strong>https://www.bilibili.com/video/BV1jW411K7yg?p=1</strong></a><br>我UP：鱼C-小甲鱼<br>评价：良心 up ，授课风格相比大学教授，语言风趣幽默，不死板，用例子带知识点，容易听得进去，亲和力拉满</p>\n<h3 id=\"3-尚硅谷-Java-数据结构与-Java-算法（Java数据结构与算法）\"><a href=\"#3-尚硅谷-Java-数据结构与-Java-算法（Java数据结构与算法）\" class=\"headerlink\" title=\"3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）\"></a>3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法）</h3><p><a href=\"https://www.bilibili.com/video/BV1E4411H73v?p=1\"><strong>https://www.bilibili.com/video/BV1E4411H73v?p=1</strong></a><br>UP：尚硅谷<br>讲师：韩顺平<br>评价：用JAVA语言讲数据结构和算法，韩老师视频内容全，并且每次课都会带着你写代码，把每一个例子都会实现，韩老师口碑也不必多言了。</p>\n<h2 id=\"三、操作系统\"><a href=\"#三、操作系统\" class=\"headerlink\" title=\"三、操作系统\"></a>三、操作系统</h2><hr>\n<h3 id=\"1-完结-2020-南京大学-操作系统：设计与实现-蒋炎岩\"><a href=\"#1-完结-2020-南京大学-操作系统：设计与实现-蒋炎岩\" class=\"headerlink\" title=\"1.  [完结] 2020 南京大学  操作系统：设计与实现 (蒋炎岩)\"></a>1.  [完结] 2020 南京大学  操作系统：设计与实现 (蒋炎岩)</h3><p><a href=\"https://www.bilibili.com/video/BV1N741177F5?p=1\"><strong>https://www.bilibili.com/video/BV1N741177F5?p=1</strong></a><br>评价：南大的课质量真的硬，老师讲课时用的课本是 Remzi 的 Operating Systems: Three Easy Pieces ，老师的每一节视频都比较长，一次肝完贼爽，老师把晦涩的东西讲的也非常的通俗易懂，豁然开朗.</p>\n<h3 id=\"2-清华-操作系统原理-向勇、陈渝\"><a href=\"#2-清华-操作系统原理-向勇、陈渝\" class=\"headerlink\" title=\"2.  清华 操作系统原理(向勇、陈渝)\"></a>2.  清华 操作系统原理(向勇、陈渝)</h3><p><a href=\"https://www.bilibili.com/video/BV1uW411f72n\"><strong>https://www.bilibili.com/video/BV1uW411f72n</strong></a><br>评价：讲解非常细致，但是稍微需要有一定的基础（毕竟老师平时是给清华大学讲课的）对于我这种考不上清华的人来说，能给我个听清华老师讲课的机会，还有什么可说的呢？</p>\n<h2 id=\"四、计算机组成原理\"><a href=\"#四、计算机组成原理\" class=\"headerlink\" title=\"四、计算机组成原理\"></a>四、计算机组成原理</h2><hr>\n<h3 id=\"1-计算机组成原理（哈工大刘宏伟）\"><a href=\"#1-计算机组成原理（哈工大刘宏伟）\" class=\"headerlink\" title=\"1.   计算机组成原理（哈工大刘宏伟）\"></a>1.   计算机组成原理（哈工大刘宏伟）</h3><p><a href=\"https://www.bilibili.com/video/BV1t4411e7LH?p=1\"><strong>https://www.bilibili.com/video/BV1t4411e7LH?p=1</strong></a><br>评价：他的课课不仅适合考研人，也非常适合初学者，初学者也听得懂。建议 1.5 倍速食用。</p>\n<h2 id=\"五、编译原理\"><a href=\"#五、编译原理\" class=\"headerlink\" title=\"五、编译原理\"></a>五、编译原理</h2><hr>\n<h3 id=\"1-编译原理（哈工大）\"><a href=\"#1-编译原理（哈工大）\" class=\"headerlink\" title=\"1. 编译原理（哈工大）\"></a>1. 编译原理（哈工大）</h3><p><a href=\"https://www.bilibili.com/video/BV1zW411t7YE?p=1\"><strong>https://www.bilibili.com/video/BV1zW411t7YE?p=1</strong></a><br>评价：PPT 做的非常认真，讲得也很通俗易懂，思路清晰。直观简洁的，全程没有一句废话。<br>上面五块内容很多选用了大学教授的课程视频，因为这几门课原本就是科班生的必修课，加上近来针对新人和应届生的面试逐渐“八股化”，因此很多概念性的课本知识不得不补。</p>\n<h2 id=\"六、编程语言学习\"><a href=\"#六、编程语言学习\" class=\"headerlink\" title=\"六、编程语言学习\"></a>六、编程语言学习</h2><hr>\n<h3 id=\"1-程序设计入门-C语言-浙江大学慕课-翁恺\"><a href=\"#1-程序设计入门-C语言-浙江大学慕课-翁恺\" class=\"headerlink\" title=\"1. 程序设计入门-C语言 浙江大学慕课 翁恺\"></a>1. 程序设计入门-C语言 浙江大学慕课 翁恺</h3><p>B站：<a href=\"https://www.bilibili.com/video/BV19W411B7w1?p=1\"><strong>https://www.bilibili.com/video/BV19W411B7w1?p=1</strong></a><br>中国大学MOOC：<a href=\"https://www.icourse163.org/course/ZJU-199001\"><strong>https://www.icourse163.org/course/ZJU-199001</strong></a></p>\n<h3 id=\"2-【C语言】《带你学C带你飞》小甲鱼\"><a href=\"#2-【C语言】《带你学C带你飞》小甲鱼\" class=\"headerlink\" title=\"2. 【C语言】《带你学C带你飞》小甲鱼\"></a>2. 【C语言】《带你学C带你飞》小甲鱼</h3><p><a href=\"https://www.bilibili.com/video/BV17s411N78s?p=1\"><strong>https://www.bilibili.com/video/BV17s411N78s?p=1</strong></a></p>\n<h2 id=\"七、MySQL\"><a href=\"#七、MySQL\" class=\"headerlink\" title=\"七、MySQL\"></a>七、MySQL</h2><hr>\n<h3 id=\"1-MySQL基础教程丨mysql数据库实战（sql数据库优化）\"><a href=\"#1-MySQL基础教程丨mysql数据库实战（sql数据库优化）\" class=\"headerlink\" title=\"1.  MySQL基础教程丨mysql数据库实战（sql数据库优化）\"></a>1.  MySQL基础教程丨mysql数据库实战（sql数据库优化）</h3><p><a href=\"https://www.bilibili.com/video/BV1xW411u7ax\"><strong>https://www.bilibili.com/video/BV1xW411u7ax</strong></a><br>课程来自尚硅谷，有基础有实战。</p>\n<h3 id=\"2-尚硅谷MySQL数据库高级，mysql优化，数据库优化\"><a href=\"#2-尚硅谷MySQL数据库高级，mysql优化，数据库优化\" class=\"headerlink\" title=\"2  尚硅谷MySQL数据库高级，mysql优化，数据库优化\"></a>2  尚硅谷MySQL数据库高级，mysql优化，数据库优化</h3><p><a href=\"https://www.bilibili.com/video/BV1KW411u7vy\"><strong>https://www.bilibili.com/video/BV1KW411u7vy</strong></a><br>尚硅谷的课程特点就是分好多好多好多P，每一集都好短，集数超多，如果第一天没有被这种设定劝退的话，讲的还是不错的。</p>\n<h2 id=\"八、Maven、Git\"><a href=\"#八、Maven、Git\" class=\"headerlink\" title=\"八、Maven、Git\"></a>八、Maven、Git</h2><hr>\n<h3 id=\"1-2020最新Maven教程-Maven基础篇之Maven实战入门\"><a href=\"#1-2020最新Maven教程-Maven基础篇之Maven实战入门\" class=\"headerlink\" title=\"1. 2020最新Maven教程-Maven基础篇之Maven实战入门\"></a>1. 2020最新Maven教程-Maven基础篇之Maven实战入门</h3><p><a href=\"https://www.bilibili.com/video/BV1dp4y1Q7Hf\"><strong>https://www.bilibili.com/video/BV1dp4y1Q7Hf</strong></a><br>课程来自动力节点，从是什么，做什么，为什么到怎么用，分步清晰</p>\n<h3 id=\"2-Git与GitHub基础全套完整版教程（快速上手，一套搞定）\"><a href=\"#2-Git与GitHub基础全套完整版教程（快速上手，一套搞定）\" class=\"headerlink\" title=\"2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）\"></a>2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）</h3><h5 id=\"https-www-bilibili-com-video-BV1pW411A7a5\"><a href=\"#https-www-bilibili-com-video-BV1pW411A7a5\" class=\"headerlink\" title=\"https://www.bilibili.com/video/BV1pW411A7a5\"></a><a href=\"https://www.bilibili.com/video/BV1pW411A7a5\">https://www.bilibili.com/video/BV1pW411A7a5</a></h5><p>尚硅谷的课程，评价如题，Git和GitHub快速上手一套搞定 </p>\n<h2 id=\"九、Linux\"><a href=\"#九、Linux\" class=\"headerlink\" title=\"九、Linux\"></a>九、Linux</h2><hr>\n<h3 id=\"1-【小白入门-通俗易懂】2021韩顺平-一周学会Linux\"><a href=\"#1-【小白入门-通俗易懂】2021韩顺平-一周学会Linux\" class=\"headerlink\" title=\"1.【小白入门 通俗易懂】2021韩顺平 一周学会Linux\"></a>1.【小白入门 通俗易懂】2021韩顺平 一周学会Linux</h3><p><a href=\"https://www.bilibili.com/video/BV1Sv411r7vd\"><strong>https://www.bilibili.com/video/BV1Sv411r7vd</strong></a><br>通俗易懂，从0开始，够肝的话，一周真的可以。</p>\n<h2 id=\"十、面试、简历、职场、学习法、技巧、脱口秀\"><a href=\"#十、面试、简历、职场、学习法、技巧、脱口秀\" class=\"headerlink\" title=\"十、面试、简历、职场、学习法、技巧、脱口秀\"></a>十、面试、简历、职场、学习法、技巧、脱口秀</h2><hr>\n<h3 id=\"1-不高兴就喝水-水哥yyds！\"><a href=\"#1-不高兴就喝水-水哥yyds！\" class=\"headerlink\" title=\"1. 不高兴就喝水  水哥yyds！\"></a>1. 不高兴就喝水  水哥yyds！</h3><p><a href=\"https://space.bilibili.com/412704776\"><strong>https://space.bilibili.com/412704776</strong></a></p>\n"},{"title":"Hexo管理文章的基本操作","date":"2021-12-20T03:06:18.000Z","update":null,"img":null,"top":true,"cover":true,"coverImg":"/medias/coverImg/coverImg4.jpg","toc":true,"mathjax":true,"summary":null,"_content":"\n## 1. 创建md文件\n\nHexo 使用 Markdown 解析文章，md文件也就是Markdown文件，通过以下命令创建：\n```bash\nhexo n <title>\n# 例如\nhexo n \"Hexo管理文章的基本操作\"\n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220111012.png)\n\n这里可以看到创建了一个Hexo管理文章的基本操作.md，保存在`\\source\\_posts`文件夹下。打开该文件，使用Markdown语法即可书写文章内容。\n\n## 2. 三种布局\n创建md文件时，我们可以指定布局，Hexo布局有三种：post（文章）、draft（草稿）、page（页面）。\n\n&nbsp;\n在新建文件时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件（可以理解为模板）来建立md文件：\n\n- 如果没有指定布局类型，则为默认布局post，即`hexo n = hexo n post`。\n- 当我们创建不同布局的md文件时，它们会存储在不同路径：\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220130338.png)\n\n> 对于page，Hexo会创建一个以标题为名的文件夹，并在该文件夹下生成一个index.md文件，page布局顾名思义就是用来DIY我们博客页面的。\n\n&nbsp;\n**draft**：\ndraft这种布局在创建时会被保存到`\\source\\_drafts`文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到_drafts文件夹中。\n- 可在启动服务器时加上 --draft 参数来查看草稿。`hexo s --draft`\n- 可以在站点配置文件中把 render_drafts 参数设为 true 来预览草稿。\n- 可以通过 publish 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。`hexo publish [layout] <title>`\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220131544.png)\n\n## 3. Front-matter\n当我们创建一个md文件后，打开后会看到一些内容，这些称为Front-matter，它是文件最上方以 `---` 分隔的区域，用于指定个别文件的变量，举例来说：\n\n```yaml\n---\ntitle: Hexo管理文章的基本操作 # 文章标题，也就是创建时指定的名字\ndate: 2021-12-20 11:06:18 # 创建时间\ntags: # 标签\n---\n```\n\n> 在Typora中我们在md文件的首行（必须是第一行）输入`---` ，然后按回车就可以插入Front-matter了。\n> 注意：参数的`:`后面有一个空格。\n\n- **Front-matter预定义参数**\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211223145713.png)\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图**各有特色**。\n> 1. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 1. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[chahuo](http://encode.chahuo.com/)。\n\n最简示例：\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n最全示例：\n```yaml\n---\ntitle: Hexo管理文章的基本操作\ndate: 2021-12-20 14:33:20\nauthor: cfxin\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /medias/images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```\n\n- **添加分类与标签**\n只有文章（post布局）支持分类和标签，需要在Front-matter中设置。分类有层级关系，标签没有。例如：\n\n```yaml\ncategories:\n- 个人博客 #（第一层级）\n- Hexo博客 #（第二层级）\ntags:\n- Hexo\n- 博客\n```\n\n添加多个分类：\n\n```yaml\ncategories:\n- [日常, 生活]\n- [日常, 随想]\n```\n\n## 4. 基本操作\n- 清除缓存：`hexo clean`\n- 生成静态文件：`hexo generate`可简写为`hexo g`\n- 启动服务器：`hexo server`简写为`hexo s`，常用参数：`-p`重设端口\n- 部署：`hexo deploy`简写为`hexo d`，用于将网站部署到服务器上。常用参数：-g，`hexo d -g`部署前预先生成静态文件。\n\n&nbsp;\n一般发布文章或者修改博客后需要这些操作：清除缓存>生成静态文件>启动服务器，测试没问题后再部署。\n\n```bash\nhexo clean && hexo s -g # 清除缓存>生成静态文件>启动服务器\nhexo d # 部署\n```\n> 更多操作查看：[Hexo官方文档](https://hexo.bootcss.com/docs/)\n\n","source":"_posts/Hexo管理文章的基本操作.md","raw":"---\ntitle: Hexo管理文章的基本操作\ndate: 2021-12-20 11:06:18\nupdate: \nimg: \ntop: true\ncover: true\ncoverImg: /medias/coverImg/coverImg4.jpg\ntoc: true\nmathjax: true\nsummary: \ntags: \n- Hexo\ncategories: \n- 博客建设\n---\n\n## 1. 创建md文件\n\nHexo 使用 Markdown 解析文章，md文件也就是Markdown文件，通过以下命令创建：\n```bash\nhexo n <title>\n# 例如\nhexo n \"Hexo管理文章的基本操作\"\n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220111012.png)\n\n这里可以看到创建了一个Hexo管理文章的基本操作.md，保存在`\\source\\_posts`文件夹下。打开该文件，使用Markdown语法即可书写文章内容。\n\n## 2. 三种布局\n创建md文件时，我们可以指定布局，Hexo布局有三种：post（文章）、draft（草稿）、page（页面）。\n\n&nbsp;\n在新建文件时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件（可以理解为模板）来建立md文件：\n\n- 如果没有指定布局类型，则为默认布局post，即`hexo n = hexo n post`。\n- 当我们创建不同布局的md文件时，它们会存储在不同路径：\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220130338.png)\n\n> 对于page，Hexo会创建一个以标题为名的文件夹，并在该文件夹下生成一个index.md文件，page布局顾名思义就是用来DIY我们博客页面的。\n\n&nbsp;\n**draft**：\ndraft这种布局在创建时会被保存到`\\source\\_drafts`文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到_drafts文件夹中。\n- 可在启动服务器时加上 --draft 参数来查看草稿。`hexo s --draft`\n- 可以在站点配置文件中把 render_drafts 参数设为 true 来预览草稿。\n- 可以通过 publish 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。`hexo publish [layout] <title>`\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220131544.png)\n\n## 3. Front-matter\n当我们创建一个md文件后，打开后会看到一些内容，这些称为Front-matter，它是文件最上方以 `---` 分隔的区域，用于指定个别文件的变量，举例来说：\n\n```yaml\n---\ntitle: Hexo管理文章的基本操作 # 文章标题，也就是创建时指定的名字\ndate: 2021-12-20 11:06:18 # 创建时间\ntags: # 标签\n---\n```\n\n> 在Typora中我们在md文件的首行（必须是第一行）输入`---` ，然后按回车就可以插入Front-matter了。\n> 注意：参数的`:`后面有一个空格。\n\n- **Front-matter预定义参数**\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211223145713.png)\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图**各有特色**。\n> 1. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 1. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[chahuo](http://encode.chahuo.com/)。\n\n最简示例：\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n最全示例：\n```yaml\n---\ntitle: Hexo管理文章的基本操作\ndate: 2021-12-20 14:33:20\nauthor: cfxin\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /medias/images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```\n\n- **添加分类与标签**\n只有文章（post布局）支持分类和标签，需要在Front-matter中设置。分类有层级关系，标签没有。例如：\n\n```yaml\ncategories:\n- 个人博客 #（第一层级）\n- Hexo博客 #（第二层级）\ntags:\n- Hexo\n- 博客\n```\n\n添加多个分类：\n\n```yaml\ncategories:\n- [日常, 生活]\n- [日常, 随想]\n```\n\n## 4. 基本操作\n- 清除缓存：`hexo clean`\n- 生成静态文件：`hexo generate`可简写为`hexo g`\n- 启动服务器：`hexo server`简写为`hexo s`，常用参数：`-p`重设端口\n- 部署：`hexo deploy`简写为`hexo d`，用于将网站部署到服务器上。常用参数：-g，`hexo d -g`部署前预先生成静态文件。\n\n&nbsp;\n一般发布文章或者修改博客后需要这些操作：清除缓存>生成静态文件>启动服务器，测试没问题后再部署。\n\n```bash\nhexo clean && hexo s -g # 清除缓存>生成静态文件>启动服务器\nhexo d # 部署\n```\n> 更多操作查看：[Hexo官方文档](https://hexo.bootcss.com/docs/)\n\n","slug":"Hexo管理文章的基本操作","published":1,"updated":"2021-12-30T08:57:23.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3l00038ou166amd5tm","content":"<h2 id=\"1-创建md文件\"><a href=\"#1-创建md文件\" class=\"headerlink\" title=\"1. 创建md文件\"></a>1. 创建md文件</h2><p>Hexo 使用 Markdown 解析文章，md文件也就是Markdown文件，通过以下命令创建：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">hexo n <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\"># 例如</span>\nhexo n <span class=\"token string\">\"Hexo管理文章的基本操作\"</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220111012.png\"></p>\n<p>这里可以看到创建了一个Hexo管理文章的基本操作.md，保存在<code>\\source\\_posts</code>文件夹下。打开该文件，使用Markdown语法即可书写文章内容。</p>\n<h2 id=\"2-三种布局\"><a href=\"#2-三种布局\" class=\"headerlink\" title=\"2. 三种布局\"></a>2. 三种布局</h2><p>创建md文件时，我们可以指定布局，Hexo布局有三种：post（文章）、draft（草稿）、page（页面）。</p>\n<p>&nbsp;<br>在新建文件时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件（可以理解为模板）来建立md文件：</p>\n<ul>\n<li>如果没有指定布局类型，则为默认布局post，即<code>hexo n = hexo n post</code>。</li>\n<li>当我们创建不同布局的md文件时，它们会存储在不同路径：</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220130338.png\"></p>\n<blockquote>\n<p>对于page，Hexo会创建一个以标题为名的文件夹，并在该文件夹下生成一个index.md文件，page布局顾名思义就是用来DIY我们博客页面的。</p>\n</blockquote>\n<p>&nbsp;<br><strong>draft</strong>：<br>draft这种布局在创建时会被保存到<code>\\source\\_drafts</code>文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到_drafts文件夹中。</p>\n<ul>\n<li>可在启动服务器时加上 –draft 参数来查看草稿。<code>hexo s --draft</code></li>\n<li>可以在站点配置文件中把 render_drafts 参数设为 true 来预览草稿。</li>\n<li>可以通过 publish 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。<code>hexo publish [layout] &lt;title&gt;</code></li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220131544.png\"></p>\n<h2 id=\"3-Front-matter\"><a href=\"#3-Front-matter\" class=\"headerlink\" title=\"3. Front-matter\"></a>3. Front-matter</h2><p>当我们创建一个md文件后，打开后会看到一些内容，这些称为Front-matter，它是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Hexo管理文章的基本操作 <span class=\"token comment\" spellcheck=\"true\"># 文章标题，也就是创建时指定的名字</span>\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2021-12-20 11:06:18 </span><span class=\"token comment\" spellcheck=\"true\"># 创建时间</span>\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\"># 标签</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<blockquote>\n<p>在Typora中我们在md文件的首行（必须是第一行）输入<code>---</code> ，然后按回车就可以插入Front-matter了。<br>注意：参数的<code>:</code>后面有一个空格。</p>\n</blockquote>\n<ul>\n<li><strong>Front-matter预定义参数</strong></li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211223145713.png\"></p>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://encode.chahuo.com/\">chahuo</a>。</li>\n</ol>\n</blockquote>\n<p>最简示例：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<p>最全示例：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Hexo管理文章的基本操作\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2021-12-20 14:33:20</span>\n<span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> cfxin\n<span class=\"token key atrule\">img</span><span class=\"token punctuation\">:</span> /source/images/xxx.jpg\n<span class=\"token key atrule\">top</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">coverImg</span><span class=\"token punctuation\">:</span> /medias/images/1.jpg\n<span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\n<span class=\"token key atrule\">toc</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">mathjax</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">summary</span><span class=\"token punctuation\">:</span> 这是你自定义的文章摘要内容\n<span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> Markdown\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Typora\n  <span class=\"token punctuation\">-</span> Markdown\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<ul>\n<li><strong>添加分类与标签</strong><br>只有文章（post布局）支持分类和标签，需要在Front-matter中设置。分类有层级关系，标签没有。例如：</li>\n</ul>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> 个人博客 <span class=\"token comment\" spellcheck=\"true\">#（第一层级）</span>\n<span class=\"token punctuation\">-</span> Hexo博客 <span class=\"token comment\" spellcheck=\"true\">#（第二层级）</span>\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> Hexo\n<span class=\"token punctuation\">-</span> 博客\n</code></pre>\n<p>添加多个分类：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token punctuation\">[</span>日常<span class=\"token punctuation\">,</span> 生活<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">-</span> <span class=\"token punctuation\">[</span>日常<span class=\"token punctuation\">,</span> 随想<span class=\"token punctuation\">]</span>\n</code></pre>\n<h2 id=\"4-基本操作\"><a href=\"#4-基本操作\" class=\"headerlink\" title=\"4. 基本操作\"></a>4. 基本操作</h2><ul>\n<li>清除缓存：<code>hexo clean</code></li>\n<li>生成静态文件：<code>hexo generate</code>可简写为<code>hexo g</code></li>\n<li>启动服务器：<code>hexo server</code>简写为<code>hexo s</code>，常用参数：<code>-p</code>重设端口</li>\n<li>部署：<code>hexo deploy</code>简写为<code>hexo d</code>，用于将网站部署到服务器上。常用参数：-g，<code>hexo d -g</code>部署前预先生成静态文件。</li>\n</ul>\n<p>&nbsp;<br>一般发布文章或者修改博客后需要这些操作：清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo s -g <span class=\"token comment\" spellcheck=\"true\"># 清除缓存>生成静态文件>启动服务器</span>\nhexo d <span class=\"token comment\" spellcheck=\"true\"># 部署</span>\n</code></pre>\n<blockquote>\n<p>更多操作查看：<a href=\"https://hexo.bootcss.com/docs/\">Hexo官方文档</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"1-创建md文件\"><a href=\"#1-创建md文件\" class=\"headerlink\" title=\"1. 创建md文件\"></a>1. 创建md文件</h2><p>Hexo 使用 Markdown 解析文章，md文件也就是Markdown文件，通过以下命令创建：</p>\n<pre><code class=\"bash\">hexo n &lt;title&gt;\n# 例如\nhexo n &quot;Hexo管理文章的基本操作&quot;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220111012.png\"></p>\n<p>这里可以看到创建了一个Hexo管理文章的基本操作.md，保存在<code>\\source\\_posts</code>文件夹下。打开该文件，使用Markdown语法即可书写文章内容。</p>\n<h2 id=\"2-三种布局\"><a href=\"#2-三种布局\" class=\"headerlink\" title=\"2. 三种布局\"></a>2. 三种布局</h2><p>创建md文件时，我们可以指定布局，Hexo布局有三种：post（文章）、draft（草稿）、page（页面）。</p>\n<p>&nbsp;<br>在新建文件时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件（可以理解为模板）来建立md文件：</p>\n<ul>\n<li>如果没有指定布局类型，则为默认布局post，即<code>hexo n = hexo n post</code>。</li>\n<li>当我们创建不同布局的md文件时，它们会存储在不同路径：</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220130338.png\"></p>\n<blockquote>\n<p>对于page，Hexo会创建一个以标题为名的文件夹，并在该文件夹下生成一个index.md文件，page布局顾名思义就是用来DIY我们博客页面的。</p>\n</blockquote>\n<p>&nbsp;<br><strong>draft</strong>：<br>draft这种布局在创建时会被保存到<code>\\source\\_drafts</code>文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到_drafts文件夹中。</p>\n<ul>\n<li>可在启动服务器时加上 –draft 参数来查看草稿。<code>hexo s --draft</code></li>\n<li>可以在站点配置文件中把 render_drafts 参数设为 true 来预览草稿。</li>\n<li>可以通过 publish 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。<code>hexo publish [layout] &lt;title&gt;</code></li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220131544.png\"></p>\n<h2 id=\"3-Front-matter\"><a href=\"#3-Front-matter\" class=\"headerlink\" title=\"3. Front-matter\"></a>3. Front-matter</h2><p>当我们创建一个md文件后，打开后会看到一些内容，这些称为Front-matter，它是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>\n<pre><code class=\"yaml\">---\ntitle: Hexo管理文章的基本操作 # 文章标题，也就是创建时指定的名字\ndate: 2021-12-20 11:06:18 # 创建时间\ntags: # 标签\n---\n</code></pre>\n<blockquote>\n<p>在Typora中我们在md文件的首行（必须是第一行）输入<code>---</code> ，然后按回车就可以插入Front-matter了。<br>注意：参数的<code>:</code>后面有一个空格。</p>\n</blockquote>\n<ul>\n<li><strong>Front-matter预定义参数</strong></li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211223145713.png\"></p>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://encode.chahuo.com/\">chahuo</a>。</li>\n</ol>\n</blockquote>\n<p>最简示例：</p>\n<pre><code class=\"yaml\">---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n</code></pre>\n<p>最全示例：</p>\n<pre><code class=\"yaml\">---\ntitle: Hexo管理文章的基本操作\ndate: 2021-12-20 14:33:20\nauthor: cfxin\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /medias/images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n</code></pre>\n<ul>\n<li><strong>添加分类与标签</strong><br>只有文章（post布局）支持分类和标签，需要在Front-matter中设置。分类有层级关系，标签没有。例如：</li>\n</ul>\n<pre><code class=\"yaml\">categories:\n- 个人博客 #（第一层级）\n- Hexo博客 #（第二层级）\ntags:\n- Hexo\n- 博客\n</code></pre>\n<p>添加多个分类：</p>\n<pre><code class=\"yaml\">categories:\n- [日常, 生活]\n- [日常, 随想]\n</code></pre>\n<h2 id=\"4-基本操作\"><a href=\"#4-基本操作\" class=\"headerlink\" title=\"4. 基本操作\"></a>4. 基本操作</h2><ul>\n<li>清除缓存：<code>hexo clean</code></li>\n<li>生成静态文件：<code>hexo generate</code>可简写为<code>hexo g</code></li>\n<li>启动服务器：<code>hexo server</code>简写为<code>hexo s</code>，常用参数：<code>-p</code>重设端口</li>\n<li>部署：<code>hexo deploy</code>简写为<code>hexo d</code>，用于将网站部署到服务器上。常用参数：-g，<code>hexo d -g</code>部署前预先生成静态文件。</li>\n</ul>\n<p>&nbsp;<br>一般发布文章或者修改博客后需要这些操作：清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p>\n<pre><code class=\"bash\">hexo clean &amp;&amp; hexo s -g # 清除缓存&gt;生成静态文件&gt;启动服务器\nhexo d # 部署\n</code></pre>\n<blockquote>\n<p>更多操作查看：<a href=\"https://hexo.bootcss.com/docs/\">Hexo官方文档</a></p>\n</blockquote>\n"},{"title":"LaTeX的使用","date":"2021-12-13T06:33:20.000Z","update":null,"img":null,"top":true,"cover":true,"coverImg":"/medias/coverImg/coverImg1.jpg","toc":true,"mathjax":true,"summary":null,"_content":"\n# LaTeX基础\n\n## TEX是什么\nTEX 是高德纳 (Donald E. Knuth) 为排版文字和数学公式而开发的程序。\n\n- TEX 系统提供了 300 + 600 多条基本的排版命令 \n- TEX 是目前公认的数学公式排版最好的排版语言\n- TEX 是免费的 \n- TEX 的名字来自大写的希腊字母 (τ, ϵ, χ)，意思是“科技”和“艺术” \n\n## LaTeX是什么\nLaTeX 是一个写作工具，可以用于创建具有专业排版的文档。它基于所见即所得的思想，即写作者只需要关注文档的内容，而计算机负责将其格式化。用户不再需要像 Word 中那样，在页面上用空格来控制格式，而是只需要输入纯文本，让 LaTeX 处理剩下的一切。\n>  LaTeX 是一种使用 TEX 程序作为排版引擎的格式，可以粗略地将它理解成是对 TEX 的一层封装。 \n\n## LaTeX的用处\nLaTeX 被广泛应用于科学文档、书籍以及许多其他出版物。它不仅可以创建精美的排版文档，而且还使得用户可以很快速地处理复杂的排版问题，比如输入数学公式、创建目录、管理引用、创建书目、保持布局一致等等。由于可用的开源软件包数量众多，因此 LaTeX 有无限的可能性。这些软件包赋予了用户更多的能力，例如添加脚注，绘制原理图，创建表格等。\n\n&nbsp;\n人们使用 LaTeX 的最重要原因之一就是它分离了文档的内容与样式。这意味着你只需要编写文档的内容，我们就可以轻松更改其外观。同样，你也可以创建一个文档模板，用它来统一许多不同文档的外观，这样学术期刊可以创建投稿模板。这些模板具有预制的布局，只需要往里面添加内容即可。实际上，LaTeX 有数百种模板，覆盖从简历到幻灯片的所有内容。\n\n## LaTeX的优点\n- LaTeX 特点\n   - 专注于内容撰写，很少操心文档的版面设计\n   - 自动编号：章节、图表、公式定理、参考文献 ·······\n   - 自动生成目录、索引\n   - 公式、定理、参考文献、插图、页码等可以交叉引用\n   - 可以通过各种宏包扩展其功能, 实现各种特殊要求\n- LaTeX VS. Word\n   - Word 简单易用，所见即所得，普通办公文档建议用 Word\n   - LaTeX 输出美观，质量高，科技排版 (特别是数学) 推荐使用 LaTeX\n   - LaTeX 能实现 Word 的所有功能，定制性高，但易用性不如 Word\n\n\n## 写LaTeX的工具\n### TEX的发行版\n- Windows 系统：TeXLive (推荐)，MiKTeX，CTEX 套装 (不推荐)\n- Unix/Linux 系统：TeXLive\n- Mac OS 系统：TeXLive，MacTeX\n\n### 下载和安装\n- TeXLive : [http://tug.org/texlive/](http://tug.org/texlive/) (大而全，全部宏包)\n- 编辑器: WinEdt, TeXworks, TeXmaker, TeXStudio, vim, emacs, ...\n- 安装演示: 以 [TeXLive 2017](http://math.ecnu.edu.cn/~jypan/Teaching/Latex/Install/install_texlive_gb2312.html) 为例\n\n### 在线平台[Overleaf](https://cn.overleaf.com/)\n本文章接下来对LaTeX的使用介绍主要以该平台为例。\n\n---\n\n# LaTeX排版\n## LaTeX文稿的排版过程\n1. **编写源文件**：tex 源文件为纯文本文件，以 `.tex` 为扩展名\n\t- 可以使用任何文本编辑器编写, 如: WinEdt, EditPlus, Vi, Emacs, 推荐 WinEdt，专门针对 tex 开发, 提供许多便捷功能, 有助于提高排版效率\n\n2. **编译**：用 `pdflatex` (英文文档) 或 `xelatex` (中文文档) 编译，生成相应的 pdf 文件\n\n![来源：华东师范大学潘建瑜老师的课件](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212181900.png)\n\n\n## 第一个LaTeX文件\n创建一个新的 LaTeX 项目。你可以在自己的电脑上创建 `.tex` 文件，也可以在 Overleaf 中启动新项目。让我们从最简单的示例开始：\n```latex\n\\documentclass{article} %指定文档类型\n% 序言区\n%\n\\begin{document}\n% 正文\nFirst document. This is a simple example, with no extra parameters or packages included.\n\\end{document}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212183155.png)\n\n可以看到，LaTeX 已经对文本进行了格式化（如首行缩进）。下面我们仔细看一下上面这段代码每个部分的功能。\n\n- 代码的第一行声明了文档的类型，称为**类 (class)**。类控制文档的整体外观，不同类型的文档需要选择不同的类，比如，简历与论文需要不同的类。在这个例子中，类是 `article`，是最简单和最常见的 LaTeX 类。其他类型的文档可能需要使用不同的类，例如 `book` 或 `report`。\n\n- 在`\\begin {document}` 和 `\\end {document}`这两个标记之间写入文档内容。这部分就是文档的**主体 (body)**，你可以在此处开始编写和更改文本。要在 PDF 中查看更改的结果，必须首先编译文档。\n\n> 在 Overleaf 中只需单击 重新编译（Recompile）。还可以单击重新编译按钮旁边的小箭头，并将 “自动编译” 设置为 “开”，这样编辑文件时项目将会自动重新编译。\n> LATEX 源文件: 正文 + 命令 + 注解\n> 排版命令 (简称 命令): 反斜杠开头的字符串\n> 注解符: 百分号 %，注释的内容不会被显示出来\n> 文档类型: \\documentclass{...} (论文, 书籍, 幻灯片, 海报)\n> 环境: `\\begin{...}` 开头, `\\end{...}` 结尾\n\n\n## LaTex命令\n```latex\n\\command\n\\command[option]{arguments}\n```\n\n- 方括号中的是可选的 (称为选项)，花括号中的参数是必需的。\n\n```latex\n例: 一些常用命令\n\\documentcalss, \\title, \\author, \\date, \\usepackage\n\\begin{环境名}, \\end{环境名} 组成一个环境\n```\n\n- 定义新命令\n\n```latex\n\\newcommand{新命令}{命令内容}\n\\renewcommand{已有命令}{命令内容}\n\n例：\n\\newcommand{\\eps}{\\varepsilon} % $\\eps$ = ε\n```\n\n\n## 分组和环境\n- 分组\n   - 有些命令只对其参数起作用，如`\\textbf{abc}`\n   - 有些命令对后面所有的内容都起作用，这些命令通常也称为声明，如`\\bfseries`\n   - 可以利用大括号 (即分组) 来限制声明的作用范围\n\n```latex\nThis is \\textbf{bold face} style.    % bold face 粗体显示\nThis is \\bfseries bold face style.   % bold face style. 粗体显示\nThis is {\\bfseries bold face} style. % bold face 粗体显示\n```\n\n- 环境：某些具有特定格式的内容需要放在相应的环境中, 如表格，数学公式等\n\t- document 是 LaTeX 的一个最基本的环境，一篇文档有且只能有一个 document 环境\n\n```latex\n\\begin{环境名}\n.\n.\n.\n\\end{环境名}\n```\n\n## 文档的序言区\n在基本框架中，文本是在 `\\begin {document}` 命令之后输入的。在这个命令之前 `.tex` 文件中的所有内容都称为 **序言 (preamble)**。\n```latex\n\\documentclass[12pt, letterpaper]{article}\n\\usepackage[utf8]{inputenc}\n```\n\n-  位于源文件的最前面, 用于指定文档的整体结构和布局, 必须且只能选一种\n   - 常用文档类: article, book, beamer, ctexart, ctexbook, ctexbeamer. 常用选项:\n      - 10pt(缺省值)，11pt，12pt，指定基本字体的大小\n      - letterpaper(缺省值)，a4paper，a5paper，...  指定纸张的大小\n      - 单双面选项：oneside，twoside，openright，openany\n      - 数学公式：leqno (公式编号在左边)，fleqn (靠左显示行间公式)\n- 导言区用于放置**全局控制命令**，如：调用宏包，设置页面大小，...\n- 放在导言区的命令对整个文档都起作用\n\n> 更多有关 [页面大小和边距](https://www.overleaf.com/learn/Page_size_and_margins) 的信息，可以参阅这篇文章。\n\n`\\usepackage[utf8]{inputenc}`这行命令指定了文档的编码，可以省略或更改为其他编码，但建议使用 utf-8。除非特别需要其他编码，否则请将此行添加到序言中。\n\n## 添加标题、作者和日期\n要将标题、作者和日期添加到文档中，就必须**在序言中**（不是文章的主体中）添加下面三行。它们是：\n- `\\title{标题}`\n- `\\author{姓名}`\n   - `\\thanks{简介}`在 author 命令的大括号里添加这条命令，可以添加上标和脚注。如果你需要在文章中感谢一个机构，这个功能将非常有用。\n- `\\date{February 2021}`你可以手动输入日期，或使用 \\today 命令，以便在编译文档时自动更新日期。\n\n&nbsp;\n现在可以使用 `\\maketitle` 命令在文档上打印这些信息。这条命令应该写在文档 主体 (body) 中你想要打印标题的位置。示例：\n\n```latex\n\\documentclass[12pt, letterpaper, twoside]{article}\n\\usepackage[utf8]{inputenc}\n\n\\title{LaTeX Tutorial}\n\\author{Cheng Budong \\thanks{School of computer Science and Engineering}}\n\\date{December 2021}\n\n\\begin{document}\n\\maketitle\nWe have now added a title, author and date to our first \\LaTeX{} document!\n\\end{document}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212194706.png)\n\n## 换行，分段，分页\n- 换行：自然换行 (若需强制换行，可使用 `\\\\` 或 `\\linebreak`)\n   - 一般情况下, 不建议使用强制换行\n- 分段：一个空行或 `\\par`\n   - 建议使用空行进行分段，简洁直观\n- 分页：自然分页，若需 强制分页, 可用 `\\newpage`，`\\clearpage` 或 `\\pagebreak`\n   - 一般情况下，不建议使用强制分页\n- 行间距：行间距伸展因子 `\\baselinestretch` 或伸展命令 `\\linespread`\n```latex\n\\renewcommand{\\baselinestretch}{1.2}\n\\linespread{1.2}\n```\n\n- 段落间距和段落缩进：用自动设定的即可，英文每节的第一段首行不会自动缩进\n\n> 可以在这篇有关 [段落和换行](https://www.overleaf.com/learn/Paragraphs_and_new_lines) 的文章中找到更多信息。\n\n\n## 加粗、斜体和下划线\n- 加粗：在 LaTeX 中，加粗字体使用 `\\textbf{}` 命令。\n- 斜体：在 LaTeX 中，斜体使用 `\\textit{}` 命令。\n- 下划线：在 LaTeX 中，下划线使用 `\\underline{}` 命令。\n\n示例：\n```latex\nSome of the \\textbf{greatest}\nwere made by \\textbf{\\textit{accident}}.\ndiscoveries in \\underline{science}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212200351.png)\n\n\n## 引入宏包\n宏包可用于更改 LaTeX 文档的默认外观，或实现更多功能。\n\n- 宏包调用方法 (只能出现在导言区)  `\\usepackage[选项]{宏包名}`\n- 如果宏包不带选项, 则可以多个一起调用, 如: \n\n```latex\n\\usepackage{amsmath,amssymb,amsfonts}\n\\usepackage[pagebackref]{hyperref}\n\\usepackage[numbers,sort&compress]{natbib}\n```\n\n\n## 添加图片\nLaTeX本身不能管理图像，因此需要使用一个 包 (package)。在这个例子中，要实现在文档中添加图片，需要使用 graphicx 包。graphicx 包提供了新的命令`\\includegraphics{}`和`\\graphicspath{}`。\n\n- 支持的图片格式：pdf，jpg，png (pdfLaTeX 和 xeLaTeX 编译)\n   - eps 格式的图片，epstopdf 宏包, 自动将 eps 转换为 pdf\n- 图形文件名中可以含路径\n- 常用选项有\n   - width, height：指定图形的宽度和高度 (若只指定宽度或高度, 则按比例缩放)\n   - scale：缩放因子，如 scale=0.5\n\n添加图片的示例：\n```latex\n% 在序言区导入包\n\\usepackage{graphicx}\n\\graphicspath{{images/}} % 告诉LaTeX，这些图片保存在当前目录下名为images的文件夹中。\n\n% 在需要插入图片的地方写\n\\includegraphics[scale=0.5]{overleaf.png} % 将图像实际包含在文档中的命令，scale缩放因子\n```\n\n> 注意：在 Overleaf 中，你需要首先上传图片。有关更多详细信息，请参见有关[生成高分辨率和低分辨率图像](https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes#Generating_high-res_and_low-res_images)的内容。\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212204315.png)\n\n\n### 标题、标签和引用\n可以像下面这样，在 figure 环境中对图片添加标题、标签和引用。\n\n```latex\n\\begin{figure}[h]\n    \\centering\n    \\includegraphics[width=0.5\\textwidth]{overleaf}\n    \\caption{overleaf icon}\n    \\label{fig:icon}\n\\end{figure}\nAs you can see in the figure \\ref{fig:icon}.\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210237.png)\n\n在这个示例中，有三个重要的命令：\n\n- \\caption{overleaf icon}：此命令为图形设置标题。你可以将这条命令放置在图的上方或下方。\n- \\label{fig:icon}：如果你需要在文档中引用图像，请使用这条命令为图像设置标签。标签可以为图像编上号，并与下一个命令结合，对图片进行引用。\n- \\ref{fig:icon}：这条命令在编译后将显示替换为被引用图片对应的编号。\n\n> 将图像放置在 LaTeX 文档中时，应始终将它们放置在 figure 环境或类似环境中，以便 LaTeX 适配图像和文字。\n> 图片排版技巧：[图片的插入及排版方法](https://blog.csdn.net/qq_31347869/article/details/103832190)，\n\n---\n\n## 创建列表\n在 LaTeX 中创建列表非常简单。可以使用不同的环境来创建不同形式的列表。环境是我们文档中具有不同呈现形式的各个部分。它们以`\\begin{...}` 命令开始，以`\\end{...}`命令结束。\n\n&nbsp;\n列表主要有两种类型，**有序列表**和**无序列表**。分别使用不同的环境。\n\n### 无序列表\n无序列表是由 itemize 环境生成的。每个条目之前必须有 \\item，如下所示。默认情况下，各个条目用黑点表示。条目中的文本可以是任何长度。\n\n```latex\n\\begin{itemize}\n\\item[标签] 条目内容\n· · · · · ·\n\\end{itemize}\n```\n\n- 缺省的标签与层数有关，分别为：`·，-，∗`\n- 也可通过选项标签来指定标签\n- 不要标签：\\item \n\n无序列表示例：\n\n```latex\n\\begin{itemize}\n  \\item The individual entries are indicated with a black dot, a so-called bullet.\n  \\item The text in the entries may be of any length.\n\\end{itemize}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210954.png)\n\n### 有序列表\n有序列表在 enumerate 环境中创建，针对条目的语法与无序列表一致。与无序列表一样，每个条目前必须添加 \\item，它将自动生成标记该项目的数字，由从 1 开始。\n\n```latex\n\\begin{enumerate}\n\\item[标签] 条目内容\n· · · · · ·\n\\end{enumerate}\n```\n\n- 缺省标签为自动编号的符号，与层数有关，分别为:\n   - 第一层：阿拉伯数字后跟圆点: 1. 2.\n   - 第二层：圆括号包围的小写拉丁字母: (a) (b)\n   - 第三层：小写罗马数字后跟圆点: i. ii.\n   - 第四层：大写拉丁字母后跟圆点: A. B.\n- 高级列表功能：list 环境，enumitem 宏包\n\n\n有序列表示例：\n\n```latex\n\\begin{enumerate}\n  \\item This is the first entry in our list\n  \\item The list numbers increase with each entry we add\n\\end{enumerate}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212211202.png)\n\n---\n\n## 添加数学表达式\nLaTeX 中有两种模式用于数学表达式：**行内 (inline)模式**和**行间 (display)** 模式。行内模式编写的公式是文本中的一部分，行间模式编写的公式不在段落中，而是放在单独的行上。\n\n### 行内\n要在行内模式下添加数学表达式，可以使用以下定界符之一，它们作用相同。选择哪个完全取决于个人喜好，推荐第一种。\n\n```latex\n$ ... $\n\\(... \\)\n\\begin{math} ... \\end{math}\n```\n\n行内模式示例：\n\n```latex\nIn physics, the mass-energy equivalence is stated\nby the equation $E=mc^2$, discovered in 1905 by Albert Einstein.\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212213703.png)\n\n### 行间\n要在行间模式下显示数学公式，可以使用以下定界符之一。\n\n```latex\n\\[ ... \\] % displaymath 环境的简化形式\n$$ ··· $$ % 与上面等价, 但可用\\eqno 或 \\leqno 手工编号\n\\begin{displaymath} ... \\end{displaymath} % 不带编号的单行公式数学环境\n\\begin{equation} ... \\end{equation} % 带 自动编号 的单行公式数学环境\n```\n\n行间模式示例：\n\n```latex\nThe mass-energy equivalence is described by the famous equation\n\\[E=mc^2 \\]\ndiscovered in 1905 by Albert Einstein. In natural units ($c = 1$), \nthe formula expresses the identity\n\\begin{equation}\nE=m\n\\end{equation}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212215015.png)\n\n> 重要说明：equation* 环境是由外部软件包提供的，请参阅 [amsmath文章](https://www.overleaf.com/learn/Aligning_equations)。\n> [不鼓励](https://texfaq.org/FAQ-dolldoll) 使用 \\$\\$ \\$\\$，因为它会产生不一致的间距，而且可能不适用于某些数学软件包。\n> 相关资料：[Latex所有常用数学符号整理](https://blog.csdn.net/qq_17783559/article/details/88181836)，[在线LaTeX公式编辑器](https://www.latexlive.com/)\n\n---\n\n## 基本框架\n### 摘要\n在科学文献中，通常会在摘要部分里面简述论文的主要内容。在 LaTeX 中有针对摘要部分设计的环境。摘要环境会将文本以特殊格式放在文档顶部。\n\n```latex\n\\begin{document}\n\n\\begin{abstract}\nThis is a simple paragraph at the beginning of the document.\nA brief introduction about the main subject.\n\\end{abstract}\n\\end{document}\n```\n\n### 章节命令\n用来组织文档的命令因文档类型而异，最简单的组织形式是分节，它对所有文档格式均可用。\n\n```latex\n\\chapter{First Chapter}\n\n\\section{Introduction}\nThis is the first section.\n\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortisfacilisis sem. \nNullam nec mi et neque pharetra sollicitudin. Praesent imperdietmi nec ante.\nDonec ullamcorper, felis non sodales...\n\n\\section{Second Section}\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem. \nNullam nec mi et neque pharetra sollicitudin. Praesent imperdiet mi necante...\n\n\\subsection{First Subsection}\nPraesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...\n\n\\section*{Unnumbered Section}\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222432.png)\n\n命令 `\\section{}` 标记一个新分节的开始，在大括号内设置标题。分节编号是自动的，也可以通过在命令中加一个`*`来禁用编号，像这样：`\\section*{}`。也可以有 \\subsection{}，甚至 \\subsubsection{}。下面列出了基本的标题深度级别：\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222849.png)\n\n> 请注意，\\part 和 \\chapter 仅在 report 和 book 类中可用。\n> 有关文档结构的更完整讨论，请参阅 [这篇文章](https://www.overleaf.com/learn/Sections_and_chapters)。\n\n### 参考文献\n1. **thebibliography形式**\n这种形式不需要额外的文件，参考文献信息直接在 thebibliography 环境内填写。\n\n```latex\n\\begin{thebibliography}{编号样本}\n\\bibitem[编号]{标签} 文献条目\n\\bibitem[编号]{标签} 文献条目\n.\n.\n.\n\\end{thebibliography}\n```\n\n- “编号”：通常省略，系统自动按顺序编号，如 [1]，[2]，...\n- “编号样本”：指定用多大地方显示 “编号”，一般为数字，位数等于最大编号的位数\n-  标签 ：文献的 id，可以由字母，数字和除逗号外的符号组成\n   - 每个文献的标签必须唯一 (互不相同)\n   - 文献的引用：\\cite{标签}，\\cite{标签1，标签2}\n- 文献条目：论文 (作者，标题，期刊，卷期，年代，页码)，书籍 (作者，书名，出版社，年代)\n- 参考文献的高级定制: natbib 宏包 (详细用法参见宏包手册)\n\n\n示例：\n\n```latex\n\\begin{thebibliography}{00}\n\\bibitem{b2} L. Bariah, D. Shehada and E. Salaha, ``Recent Advancesin VANET Security:\nA Survey,\" Vehicular Technology Conference. 2016.\n\n\\bibitem{b3} S. A. A. Shah, E. Ahmed, F. Xia, A. Karim, M. Shiraz and R. M. Noor, \n``Adaptive beaconing approaches for vehicular ad hoc networks: A survey\", \nIEEE Systems Journal, vol. 12, no. 2, pp. 1263-1277, 2018.\n\\end{thebibliography}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212224152.png)\n\n\n2. **Bibtex格式**\n\n这种方式是把参考文献写在`.bib`文件中，然后和`.tex`放在同一文件夹下，`.tex`直接引用`.bib`中的参考文献。这种方法比较简单，不需要你根据期刊的格式每个都改动，只需要你找到相关的文件，按照Bibtex格式放到`.bib`文件中，在`tex`文件中会按照指定的参考文献格式现实。\n\n```latex\n% 从google学术或者百度学术上找到参考文采用，然后引用->导出Bibtex格式，粘贴到.bib文件中\n@article{greenwade93,\n    author  = \"George D. Greenwade\",\n    title   = \"The {C}omprehensive {T}ex {A}rchive {N}etwork ({CTAN})\",\n    year    = \"1993\",\n    journal = \"TUGBoat\",\n    volume  = \"14\",\n    number  = \"3\",\n    pages   = \"342--351\"\n}\n```\n\n```latex\n\\bibliographystyle{ieeetr} %设置参考文献类型\n\\bibliography{sample} %声明参考文献文件名称\n```\n![Bibtex格式示例](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212230200.png)\n\n> 参考资料：[LaTeX 参考文献及格式调整](https://zymin.cn/arcticle/latex-reference-with-bib.html)\n\n---\n\n## 创建表格\n### 一个简单的表格\n\n```latex\n\\begin{center}\n\\begin{tabular}{ c c c }\n cell1 & cell2 & cell3 \\\\\n cell4 & cell5 & cell6 \\\\\n cell7 & cell8 & cell9\n\\end{tabular}\n\\end{center}\n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231756.png)\n\n- `tabular` 环境是创建表的默认 LaTeX 方法。必须为此环境指定一个参数，这个例子里是 `{c c c}`。这告诉 LaTeX，表格将有三列，每列中的文本居中。你还可以使用 `r` 将文本向右对齐，使用 `l` 进行左对齐。\n- 符号 `&` 是分隔符，每行中的分隔符始终少于列数。要转到表格的下一行，需要使用换行命令 `\\\\`。\n- 将整个表包装在 `center` 环境中，以让它出现在页面的中心。\n\n\n### 添加边框\n`tabular` 环境很灵活，可以在每列之间放置分隔线。\n\n```latex\n\\begin{center}\n\\begin{tabular}{ |c|c|c| }\n \\hline\n cell1 & cell2 & cell3 \\\\\n cell4 & cell5 & cell6 \\\\\n cell7 & cell8 & cell9 \\\\\n \\hline\n\\end{tabular}\n\\end{center}\n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231902.png)\n\n使用水平线命令 `\\hline` 和垂直线参数 `|` 来添加边框。\n\n- `{|c|c|c|}`：这声明表中将会有由垂直线分隔的三列。`|` 符号指定这些列应由垂直线分隔。\n- `\\hline`：这条命令将插入一条水平线。这个示例中，我们在表格的顶部和底部加入了水平线。\\hline 的使用次数没有限制。\n\n\n> 可以借助 [TablesGenerator.com](https://www.tablesgenerator.com/) 这样的在线工具导出表格的 LaTeX 代码。_“文件”>“粘贴表数据”_ 选项从电子表格软件粘贴数据。\n\n### 标题、标签和引用\n可以使用与图片几乎相同的方式来为表格添加标题、标签和引用。唯一的区别是，使用`table`环境代替了`figure`环境。\n\n```latex\nTable \\ref{table:data} is an example of referenced \\LaTeX{} elements.\n\n\\begin{table}[h!]\n\\centering\n\\begin{tabular}{||c c c c||}\n \\hline\n Col1 & Col2 & Col2 & Col3 \\\\ [0.5ex]\n \\hline\\hline\n 1 & 6 & 87837 & 787 \\\\\n 2 & 7 & 78 & 5415 \\\\\n 3 & 545 & 778 & 7507 \\\\\n 4 & 545 & 18744 & 7560 \\\\\n 5 & 88 & 788 & 6344 \\\\ [1ex]\n \\hline\n\\end{tabular}\n\\caption{Table to test captions and labels}\n\\label{table:data}\n\\end{table}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212232247.png)\n\n---\n\n## 添加算法伪代码\n在LaTeX中写伪代码也是需要导入外部宏包，常用的宏包有`algorithms`、`algorithmicx` 和 `algorithm2e`。\n\n&nbsp;\n`algorithms`和`algorithmicx`一般一起使用， 简易但可定制性不高。`algorithm2e`相对复杂些，但是操作性更高，可定制性更强，所以这里主要详细介绍`algorithm2e`的使用。\n\n### algorithms和algorithmicx示例\n\n```latex\n\\begin{algorithm}\n  \\renewcommand{\\algorithmicrequire}{\\textbf{Input:}}\n\t\\renewcommand{\\algorithmicensure}{\\textbf{Output:}}\n\t\\caption{Calculate $y = x^n$} \n\t\\label{alg3} \n\t\\begin{algorithmic}\n\t\t\\REQUIRE $n \\geq 0 \\vee x \\neq 0$ \n\t\t\\ENSURE $y = x^n$ \n\t\t\\STATE $y \\gets 1$ \n\t\t\\IF{$n < 0$} \n\t\t\\STATE $X \\gets 1 / x$ \n\t\t\\STATE $N \\gets -n$ \n\t\t\\ELSE \n\t\t\\STATE $X \\gets x$ \n\t\t\\STATE $N \\gets n$ \n\t\t\\ENDIF \n\t\t\\WHILE{$N \\neq 0$} \n\t\t\\IF{$N$ is even} \n\t\t\\STATE $X \\gets X \\times X$ \n\t\t\\STATE $N \\gets N / 2$ \n\t\t\\ELSE[$N$ is odd] \\STATE $y \\gets y \\times X$ \n\t\t\\STATE $N \\gets N - 1$ \n\t\t\\ENDIF \n\t\t\\ENDWHILE \n\t\\end{algorithmic} \n\\end{algorithm}\n```\n\n> 注意：\n> 要在序言区引入宏包：\\usepackage{algorithm, algorithmic}\n> \\renewcommand{\\algorithmicrequire}{\\textbf{Input:}} 将官方的require关键字换成常用的input\n> \\renewcommand{\\algorithmicensure}{\\textbf{Output:}} 将官方的ensure关键字换成常用的output\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211213105605.png)\n\n### algorithm2e\n\n1. **第一个示例**\n\n\n```latex\n\\documentclass{article}\n\\usepackage[linesnumbered,ruled]{algorithm2e} % 导入宏包\n\n\\begin{document}\n\n\\begin{algorithm} % 伪代码开始\n\t\\caption{identify Row Context}  \n  \\KwIn{$r_i$, $Backgrd(T_i)$=${T_1,T_2,\\ldots ,T_n}$ and similarity threshold $\\theta_r$}  \n  \\KwOut{$con(r_i)$}  \n  $con(r_i)= \\Phi$\\;  \n  \\For{$j=1;j \\le n;j \\ne i$}  \n  {  \n    float $maxSim=0$ \\;  \n    $r^{maxSim}=null$ \\;  \n    \\While{not end of $T_j$}  \n    {  \n      compute Jaro($r_i,r_m$)($r_m\\in T_j$) \\;  \n      \\If{$(Jaro(r_i,r_m) \\ge \\theta_r)\\wedge (Jaro(r_i,r_m)\\ge r^{maxSim})$}  \n      {  \n        replace $r^{maxSim}$ with $r_m$ \\;  \n      }  \n    }  \n    $con(r_i)=con(r_i)\\cup {r^{maxSim}}$ \\;  \n  }  \n  return $con(r_i)$ \\;\n\\end{algorithm}   % 伪代码结束\n\n\\end{document} \n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211213112018.png)\n\n> **注意：**每一行的结尾必须以 `\\;` 结束, 只有那些以宏命令开始的不应该以 `\\;` 结束, 例如在此示例中的 `\\caption`、`\\KwIn` 、`\\KwOut`属于宏命令, 不需要以 `\\;` 结尾. \n\n\n2. **常用环境**\n- algorithm：这是最常用的环境\n- algorithm*：与前者一样, 但它用于两列文本中, 使算法跨两列\n\n\n3. **基本关键字**\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211213142106.png)\n\n\n4. **算法布局**\n\n在引入宏包时，在option选项中加入了 linesnumbered 和 ruled，所以在算法伪代码中会有行编号和上下尺（即三线表样式）。当然，外部的封装环境不止 ruled 一种选项, 也可以选择完全封闭的选项亦或者完全没有外部边框的选项。\n\n- boxed：将算法封装在框中\n- boxruled：用方框将算法环绕，将标题放在上方，并在标题后添加一行\n- ruled：在顶部和底部都有一条线的算法。请注意，标题不再位于算法下方，而是在算法开始时设置\n- algoruled：如上所述，但在尺后留有多余的空格\n- tworuled：tworuled 的行为就 ruled 的一样，但标题后面没有加一行\n- plain：默认值，无功能\n\n\n5. **第二个示例**\n\n\n```latex\n\\documentclass{article}\n\\usepackage[linesnumbered,ruled]{algorithm2e}\n\\begin{document}\n\\begin{algorithm}\n  \\renewcommand{\\algorithmcfname}{Pseudo code} % 这句如果写在引言区，将对全部算法生效\n  \\SetKwData{Left}{left}\\SetKwData{This}{this}\\SetKwData{Up}{up}\n  \\SetKwFunction{Union}{Union}\\SetKwFunction{FindCompress}{FindCompress}\n  \\SetKwInOut{Input}{input}\\SetKwInOut{Output}{output}\n  \\Input{A bitmap $Im$ of size $w\\times l$}\n  \\Output{A partition of the bitmap}\n  \\BlankLine\n  \\emph{special treatment of the first line}\\;\n  \\For{$i\\leftarrow 2$ \\KwTo $l$}{\n    \\emph{special treatment of the first element of line $i$}\\;\n    \\For{$j\\leftarrow 2$ \\KwTo $w$}{\\label{forins}\n      \\Left$\\leftarrow$ \\FindCompress{$Im[i,j-1]$}\\;\n      \\Up$\\leftarrow$ \\FindCompress{$Im[i-1,]$}\\;\n      \\This$\\leftarrow$ \\FindCompress{$Im[i,j]$}\\;\n      \\If(\\tcp*[h]{O(\\Left,\\This)==1}){\\Left compatible with \\This}{\\label{lt}\n        \\lIf{\\Left $<$ \\This}{\\Union{\\Left,\\This}}\n        \\lElse{\\Union{\\This,\\Left}}\n      }\n    }\n    \\lForEach{element $e$ of the line $i$}{\\FindCompress{p}}\n  }\n  \\caption{disjoint decomposition}\n  \\label{algo_disjdecomp}\n\\end{algorithm}\n\\end{document}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211213141730.png)\n\n---\n\n# Overleaf写LaTeX\n## Overleaf网站：[链接](https://cn.overleaf.com/project)\nOverleaf是一个使用LaTeX进行多人协同编辑的平台，可以免费注册和使用，不用下载LaTeX软件，是最为著名的LaTeX在线协作系统。主要特色是有LaTeX插件，编辑功能十分完善，有实时预览（即编即看，无需手动编译）的功能。科研工作者可以在各大期刊的网站上下载到其Overleaf模板，进行论文写作。\n\n![Overleaf项目首页](https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf%E9%A6%96%E9%A1%B5.png)\n\n## 创建项目\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212153121.png)\n\n\n- **空白项目**：一个最基本的.tex文档，适用于从零开始定制个人性化的板式。\n\n![空白项目](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154608.png)\n\n\n- **样例项目**：一个通用的模板，包含了一篇论文的基本结构、基础样式，作者可以在此模板上填充自己的内容，适用于快速开始一篇论文的撰写。\n\n![带模板项目](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154413.png)\n\n\n- **上传项目**：通过其它地方下载的模板创建项目，适用于使用所投期刊提供的模板撰写论文。\n\n\n- **从模板库导入**：通过Overleaf平台的模板库中寻找模板，里面有各式各样的模板。\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212160030.png)\n\n## 编辑页面介绍\n\n![页面介绍](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233704.png)\n\n## 上传图片\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf_uploadFig.png)\n\n## 下载完成的文档\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233900.png)\n\n# 学习资料\n\n- LaTeX工作室在知识库：[链接](https://www.latexstudio.net/texdoc/#/)\n- 华东师范大学潘建瑜老师讲义：[链接](http://math.ecnu.edu.cn/~jypan/Teaching/Latex/)\n- 简短的 LaTeX2e 介绍：[链接](https://mirrors.tuna.tsinghua.edu.cn/CTAN/info/lshort/chinese/lshort-zh-cn.pdf)\n- algorithm2e 宏包官方文档：[链接](http://tug.ctan.org/macros/latex/contrib/algorithm2e/doc/algorithm2e.pdf)\n","source":"_posts/LaTeX的使用.md","raw":"---\ntitle: LaTeX的使用\ndate: 2021-12-13 14:33:20\nupdate: \nimg: \ntop: true\ncover: true\ncoverImg: /medias/coverImg/coverImg1.jpg\ntoc: true\nmathjax: true\nsummary: \ntags: \n- Latex\n- overleaf\n- 论文写作\ncategories: 软件与工具\n---\n\n# LaTeX基础\n\n## TEX是什么\nTEX 是高德纳 (Donald E. Knuth) 为排版文字和数学公式而开发的程序。\n\n- TEX 系统提供了 300 + 600 多条基本的排版命令 \n- TEX 是目前公认的数学公式排版最好的排版语言\n- TEX 是免费的 \n- TEX 的名字来自大写的希腊字母 (τ, ϵ, χ)，意思是“科技”和“艺术” \n\n## LaTeX是什么\nLaTeX 是一个写作工具，可以用于创建具有专业排版的文档。它基于所见即所得的思想，即写作者只需要关注文档的内容，而计算机负责将其格式化。用户不再需要像 Word 中那样，在页面上用空格来控制格式，而是只需要输入纯文本，让 LaTeX 处理剩下的一切。\n>  LaTeX 是一种使用 TEX 程序作为排版引擎的格式，可以粗略地将它理解成是对 TEX 的一层封装。 \n\n## LaTeX的用处\nLaTeX 被广泛应用于科学文档、书籍以及许多其他出版物。它不仅可以创建精美的排版文档，而且还使得用户可以很快速地处理复杂的排版问题，比如输入数学公式、创建目录、管理引用、创建书目、保持布局一致等等。由于可用的开源软件包数量众多，因此 LaTeX 有无限的可能性。这些软件包赋予了用户更多的能力，例如添加脚注，绘制原理图，创建表格等。\n\n&nbsp;\n人们使用 LaTeX 的最重要原因之一就是它分离了文档的内容与样式。这意味着你只需要编写文档的内容，我们就可以轻松更改其外观。同样，你也可以创建一个文档模板，用它来统一许多不同文档的外观，这样学术期刊可以创建投稿模板。这些模板具有预制的布局，只需要往里面添加内容即可。实际上，LaTeX 有数百种模板，覆盖从简历到幻灯片的所有内容。\n\n## LaTeX的优点\n- LaTeX 特点\n   - 专注于内容撰写，很少操心文档的版面设计\n   - 自动编号：章节、图表、公式定理、参考文献 ·······\n   - 自动生成目录、索引\n   - 公式、定理、参考文献、插图、页码等可以交叉引用\n   - 可以通过各种宏包扩展其功能, 实现各种特殊要求\n- LaTeX VS. Word\n   - Word 简单易用，所见即所得，普通办公文档建议用 Word\n   - LaTeX 输出美观，质量高，科技排版 (特别是数学) 推荐使用 LaTeX\n   - LaTeX 能实现 Word 的所有功能，定制性高，但易用性不如 Word\n\n\n## 写LaTeX的工具\n### TEX的发行版\n- Windows 系统：TeXLive (推荐)，MiKTeX，CTEX 套装 (不推荐)\n- Unix/Linux 系统：TeXLive\n- Mac OS 系统：TeXLive，MacTeX\n\n### 下载和安装\n- TeXLive : [http://tug.org/texlive/](http://tug.org/texlive/) (大而全，全部宏包)\n- 编辑器: WinEdt, TeXworks, TeXmaker, TeXStudio, vim, emacs, ...\n- 安装演示: 以 [TeXLive 2017](http://math.ecnu.edu.cn/~jypan/Teaching/Latex/Install/install_texlive_gb2312.html) 为例\n\n### 在线平台[Overleaf](https://cn.overleaf.com/)\n本文章接下来对LaTeX的使用介绍主要以该平台为例。\n\n---\n\n# LaTeX排版\n## LaTeX文稿的排版过程\n1. **编写源文件**：tex 源文件为纯文本文件，以 `.tex` 为扩展名\n\t- 可以使用任何文本编辑器编写, 如: WinEdt, EditPlus, Vi, Emacs, 推荐 WinEdt，专门针对 tex 开发, 提供许多便捷功能, 有助于提高排版效率\n\n2. **编译**：用 `pdflatex` (英文文档) 或 `xelatex` (中文文档) 编译，生成相应的 pdf 文件\n\n![来源：华东师范大学潘建瑜老师的课件](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212181900.png)\n\n\n## 第一个LaTeX文件\n创建一个新的 LaTeX 项目。你可以在自己的电脑上创建 `.tex` 文件，也可以在 Overleaf 中启动新项目。让我们从最简单的示例开始：\n```latex\n\\documentclass{article} %指定文档类型\n% 序言区\n%\n\\begin{document}\n% 正文\nFirst document. This is a simple example, with no extra parameters or packages included.\n\\end{document}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212183155.png)\n\n可以看到，LaTeX 已经对文本进行了格式化（如首行缩进）。下面我们仔细看一下上面这段代码每个部分的功能。\n\n- 代码的第一行声明了文档的类型，称为**类 (class)**。类控制文档的整体外观，不同类型的文档需要选择不同的类，比如，简历与论文需要不同的类。在这个例子中，类是 `article`，是最简单和最常见的 LaTeX 类。其他类型的文档可能需要使用不同的类，例如 `book` 或 `report`。\n\n- 在`\\begin {document}` 和 `\\end {document}`这两个标记之间写入文档内容。这部分就是文档的**主体 (body)**，你可以在此处开始编写和更改文本。要在 PDF 中查看更改的结果，必须首先编译文档。\n\n> 在 Overleaf 中只需单击 重新编译（Recompile）。还可以单击重新编译按钮旁边的小箭头，并将 “自动编译” 设置为 “开”，这样编辑文件时项目将会自动重新编译。\n> LATEX 源文件: 正文 + 命令 + 注解\n> 排版命令 (简称 命令): 反斜杠开头的字符串\n> 注解符: 百分号 %，注释的内容不会被显示出来\n> 文档类型: \\documentclass{...} (论文, 书籍, 幻灯片, 海报)\n> 环境: `\\begin{...}` 开头, `\\end{...}` 结尾\n\n\n## LaTex命令\n```latex\n\\command\n\\command[option]{arguments}\n```\n\n- 方括号中的是可选的 (称为选项)，花括号中的参数是必需的。\n\n```latex\n例: 一些常用命令\n\\documentcalss, \\title, \\author, \\date, \\usepackage\n\\begin{环境名}, \\end{环境名} 组成一个环境\n```\n\n- 定义新命令\n\n```latex\n\\newcommand{新命令}{命令内容}\n\\renewcommand{已有命令}{命令内容}\n\n例：\n\\newcommand{\\eps}{\\varepsilon} % $\\eps$ = ε\n```\n\n\n## 分组和环境\n- 分组\n   - 有些命令只对其参数起作用，如`\\textbf{abc}`\n   - 有些命令对后面所有的内容都起作用，这些命令通常也称为声明，如`\\bfseries`\n   - 可以利用大括号 (即分组) 来限制声明的作用范围\n\n```latex\nThis is \\textbf{bold face} style.    % bold face 粗体显示\nThis is \\bfseries bold face style.   % bold face style. 粗体显示\nThis is {\\bfseries bold face} style. % bold face 粗体显示\n```\n\n- 环境：某些具有特定格式的内容需要放在相应的环境中, 如表格，数学公式等\n\t- document 是 LaTeX 的一个最基本的环境，一篇文档有且只能有一个 document 环境\n\n```latex\n\\begin{环境名}\n.\n.\n.\n\\end{环境名}\n```\n\n## 文档的序言区\n在基本框架中，文本是在 `\\begin {document}` 命令之后输入的。在这个命令之前 `.tex` 文件中的所有内容都称为 **序言 (preamble)**。\n```latex\n\\documentclass[12pt, letterpaper]{article}\n\\usepackage[utf8]{inputenc}\n```\n\n-  位于源文件的最前面, 用于指定文档的整体结构和布局, 必须且只能选一种\n   - 常用文档类: article, book, beamer, ctexart, ctexbook, ctexbeamer. 常用选项:\n      - 10pt(缺省值)，11pt，12pt，指定基本字体的大小\n      - letterpaper(缺省值)，a4paper，a5paper，...  指定纸张的大小\n      - 单双面选项：oneside，twoside，openright，openany\n      - 数学公式：leqno (公式编号在左边)，fleqn (靠左显示行间公式)\n- 导言区用于放置**全局控制命令**，如：调用宏包，设置页面大小，...\n- 放在导言区的命令对整个文档都起作用\n\n> 更多有关 [页面大小和边距](https://www.overleaf.com/learn/Page_size_and_margins) 的信息，可以参阅这篇文章。\n\n`\\usepackage[utf8]{inputenc}`这行命令指定了文档的编码，可以省略或更改为其他编码，但建议使用 utf-8。除非特别需要其他编码，否则请将此行添加到序言中。\n\n## 添加标题、作者和日期\n要将标题、作者和日期添加到文档中，就必须**在序言中**（不是文章的主体中）添加下面三行。它们是：\n- `\\title{标题}`\n- `\\author{姓名}`\n   - `\\thanks{简介}`在 author 命令的大括号里添加这条命令，可以添加上标和脚注。如果你需要在文章中感谢一个机构，这个功能将非常有用。\n- `\\date{February 2021}`你可以手动输入日期，或使用 \\today 命令，以便在编译文档时自动更新日期。\n\n&nbsp;\n现在可以使用 `\\maketitle` 命令在文档上打印这些信息。这条命令应该写在文档 主体 (body) 中你想要打印标题的位置。示例：\n\n```latex\n\\documentclass[12pt, letterpaper, twoside]{article}\n\\usepackage[utf8]{inputenc}\n\n\\title{LaTeX Tutorial}\n\\author{Cheng Budong \\thanks{School of computer Science and Engineering}}\n\\date{December 2021}\n\n\\begin{document}\n\\maketitle\nWe have now added a title, author and date to our first \\LaTeX{} document!\n\\end{document}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212194706.png)\n\n## 换行，分段，分页\n- 换行：自然换行 (若需强制换行，可使用 `\\\\` 或 `\\linebreak`)\n   - 一般情况下, 不建议使用强制换行\n- 分段：一个空行或 `\\par`\n   - 建议使用空行进行分段，简洁直观\n- 分页：自然分页，若需 强制分页, 可用 `\\newpage`，`\\clearpage` 或 `\\pagebreak`\n   - 一般情况下，不建议使用强制分页\n- 行间距：行间距伸展因子 `\\baselinestretch` 或伸展命令 `\\linespread`\n```latex\n\\renewcommand{\\baselinestretch}{1.2}\n\\linespread{1.2}\n```\n\n- 段落间距和段落缩进：用自动设定的即可，英文每节的第一段首行不会自动缩进\n\n> 可以在这篇有关 [段落和换行](https://www.overleaf.com/learn/Paragraphs_and_new_lines) 的文章中找到更多信息。\n\n\n## 加粗、斜体和下划线\n- 加粗：在 LaTeX 中，加粗字体使用 `\\textbf{}` 命令。\n- 斜体：在 LaTeX 中，斜体使用 `\\textit{}` 命令。\n- 下划线：在 LaTeX 中，下划线使用 `\\underline{}` 命令。\n\n示例：\n```latex\nSome of the \\textbf{greatest}\nwere made by \\textbf{\\textit{accident}}.\ndiscoveries in \\underline{science}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212200351.png)\n\n\n## 引入宏包\n宏包可用于更改 LaTeX 文档的默认外观，或实现更多功能。\n\n- 宏包调用方法 (只能出现在导言区)  `\\usepackage[选项]{宏包名}`\n- 如果宏包不带选项, 则可以多个一起调用, 如: \n\n```latex\n\\usepackage{amsmath,amssymb,amsfonts}\n\\usepackage[pagebackref]{hyperref}\n\\usepackage[numbers,sort&compress]{natbib}\n```\n\n\n## 添加图片\nLaTeX本身不能管理图像，因此需要使用一个 包 (package)。在这个例子中，要实现在文档中添加图片，需要使用 graphicx 包。graphicx 包提供了新的命令`\\includegraphics{}`和`\\graphicspath{}`。\n\n- 支持的图片格式：pdf，jpg，png (pdfLaTeX 和 xeLaTeX 编译)\n   - eps 格式的图片，epstopdf 宏包, 自动将 eps 转换为 pdf\n- 图形文件名中可以含路径\n- 常用选项有\n   - width, height：指定图形的宽度和高度 (若只指定宽度或高度, 则按比例缩放)\n   - scale：缩放因子，如 scale=0.5\n\n添加图片的示例：\n```latex\n% 在序言区导入包\n\\usepackage{graphicx}\n\\graphicspath{{images/}} % 告诉LaTeX，这些图片保存在当前目录下名为images的文件夹中。\n\n% 在需要插入图片的地方写\n\\includegraphics[scale=0.5]{overleaf.png} % 将图像实际包含在文档中的命令，scale缩放因子\n```\n\n> 注意：在 Overleaf 中，你需要首先上传图片。有关更多详细信息，请参见有关[生成高分辨率和低分辨率图像](https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes#Generating_high-res_and_low-res_images)的内容。\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212204315.png)\n\n\n### 标题、标签和引用\n可以像下面这样，在 figure 环境中对图片添加标题、标签和引用。\n\n```latex\n\\begin{figure}[h]\n    \\centering\n    \\includegraphics[width=0.5\\textwidth]{overleaf}\n    \\caption{overleaf icon}\n    \\label{fig:icon}\n\\end{figure}\nAs you can see in the figure \\ref{fig:icon}.\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210237.png)\n\n在这个示例中，有三个重要的命令：\n\n- \\caption{overleaf icon}：此命令为图形设置标题。你可以将这条命令放置在图的上方或下方。\n- \\label{fig:icon}：如果你需要在文档中引用图像，请使用这条命令为图像设置标签。标签可以为图像编上号，并与下一个命令结合，对图片进行引用。\n- \\ref{fig:icon}：这条命令在编译后将显示替换为被引用图片对应的编号。\n\n> 将图像放置在 LaTeX 文档中时，应始终将它们放置在 figure 环境或类似环境中，以便 LaTeX 适配图像和文字。\n> 图片排版技巧：[图片的插入及排版方法](https://blog.csdn.net/qq_31347869/article/details/103832190)，\n\n---\n\n## 创建列表\n在 LaTeX 中创建列表非常简单。可以使用不同的环境来创建不同形式的列表。环境是我们文档中具有不同呈现形式的各个部分。它们以`\\begin{...}` 命令开始，以`\\end{...}`命令结束。\n\n&nbsp;\n列表主要有两种类型，**有序列表**和**无序列表**。分别使用不同的环境。\n\n### 无序列表\n无序列表是由 itemize 环境生成的。每个条目之前必须有 \\item，如下所示。默认情况下，各个条目用黑点表示。条目中的文本可以是任何长度。\n\n```latex\n\\begin{itemize}\n\\item[标签] 条目内容\n· · · · · ·\n\\end{itemize}\n```\n\n- 缺省的标签与层数有关，分别为：`·，-，∗`\n- 也可通过选项标签来指定标签\n- 不要标签：\\item \n\n无序列表示例：\n\n```latex\n\\begin{itemize}\n  \\item The individual entries are indicated with a black dot, a so-called bullet.\n  \\item The text in the entries may be of any length.\n\\end{itemize}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210954.png)\n\n### 有序列表\n有序列表在 enumerate 环境中创建，针对条目的语法与无序列表一致。与无序列表一样，每个条目前必须添加 \\item，它将自动生成标记该项目的数字，由从 1 开始。\n\n```latex\n\\begin{enumerate}\n\\item[标签] 条目内容\n· · · · · ·\n\\end{enumerate}\n```\n\n- 缺省标签为自动编号的符号，与层数有关，分别为:\n   - 第一层：阿拉伯数字后跟圆点: 1. 2.\n   - 第二层：圆括号包围的小写拉丁字母: (a) (b)\n   - 第三层：小写罗马数字后跟圆点: i. ii.\n   - 第四层：大写拉丁字母后跟圆点: A. B.\n- 高级列表功能：list 环境，enumitem 宏包\n\n\n有序列表示例：\n\n```latex\n\\begin{enumerate}\n  \\item This is the first entry in our list\n  \\item The list numbers increase with each entry we add\n\\end{enumerate}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212211202.png)\n\n---\n\n## 添加数学表达式\nLaTeX 中有两种模式用于数学表达式：**行内 (inline)模式**和**行间 (display)** 模式。行内模式编写的公式是文本中的一部分，行间模式编写的公式不在段落中，而是放在单独的行上。\n\n### 行内\n要在行内模式下添加数学表达式，可以使用以下定界符之一，它们作用相同。选择哪个完全取决于个人喜好，推荐第一种。\n\n```latex\n$ ... $\n\\(... \\)\n\\begin{math} ... \\end{math}\n```\n\n行内模式示例：\n\n```latex\nIn physics, the mass-energy equivalence is stated\nby the equation $E=mc^2$, discovered in 1905 by Albert Einstein.\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212213703.png)\n\n### 行间\n要在行间模式下显示数学公式，可以使用以下定界符之一。\n\n```latex\n\\[ ... \\] % displaymath 环境的简化形式\n$$ ··· $$ % 与上面等价, 但可用\\eqno 或 \\leqno 手工编号\n\\begin{displaymath} ... \\end{displaymath} % 不带编号的单行公式数学环境\n\\begin{equation} ... \\end{equation} % 带 自动编号 的单行公式数学环境\n```\n\n行间模式示例：\n\n```latex\nThe mass-energy equivalence is described by the famous equation\n\\[E=mc^2 \\]\ndiscovered in 1905 by Albert Einstein. In natural units ($c = 1$), \nthe formula expresses the identity\n\\begin{equation}\nE=m\n\\end{equation}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212215015.png)\n\n> 重要说明：equation* 环境是由外部软件包提供的，请参阅 [amsmath文章](https://www.overleaf.com/learn/Aligning_equations)。\n> [不鼓励](https://texfaq.org/FAQ-dolldoll) 使用 \\$\\$ \\$\\$，因为它会产生不一致的间距，而且可能不适用于某些数学软件包。\n> 相关资料：[Latex所有常用数学符号整理](https://blog.csdn.net/qq_17783559/article/details/88181836)，[在线LaTeX公式编辑器](https://www.latexlive.com/)\n\n---\n\n## 基本框架\n### 摘要\n在科学文献中，通常会在摘要部分里面简述论文的主要内容。在 LaTeX 中有针对摘要部分设计的环境。摘要环境会将文本以特殊格式放在文档顶部。\n\n```latex\n\\begin{document}\n\n\\begin{abstract}\nThis is a simple paragraph at the beginning of the document.\nA brief introduction about the main subject.\n\\end{abstract}\n\\end{document}\n```\n\n### 章节命令\n用来组织文档的命令因文档类型而异，最简单的组织形式是分节，它对所有文档格式均可用。\n\n```latex\n\\chapter{First Chapter}\n\n\\section{Introduction}\nThis is the first section.\n\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortisfacilisis sem. \nNullam nec mi et neque pharetra sollicitudin. Praesent imperdietmi nec ante.\nDonec ullamcorper, felis non sodales...\n\n\\section{Second Section}\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem. \nNullam nec mi et neque pharetra sollicitudin. Praesent imperdiet mi necante...\n\n\\subsection{First Subsection}\nPraesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...\n\n\\section*{Unnumbered Section}\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222432.png)\n\n命令 `\\section{}` 标记一个新分节的开始，在大括号内设置标题。分节编号是自动的，也可以通过在命令中加一个`*`来禁用编号，像这样：`\\section*{}`。也可以有 \\subsection{}，甚至 \\subsubsection{}。下面列出了基本的标题深度级别：\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222849.png)\n\n> 请注意，\\part 和 \\chapter 仅在 report 和 book 类中可用。\n> 有关文档结构的更完整讨论，请参阅 [这篇文章](https://www.overleaf.com/learn/Sections_and_chapters)。\n\n### 参考文献\n1. **thebibliography形式**\n这种形式不需要额外的文件，参考文献信息直接在 thebibliography 环境内填写。\n\n```latex\n\\begin{thebibliography}{编号样本}\n\\bibitem[编号]{标签} 文献条目\n\\bibitem[编号]{标签} 文献条目\n.\n.\n.\n\\end{thebibliography}\n```\n\n- “编号”：通常省略，系统自动按顺序编号，如 [1]，[2]，...\n- “编号样本”：指定用多大地方显示 “编号”，一般为数字，位数等于最大编号的位数\n-  标签 ：文献的 id，可以由字母，数字和除逗号外的符号组成\n   - 每个文献的标签必须唯一 (互不相同)\n   - 文献的引用：\\cite{标签}，\\cite{标签1，标签2}\n- 文献条目：论文 (作者，标题，期刊，卷期，年代，页码)，书籍 (作者，书名，出版社，年代)\n- 参考文献的高级定制: natbib 宏包 (详细用法参见宏包手册)\n\n\n示例：\n\n```latex\n\\begin{thebibliography}{00}\n\\bibitem{b2} L. Bariah, D. Shehada and E. Salaha, ``Recent Advancesin VANET Security:\nA Survey,\" Vehicular Technology Conference. 2016.\n\n\\bibitem{b3} S. A. A. Shah, E. Ahmed, F. Xia, A. Karim, M. Shiraz and R. M. Noor, \n``Adaptive beaconing approaches for vehicular ad hoc networks: A survey\", \nIEEE Systems Journal, vol. 12, no. 2, pp. 1263-1277, 2018.\n\\end{thebibliography}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212224152.png)\n\n\n2. **Bibtex格式**\n\n这种方式是把参考文献写在`.bib`文件中，然后和`.tex`放在同一文件夹下，`.tex`直接引用`.bib`中的参考文献。这种方法比较简单，不需要你根据期刊的格式每个都改动，只需要你找到相关的文件，按照Bibtex格式放到`.bib`文件中，在`tex`文件中会按照指定的参考文献格式现实。\n\n```latex\n% 从google学术或者百度学术上找到参考文采用，然后引用->导出Bibtex格式，粘贴到.bib文件中\n@article{greenwade93,\n    author  = \"George D. Greenwade\",\n    title   = \"The {C}omprehensive {T}ex {A}rchive {N}etwork ({CTAN})\",\n    year    = \"1993\",\n    journal = \"TUGBoat\",\n    volume  = \"14\",\n    number  = \"3\",\n    pages   = \"342--351\"\n}\n```\n\n```latex\n\\bibliographystyle{ieeetr} %设置参考文献类型\n\\bibliography{sample} %声明参考文献文件名称\n```\n![Bibtex格式示例](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212230200.png)\n\n> 参考资料：[LaTeX 参考文献及格式调整](https://zymin.cn/arcticle/latex-reference-with-bib.html)\n\n---\n\n## 创建表格\n### 一个简单的表格\n\n```latex\n\\begin{center}\n\\begin{tabular}{ c c c }\n cell1 & cell2 & cell3 \\\\\n cell4 & cell5 & cell6 \\\\\n cell7 & cell8 & cell9\n\\end{tabular}\n\\end{center}\n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231756.png)\n\n- `tabular` 环境是创建表的默认 LaTeX 方法。必须为此环境指定一个参数，这个例子里是 `{c c c}`。这告诉 LaTeX，表格将有三列，每列中的文本居中。你还可以使用 `r` 将文本向右对齐，使用 `l` 进行左对齐。\n- 符号 `&` 是分隔符，每行中的分隔符始终少于列数。要转到表格的下一行，需要使用换行命令 `\\\\`。\n- 将整个表包装在 `center` 环境中，以让它出现在页面的中心。\n\n\n### 添加边框\n`tabular` 环境很灵活，可以在每列之间放置分隔线。\n\n```latex\n\\begin{center}\n\\begin{tabular}{ |c|c|c| }\n \\hline\n cell1 & cell2 & cell3 \\\\\n cell4 & cell5 & cell6 \\\\\n cell7 & cell8 & cell9 \\\\\n \\hline\n\\end{tabular}\n\\end{center}\n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231902.png)\n\n使用水平线命令 `\\hline` 和垂直线参数 `|` 来添加边框。\n\n- `{|c|c|c|}`：这声明表中将会有由垂直线分隔的三列。`|` 符号指定这些列应由垂直线分隔。\n- `\\hline`：这条命令将插入一条水平线。这个示例中，我们在表格的顶部和底部加入了水平线。\\hline 的使用次数没有限制。\n\n\n> 可以借助 [TablesGenerator.com](https://www.tablesgenerator.com/) 这样的在线工具导出表格的 LaTeX 代码。_“文件”>“粘贴表数据”_ 选项从电子表格软件粘贴数据。\n\n### 标题、标签和引用\n可以使用与图片几乎相同的方式来为表格添加标题、标签和引用。唯一的区别是，使用`table`环境代替了`figure`环境。\n\n```latex\nTable \\ref{table:data} is an example of referenced \\LaTeX{} elements.\n\n\\begin{table}[h!]\n\\centering\n\\begin{tabular}{||c c c c||}\n \\hline\n Col1 & Col2 & Col2 & Col3 \\\\ [0.5ex]\n \\hline\\hline\n 1 & 6 & 87837 & 787 \\\\\n 2 & 7 & 78 & 5415 \\\\\n 3 & 545 & 778 & 7507 \\\\\n 4 & 545 & 18744 & 7560 \\\\\n 5 & 88 & 788 & 6344 \\\\ [1ex]\n \\hline\n\\end{tabular}\n\\caption{Table to test captions and labels}\n\\label{table:data}\n\\end{table}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212232247.png)\n\n---\n\n## 添加算法伪代码\n在LaTeX中写伪代码也是需要导入外部宏包，常用的宏包有`algorithms`、`algorithmicx` 和 `algorithm2e`。\n\n&nbsp;\n`algorithms`和`algorithmicx`一般一起使用， 简易但可定制性不高。`algorithm2e`相对复杂些，但是操作性更高，可定制性更强，所以这里主要详细介绍`algorithm2e`的使用。\n\n### algorithms和algorithmicx示例\n\n```latex\n\\begin{algorithm}\n  \\renewcommand{\\algorithmicrequire}{\\textbf{Input:}}\n\t\\renewcommand{\\algorithmicensure}{\\textbf{Output:}}\n\t\\caption{Calculate $y = x^n$} \n\t\\label{alg3} \n\t\\begin{algorithmic}\n\t\t\\REQUIRE $n \\geq 0 \\vee x \\neq 0$ \n\t\t\\ENSURE $y = x^n$ \n\t\t\\STATE $y \\gets 1$ \n\t\t\\IF{$n < 0$} \n\t\t\\STATE $X \\gets 1 / x$ \n\t\t\\STATE $N \\gets -n$ \n\t\t\\ELSE \n\t\t\\STATE $X \\gets x$ \n\t\t\\STATE $N \\gets n$ \n\t\t\\ENDIF \n\t\t\\WHILE{$N \\neq 0$} \n\t\t\\IF{$N$ is even} \n\t\t\\STATE $X \\gets X \\times X$ \n\t\t\\STATE $N \\gets N / 2$ \n\t\t\\ELSE[$N$ is odd] \\STATE $y \\gets y \\times X$ \n\t\t\\STATE $N \\gets N - 1$ \n\t\t\\ENDIF \n\t\t\\ENDWHILE \n\t\\end{algorithmic} \n\\end{algorithm}\n```\n\n> 注意：\n> 要在序言区引入宏包：\\usepackage{algorithm, algorithmic}\n> \\renewcommand{\\algorithmicrequire}{\\textbf{Input:}} 将官方的require关键字换成常用的input\n> \\renewcommand{\\algorithmicensure}{\\textbf{Output:}} 将官方的ensure关键字换成常用的output\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211213105605.png)\n\n### algorithm2e\n\n1. **第一个示例**\n\n\n```latex\n\\documentclass{article}\n\\usepackage[linesnumbered,ruled]{algorithm2e} % 导入宏包\n\n\\begin{document}\n\n\\begin{algorithm} % 伪代码开始\n\t\\caption{identify Row Context}  \n  \\KwIn{$r_i$, $Backgrd(T_i)$=${T_1,T_2,\\ldots ,T_n}$ and similarity threshold $\\theta_r$}  \n  \\KwOut{$con(r_i)$}  \n  $con(r_i)= \\Phi$\\;  \n  \\For{$j=1;j \\le n;j \\ne i$}  \n  {  \n    float $maxSim=0$ \\;  \n    $r^{maxSim}=null$ \\;  \n    \\While{not end of $T_j$}  \n    {  \n      compute Jaro($r_i,r_m$)($r_m\\in T_j$) \\;  \n      \\If{$(Jaro(r_i,r_m) \\ge \\theta_r)\\wedge (Jaro(r_i,r_m)\\ge r^{maxSim})$}  \n      {  \n        replace $r^{maxSim}$ with $r_m$ \\;  \n      }  \n    }  \n    $con(r_i)=con(r_i)\\cup {r^{maxSim}}$ \\;  \n  }  \n  return $con(r_i)$ \\;\n\\end{algorithm}   % 伪代码结束\n\n\\end{document} \n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211213112018.png)\n\n> **注意：**每一行的结尾必须以 `\\;` 结束, 只有那些以宏命令开始的不应该以 `\\;` 结束, 例如在此示例中的 `\\caption`、`\\KwIn` 、`\\KwOut`属于宏命令, 不需要以 `\\;` 结尾. \n\n\n2. **常用环境**\n- algorithm：这是最常用的环境\n- algorithm*：与前者一样, 但它用于两列文本中, 使算法跨两列\n\n\n3. **基本关键字**\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211213142106.png)\n\n\n4. **算法布局**\n\n在引入宏包时，在option选项中加入了 linesnumbered 和 ruled，所以在算法伪代码中会有行编号和上下尺（即三线表样式）。当然，外部的封装环境不止 ruled 一种选项, 也可以选择完全封闭的选项亦或者完全没有外部边框的选项。\n\n- boxed：将算法封装在框中\n- boxruled：用方框将算法环绕，将标题放在上方，并在标题后添加一行\n- ruled：在顶部和底部都有一条线的算法。请注意，标题不再位于算法下方，而是在算法开始时设置\n- algoruled：如上所述，但在尺后留有多余的空格\n- tworuled：tworuled 的行为就 ruled 的一样，但标题后面没有加一行\n- plain：默认值，无功能\n\n\n5. **第二个示例**\n\n\n```latex\n\\documentclass{article}\n\\usepackage[linesnumbered,ruled]{algorithm2e}\n\\begin{document}\n\\begin{algorithm}\n  \\renewcommand{\\algorithmcfname}{Pseudo code} % 这句如果写在引言区，将对全部算法生效\n  \\SetKwData{Left}{left}\\SetKwData{This}{this}\\SetKwData{Up}{up}\n  \\SetKwFunction{Union}{Union}\\SetKwFunction{FindCompress}{FindCompress}\n  \\SetKwInOut{Input}{input}\\SetKwInOut{Output}{output}\n  \\Input{A bitmap $Im$ of size $w\\times l$}\n  \\Output{A partition of the bitmap}\n  \\BlankLine\n  \\emph{special treatment of the first line}\\;\n  \\For{$i\\leftarrow 2$ \\KwTo $l$}{\n    \\emph{special treatment of the first element of line $i$}\\;\n    \\For{$j\\leftarrow 2$ \\KwTo $w$}{\\label{forins}\n      \\Left$\\leftarrow$ \\FindCompress{$Im[i,j-1]$}\\;\n      \\Up$\\leftarrow$ \\FindCompress{$Im[i-1,]$}\\;\n      \\This$\\leftarrow$ \\FindCompress{$Im[i,j]$}\\;\n      \\If(\\tcp*[h]{O(\\Left,\\This)==1}){\\Left compatible with \\This}{\\label{lt}\n        \\lIf{\\Left $<$ \\This}{\\Union{\\Left,\\This}}\n        \\lElse{\\Union{\\This,\\Left}}\n      }\n    }\n    \\lForEach{element $e$ of the line $i$}{\\FindCompress{p}}\n  }\n  \\caption{disjoint decomposition}\n  \\label{algo_disjdecomp}\n\\end{algorithm}\n\\end{document}\n```\n\n![编译后的效果](https://gitee.com/chengbudong/noteimg/raw/master/image/20211213141730.png)\n\n---\n\n# Overleaf写LaTeX\n## Overleaf网站：[链接](https://cn.overleaf.com/project)\nOverleaf是一个使用LaTeX进行多人协同编辑的平台，可以免费注册和使用，不用下载LaTeX软件，是最为著名的LaTeX在线协作系统。主要特色是有LaTeX插件，编辑功能十分完善，有实时预览（即编即看，无需手动编译）的功能。科研工作者可以在各大期刊的网站上下载到其Overleaf模板，进行论文写作。\n\n![Overleaf项目首页](https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf%E9%A6%96%E9%A1%B5.png)\n\n## 创建项目\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212153121.png)\n\n\n- **空白项目**：一个最基本的.tex文档，适用于从零开始定制个人性化的板式。\n\n![空白项目](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154608.png)\n\n\n- **样例项目**：一个通用的模板，包含了一篇论文的基本结构、基础样式，作者可以在此模板上填充自己的内容，适用于快速开始一篇论文的撰写。\n\n![带模板项目](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154413.png)\n\n\n- **上传项目**：通过其它地方下载的模板创建项目，适用于使用所投期刊提供的模板撰写论文。\n\n\n- **从模板库导入**：通过Overleaf平台的模板库中寻找模板，里面有各式各样的模板。\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212160030.png)\n\n## 编辑页面介绍\n\n![页面介绍](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233704.png)\n\n## 上传图片\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf_uploadFig.png)\n\n## 下载完成的文档\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233900.png)\n\n# 学习资料\n\n- LaTeX工作室在知识库：[链接](https://www.latexstudio.net/texdoc/#/)\n- 华东师范大学潘建瑜老师讲义：[链接](http://math.ecnu.edu.cn/~jypan/Teaching/Latex/)\n- 简短的 LaTeX2e 介绍：[链接](https://mirrors.tuna.tsinghua.edu.cn/CTAN/info/lshort/chinese/lshort-zh-cn.pdf)\n- algorithm2e 宏包官方文档：[链接](http://tug.ctan.org/macros/latex/contrib/algorithm2e/doc/algorithm2e.pdf)\n","slug":"LaTeX的使用","published":1,"updated":"2021-12-30T08:57:23.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3p00078ou148ok6uar","content":"<h1 id=\"LaTeX基础\"><a href=\"#LaTeX基础\" class=\"headerlink\" title=\"LaTeX基础\"></a>LaTeX基础</h1><h2 id=\"TEX是什么\"><a href=\"#TEX是什么\" class=\"headerlink\" title=\"TEX是什么\"></a>TEX是什么</h2><p>TEX 是高德纳 (Donald E. Knuth) 为排版文字和数学公式而开发的程序。</p>\n<ul>\n<li>TEX 系统提供了 300 + 600 多条基本的排版命令 </li>\n<li>TEX 是目前公认的数学公式排版最好的排版语言</li>\n<li>TEX 是免费的 </li>\n<li>TEX 的名字来自大写的希腊字母 (τ, ϵ, χ)，意思是“科技”和“艺术” </li>\n</ul>\n<h2 id=\"LaTeX是什么\"><a href=\"#LaTeX是什么\" class=\"headerlink\" title=\"LaTeX是什么\"></a>LaTeX是什么</h2><p>LaTeX 是一个写作工具，可以用于创建具有专业排版的文档。它基于所见即所得的思想，即写作者只需要关注文档的内容，而计算机负责将其格式化。用户不再需要像 Word 中那样，在页面上用空格来控制格式，而是只需要输入纯文本，让 LaTeX 处理剩下的一切。</p>\n<blockquote>\n<p> LaTeX 是一种使用 TEX 程序作为排版引擎的格式，可以粗略地将它理解成是对 TEX 的一层封装。 </p>\n</blockquote>\n<h2 id=\"LaTeX的用处\"><a href=\"#LaTeX的用处\" class=\"headerlink\" title=\"LaTeX的用处\"></a>LaTeX的用处</h2><p>LaTeX 被广泛应用于科学文档、书籍以及许多其他出版物。它不仅可以创建精美的排版文档，而且还使得用户可以很快速地处理复杂的排版问题，比如输入数学公式、创建目录、管理引用、创建书目、保持布局一致等等。由于可用的开源软件包数量众多，因此 LaTeX 有无限的可能性。这些软件包赋予了用户更多的能力，例如添加脚注，绘制原理图，创建表格等。</p>\n<p>&nbsp;<br>人们使用 LaTeX 的最重要原因之一就是它分离了文档的内容与样式。这意味着你只需要编写文档的内容，我们就可以轻松更改其外观。同样，你也可以创建一个文档模板，用它来统一许多不同文档的外观，这样学术期刊可以创建投稿模板。这些模板具有预制的布局，只需要往里面添加内容即可。实际上，LaTeX 有数百种模板，覆盖从简历到幻灯片的所有内容。</p>\n<h2 id=\"LaTeX的优点\"><a href=\"#LaTeX的优点\" class=\"headerlink\" title=\"LaTeX的优点\"></a>LaTeX的优点</h2><ul>\n<li>LaTeX 特点<ul>\n<li>专注于内容撰写，很少操心文档的版面设计</li>\n<li>自动编号：章节、图表、公式定理、参考文献 ·······</li>\n<li>自动生成目录、索引</li>\n<li>公式、定理、参考文献、插图、页码等可以交叉引用</li>\n<li>可以通过各种宏包扩展其功能, 实现各种特殊要求</li>\n</ul>\n</li>\n<li>LaTeX VS. Word<ul>\n<li>Word 简单易用，所见即所得，普通办公文档建议用 Word</li>\n<li>LaTeX 输出美观，质量高，科技排版 (特别是数学) 推荐使用 LaTeX</li>\n<li>LaTeX 能实现 Word 的所有功能，定制性高，但易用性不如 Word</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写LaTeX的工具\"><a href=\"#写LaTeX的工具\" class=\"headerlink\" title=\"写LaTeX的工具\"></a>写LaTeX的工具</h2><h3 id=\"TEX的发行版\"><a href=\"#TEX的发行版\" class=\"headerlink\" title=\"TEX的发行版\"></a>TEX的发行版</h3><ul>\n<li>Windows 系统：TeXLive (推荐)，MiKTeX，CTEX 套装 (不推荐)</li>\n<li>Unix/Linux 系统：TeXLive</li>\n<li>Mac OS 系统：TeXLive，MacTeX</li>\n</ul>\n<h3 id=\"下载和安装\"><a href=\"#下载和安装\" class=\"headerlink\" title=\"下载和安装\"></a>下载和安装</h3><ul>\n<li>TeXLive : <a href=\"http://tug.org/texlive/\">http://tug.org/texlive/</a> (大而全，全部宏包)</li>\n<li>编辑器: WinEdt, TeXworks, TeXmaker, TeXStudio, vim, emacs, …</li>\n<li>安装演示: 以 <a href=\"http://math.ecnu.edu.cn/~jypan/Teaching/Latex/Install/install_texlive_gb2312.html\">TeXLive 2017</a> 为例</li>\n</ul>\n<h3 id=\"在线平台Overleaf\"><a href=\"#在线平台Overleaf\" class=\"headerlink\" title=\"在线平台Overleaf\"></a>在线平台<a href=\"https://cn.overleaf.com/\">Overleaf</a></h3><p>本文章接下来对LaTeX的使用介绍主要以该平台为例。</p>\n<hr>\n<h1 id=\"LaTeX排版\"><a href=\"#LaTeX排版\" class=\"headerlink\" title=\"LaTeX排版\"></a>LaTeX排版</h1><h2 id=\"LaTeX文稿的排版过程\"><a href=\"#LaTeX文稿的排版过程\" class=\"headerlink\" title=\"LaTeX文稿的排版过程\"></a>LaTeX文稿的排版过程</h2><ol>\n<li><p><strong>编写源文件</strong>：tex 源文件为纯文本文件，以 <code>.tex</code> 为扩展名</p>\n<ul>\n<li>可以使用任何文本编辑器编写, 如: WinEdt, EditPlus, Vi, Emacs, 推荐 WinEdt，专门针对 tex 开发, 提供许多便捷功能, 有助于提高排版效率</li>\n</ul>\n</li>\n<li><p><strong>编译</strong>：用 <code>pdflatex</code> (英文文档) 或 <code>xelatex</code> (中文文档) 编译，生成相应的 pdf 文件</p>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212181900.png\" alt=\"来源：华东师范大学潘建瑜老师的课件\"></p>\n<h2 id=\"第一个LaTeX文件\"><a href=\"#第一个LaTeX文件\" class=\"headerlink\" title=\"第一个LaTeX文件\"></a>第一个LaTeX文件</h2><p>创建一个新的 LaTeX 项目。你可以在自己的电脑上创建 <code>.tex</code> 文件，也可以在 Overleaf 中启动新项目。让我们从最简单的示例开始：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\documentclass</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">article</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">%指定文档类型</span>\n<span class=\"token comment\" spellcheck=\"true\">% 序言区</span>\n<span class=\"token comment\" spellcheck=\"true\">%</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">% 正文</span>\nFirst document. This is a simple example, with no extra parameters or packages included.\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212183155.png\" alt=\"编译后的效果\"></p>\n<p>可以看到，LaTeX 已经对文本进行了格式化（如首行缩进）。下面我们仔细看一下上面这段代码每个部分的功能。</p>\n<ul>\n<li><p>代码的第一行声明了文档的类型，称为**类 (class)**。类控制文档的整体外观，不同类型的文档需要选择不同的类，比如，简历与论文需要不同的类。在这个例子中，类是 <code>article</code>，是最简单和最常见的 LaTeX 类。其他类型的文档可能需要使用不同的类，例如 <code>book</code> 或 <code>report</code>。</p>\n</li>\n<li><p>在<code>\\begin &#123;document&#125;</code> 和 <code>\\end &#123;document&#125;</code>这两个标记之间写入文档内容。这部分就是文档的**主体 (body)**，你可以在此处开始编写和更改文本。要在 PDF 中查看更改的结果，必须首先编译文档。</p>\n</li>\n</ul>\n<blockquote>\n<p>在 Overleaf 中只需单击 重新编译（Recompile）。还可以单击重新编译按钮旁边的小箭头，并将 “自动编译” 设置为 “开”，这样编辑文件时项目将会自动重新编译。<br>LATEX 源文件: 正文 + 命令 + 注解<br>排版命令 (简称 命令): 反斜杠开头的字符串<br>注解符: 百分号 %，注释的内容不会被显示出来<br>文档类型: \\documentclass{…} (论文, 书籍, 幻灯片, 海报)<br>环境: <code>\\begin&#123;...&#125;</code> 开头, <code>\\end&#123;...&#125;</code> 结尾</p>\n</blockquote>\n<h2 id=\"LaTex命令\"><a href=\"#LaTex命令\" class=\"headerlink\" title=\"LaTex命令\"></a>LaTex命令</h2><pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\command</span>\n<span class=\"token function selector\">\\command</span><span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>arguments<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>方括号中的是可选的 (称为选项)，花括号中的参数是必需的。</li>\n</ul>\n<pre class=\" language-latex\"><code class=\"language-latex\">例: 一些常用命令\n<span class=\"token function selector\">\\documentcalss</span>, <span class=\"token function selector\">\\title</span>, <span class=\"token function selector\">\\author</span>, <span class=\"token function selector\">\\date</span>, <span class=\"token function selector\">\\usepackage</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">环境名</span><span class=\"token punctuation\">}</span>, <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">环境名</span><span class=\"token punctuation\">}</span> 组成一个环境\n</code></pre>\n<ul>\n<li>定义新命令</li>\n</ul>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\newcommand</span><span class=\"token punctuation\">{</span>新命令<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>命令内容<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\renewcommand</span><span class=\"token punctuation\">{</span>已有命令<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>命令内容<span class=\"token punctuation\">}</span>\n\n例：\n<span class=\"token function selector\">\\newcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\eps</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\varepsilon</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">% $\\eps$ = ε</span>\n</code></pre>\n<h2 id=\"分组和环境\"><a href=\"#分组和环境\" class=\"headerlink\" title=\"分组和环境\"></a>分组和环境</h2><ul>\n<li>分组<ul>\n<li>有些命令只对其参数起作用，如<code>\\textbf&#123;abc&#125;</code></li>\n<li>有些命令对后面所有的内容都起作用，这些命令通常也称为声明，如<code>\\bfseries</code></li>\n<li>可以利用大括号 (即分组) 来限制声明的作用范围</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-latex\"><code class=\"language-latex\">This is <span class=\"token function selector\">\\textbf</span><span class=\"token punctuation\">{</span>bold face<span class=\"token punctuation\">}</span> style.    <span class=\"token comment\" spellcheck=\"true\">% bold face 粗体显示</span>\nThis is <span class=\"token function selector\">\\bfseries</span> bold face style.   <span class=\"token comment\" spellcheck=\"true\">% bold face style. 粗体显示</span>\nThis is <span class=\"token punctuation\">{</span><span class=\"token function selector\">\\bfseries</span> bold face<span class=\"token punctuation\">}</span> style. <span class=\"token comment\" spellcheck=\"true\">% bold face 粗体显示</span>\n</code></pre>\n<ul>\n<li>环境：某些具有特定格式的内容需要放在相应的环境中, 如表格，数学公式等<ul>\n<li>document 是 LaTeX 的一个最基本的环境，一篇文档有且只能有一个 document 环境</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">环境名</span><span class=\"token punctuation\">}</span>\n.\n.\n.\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">环境名</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"文档的序言区\"><a href=\"#文档的序言区\" class=\"headerlink\" title=\"文档的序言区\"></a>文档的序言区</h2><p>在基本框架中，文本是在 <code>\\begin &#123;document&#125;</code> 命令之后输入的。在这个命令之前 <code>.tex</code> 文件中的所有内容都称为 **序言 (preamble)**。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\documentclass</span><span class=\"token punctuation\">[</span>12pt, letterpaper<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">article</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">[</span>utf8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">inputenc</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>位于源文件的最前面, 用于指定文档的整体结构和布局, 必须且只能选一种<ul>\n<li>常用文档类: article, book, beamer, ctexart, ctexbook, ctexbeamer. 常用选项:<ul>\n<li>10pt(缺省值)，11pt，12pt，指定基本字体的大小</li>\n<li>letterpaper(缺省值)，a4paper，a5paper，…  指定纸张的大小</li>\n<li>单双面选项：oneside，twoside，openright，openany</li>\n<li>数学公式：leqno (公式编号在左边)，fleqn (靠左显示行间公式)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>导言区用于放置<strong>全局控制命令</strong>，如：调用宏包，设置页面大小，…</li>\n<li>放在导言区的命令对整个文档都起作用</li>\n</ul>\n<blockquote>\n<p>更多有关 <a href=\"https://www.overleaf.com/learn/Page_size_and_margins\">页面大小和边距</a> 的信息，可以参阅这篇文章。</p>\n</blockquote>\n<p><code>\\usepackage[utf8]&#123;inputenc&#125;</code>这行命令指定了文档的编码，可以省略或更改为其他编码，但建议使用 utf-8。除非特别需要其他编码，否则请将此行添加到序言中。</p>\n<h2 id=\"添加标题、作者和日期\"><a href=\"#添加标题、作者和日期\" class=\"headerlink\" title=\"添加标题、作者和日期\"></a>添加标题、作者和日期</h2><p>要将标题、作者和日期添加到文档中，就必须<strong>在序言中</strong>（不是文章的主体中）添加下面三行。它们是：</p>\n<ul>\n<li><code>\\title&#123;标题&#125;</code></li>\n<li><code>\\author&#123;姓名&#125;</code><ul>\n<li><code>\\thanks&#123;简介&#125;</code>在 author 命令的大括号里添加这条命令，可以添加上标和脚注。如果你需要在文章中感谢一个机构，这个功能将非常有用。</li>\n</ul>\n</li>\n<li><code>\\date&#123;February 2021&#125;</code>你可以手动输入日期，或使用 \\today 命令，以便在编译文档时自动更新日期。</li>\n</ul>\n<p>&nbsp;<br>现在可以使用 <code>\\maketitle</code> 命令在文档上打印这些信息。这条命令应该写在文档 主体 (body) 中你想要打印标题的位置。示例：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\documentclass</span><span class=\"token punctuation\">[</span>12pt, letterpaper, twoside<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">article</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">[</span>utf8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">inputenc</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\title</span><span class=\"token punctuation\">{</span>LaTeX Tutorial<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\author</span><span class=\"token punctuation\">{</span>Cheng Budong <span class=\"token function selector\">\\thanks</span><span class=\"token punctuation\">{</span>School of computer Science and Engineering<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\date</span><span class=\"token punctuation\">{</span>December 2021<span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\maketitle</span>\nWe have now added a title, author and date to our first <span class=\"token function selector\">\\LaTeX</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> document!\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212194706.png\" alt=\"编译后的效果\"></p>\n<h2 id=\"换行，分段，分页\"><a href=\"#换行，分段，分页\" class=\"headerlink\" title=\"换行，分段，分页\"></a>换行，分段，分页</h2><ul>\n<li><p>换行：自然换行 (若需强制换行，可使用 <code>\\\\</code> 或 <code>\\linebreak</code>)</p>\n<ul>\n<li>一般情况下, 不建议使用强制换行</li>\n</ul>\n</li>\n<li><p>分段：一个空行或 <code>\\par</code></p>\n<ul>\n<li>建议使用空行进行分段，简洁直观</li>\n</ul>\n</li>\n<li><p>分页：自然分页，若需 强制分页, 可用 <code>\\newpage</code>，<code>\\clearpage</code> 或 <code>\\pagebreak</code></p>\n<ul>\n<li>一般情况下，不建议使用强制分页</li>\n</ul>\n</li>\n<li><p>行间距：行间距伸展因子 <code>\\baselinestretch</code> 或伸展命令 <code>\\linespread</code></p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\renewcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\baselinestretch</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>1.2<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\linespread</span><span class=\"token punctuation\">{</span>1.2<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li><p>段落间距和段落缩进：用自动设定的即可，英文每节的第一段首行不会自动缩进</p>\n</li>\n</ul>\n<blockquote>\n<p>可以在这篇有关 <a href=\"https://www.overleaf.com/learn/Paragraphs_and_new_lines\">段落和换行</a> 的文章中找到更多信息。</p>\n</blockquote>\n<h2 id=\"加粗、斜体和下划线\"><a href=\"#加粗、斜体和下划线\" class=\"headerlink\" title=\"加粗、斜体和下划线\"></a>加粗、斜体和下划线</h2><ul>\n<li>加粗：在 LaTeX 中，加粗字体使用 <code>\\textbf&#123;&#125;</code> 命令。</li>\n<li>斜体：在 LaTeX 中，斜体使用 <code>\\textit&#123;&#125;</code> 命令。</li>\n<li>下划线：在 LaTeX 中，下划线使用 <code>\\underline&#123;&#125;</code> 命令。</li>\n</ul>\n<p>示例：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\">Some of the <span class=\"token function selector\">\\textbf</span><span class=\"token punctuation\">{</span>greatest<span class=\"token punctuation\">}</span>\nwere made by <span class=\"token function selector\">\\textbf</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\textit</span><span class=\"token punctuation\">{</span>accident<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>.\ndiscoveries in <span class=\"token function selector\">\\underline</span><span class=\"token punctuation\">{</span>science<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212200351.png\" alt=\"编译后的效果\"></p>\n<h2 id=\"引入宏包\"><a href=\"#引入宏包\" class=\"headerlink\" title=\"引入宏包\"></a>引入宏包</h2><p>宏包可用于更改 LaTeX 文档的默认外观，或实现更多功能。</p>\n<ul>\n<li>宏包调用方法 (只能出现在导言区)  <code>\\usepackage[选项]&#123;宏包名&#125;</code></li>\n<li>如果宏包不带选项, 则可以多个一起调用, 如: </li>\n</ul>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">amsmath,amssymb,amsfonts</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">[</span>pagebackref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">hyperref</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">[</span>numbers,sort<span class=\"token punctuation\">&amp;</span>compress<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">natbib</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"添加图片\"><a href=\"#添加图片\" class=\"headerlink\" title=\"添加图片\"></a>添加图片</h2><p>LaTeX本身不能管理图像，因此需要使用一个 包 (package)。在这个例子中，要实现在文档中添加图片，需要使用 graphicx 包。graphicx 包提供了新的命令<code>\\includegraphics&#123;&#125;</code>和<code>\\graphicspath&#123;&#125;</code>。</p>\n<ul>\n<li>支持的图片格式：pdf，jpg，png (pdfLaTeX 和 xeLaTeX 编译)<ul>\n<li>eps 格式的图片，epstopdf 宏包, 自动将 eps 转换为 pdf</li>\n</ul>\n</li>\n<li>图形文件名中可以含路径</li>\n<li>常用选项有<ul>\n<li>width, height：指定图形的宽度和高度 (若只指定宽度或高度, 则按比例缩放)</li>\n<li>scale：缩放因子，如 scale=0.5</li>\n</ul>\n</li>\n</ul>\n<p>添加图片的示例：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token comment\" spellcheck=\"true\">% 在序言区导入包</span>\n<span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">graphicx</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\graphicspath</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>images/<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">% 告诉LaTeX，这些图片保存在当前目录下名为images的文件夹中。</span>\n\n<span class=\"token comment\" spellcheck=\"true\">% 在需要插入图片的地方写</span>\n<span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>scale=0.5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>overleaf.png<span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">% 将图像实际包含在文档中的命令，scale缩放因子</span>\n</code></pre>\n<blockquote>\n<p>注意：在 Overleaf 中，你需要首先上传图片。有关更多详细信息，请参见有关<a href=\"https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes#Generating_high-res_and_low-res_images\">生成高分辨率和低分辨率图像</a>的内容。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212204315.png\" alt=\"编译后的效果\"></p>\n<h3 id=\"标题、标签和引用\"><a href=\"#标题、标签和引用\" class=\"headerlink\" title=\"标题、标签和引用\"></a>标题、标签和引用</h3><p>可以像下面这样，在 figure 环境中对图片添加标题、标签和引用。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=0.5<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>overleaf<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>overleaf icon<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">fig:icon</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span>\nAs you can see in the figure <span class=\"token function selector\">\\ref</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">fig:icon</span><span class=\"token punctuation\">}</span>.\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210237.png\" alt=\"编译后的效果\"></p>\n<p>在这个示例中，有三个重要的命令：</p>\n<ul>\n<li>\\caption{overleaf icon}：此命令为图形设置标题。你可以将这条命令放置在图的上方或下方。</li>\n<li>\\label{fig:icon}：如果你需要在文档中引用图像，请使用这条命令为图像设置标签。标签可以为图像编上号，并与下一个命令结合，对图片进行引用。</li>\n<li>\\ref{fig:icon}：这条命令在编译后将显示替换为被引用图片对应的编号。</li>\n</ul>\n<blockquote>\n<p>将图像放置在 LaTeX 文档中时，应始终将它们放置在 figure 环境或类似环境中，以便 LaTeX 适配图像和文字。<br>图片排版技巧：<a href=\"https://blog.csdn.net/qq_31347869/article/details/103832190\">图片的插入及排版方法</a>，</p>\n</blockquote>\n<hr>\n<h2 id=\"创建列表\"><a href=\"#创建列表\" class=\"headerlink\" title=\"创建列表\"></a>创建列表</h2><p>在 LaTeX 中创建列表非常简单。可以使用不同的环境来创建不同形式的列表。环境是我们文档中具有不同呈现形式的各个部分。它们以<code>\\begin&#123;...&#125;</code> 命令开始，以<code>\\end&#123;...&#125;</code>命令结束。</p>\n<p>&nbsp;<br>列表主要有两种类型，<strong>有序列表</strong>和<strong>无序列表</strong>。分别使用不同的环境。</p>\n<h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><p>无序列表是由 itemize 环境生成的。每个条目之前必须有 \\item，如下所示。默认情况下，各个条目用黑点表示。条目中的文本可以是任何长度。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">itemize</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\item</span><span class=\"token punctuation\">[</span>标签<span class=\"token punctuation\">]</span> 条目内容\n· · · · · ·\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">itemize</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>缺省的标签与层数有关，分别为：<code>·，-，∗</code></li>\n<li>也可通过选项标签来指定标签</li>\n<li>不要标签：\\item </li>\n</ul>\n<p>无序列表示例：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">itemize</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\item</span> The individual entries are indicated with a black dot, a so-called bullet.\n  <span class=\"token function selector\">\\item</span> The text in the entries may be of any length.\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">itemize</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210954.png\" alt=\"编译后的效果\"></p>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><p>有序列表在 enumerate 环境中创建，针对条目的语法与无序列表一致。与无序列表一样，每个条目前必须添加 \\item，它将自动生成标记该项目的数字，由从 1 开始。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">enumerate</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\item</span><span class=\"token punctuation\">[</span>标签<span class=\"token punctuation\">]</span> 条目内容\n· · · · · ·\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">enumerate</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>缺省标签为自动编号的符号，与层数有关，分别为:<ul>\n<li>第一层：阿拉伯数字后跟圆点: 1. 2.</li>\n<li>第二层：圆括号包围的小写拉丁字母: (a) (b)</li>\n<li>第三层：小写罗马数字后跟圆点: i. ii.</li>\n<li>第四层：大写拉丁字母后跟圆点: A. B.</li>\n</ul>\n</li>\n<li>高级列表功能：list 环境，enumitem 宏包</li>\n</ul>\n<p>有序列表示例：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">enumerate</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\item</span> This is the first entry in our list\n  <span class=\"token function selector\">\\item</span> The list numbers increase with each entry we add\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">enumerate</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212211202.png\" alt=\"编译后的效果\"></p>\n<hr>\n<h2 id=\"添加数学表达式\"><a href=\"#添加数学表达式\" class=\"headerlink\" title=\"添加数学表达式\"></a>添加数学表达式</h2><p>LaTeX 中有两种模式用于数学表达式：<strong>行内 (inline)模式</strong>和<strong>行间 (display)</strong> 模式。行内模式编写的公式是文本中的一部分，行间模式编写的公式不在段落中，而是放在单独的行上。</p>\n<h3 id=\"行内\"><a href=\"#行内\" class=\"headerlink\" title=\"行内\"></a>行内</h3><p>要在行内模式下添加数学表达式，可以使用以下定界符之一，它们作用相同。选择哪个完全取决于个人喜好，推荐第一种。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token equation string\">$ ... $</span>\n<span class=\"token equation string\">\\(... \\)</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">math</span><span class=\"token punctuation\">}</span><span class=\"token equation string\"> ... </span><span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">math</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>行内模式示例：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\">In physics, the mass-energy equivalence is stated\nby the equation <span class=\"token equation string\">$E=mc^2$</span>, discovered in 1905 by Albert Einstein.\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212213703.png\" alt=\"编译后的效果\"></p>\n<h3 id=\"行间\"><a href=\"#行间\" class=\"headerlink\" title=\"行间\"></a>行间</h3><p>要在行间模式下显示数学公式，可以使用以下定界符之一。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token equation string\">\\[ ... \\]</span> <span class=\"token comment\" spellcheck=\"true\">% displaymath 环境的简化形式</span>\n<span class=\"token equation string\">$$</span> ··· <span class=\"token equation string\">$$</span> <span class=\"token comment\" spellcheck=\"true\">% 与上面等价, 但可用\\eqno 或 \\leqno 手工编号</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">displaymath</span><span class=\"token punctuation\">}</span> ... <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">displaymath</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">% 不带编号的单行公式数学环境</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">equation</span><span class=\"token punctuation\">}</span><span class=\"token equation string\"> ... </span><span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">equation</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">% 带 自动编号 的单行公式数学环境</span>\n</code></pre>\n<p>行间模式示例：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\">The mass-energy equivalence is described by the famous equation\n<span class=\"token equation string\">\\[E=mc^2 \\]</span>\ndiscovered in 1905 by Albert Einstein. In natural units (<span class=\"token equation string\">$c = 1$</span>), \nthe formula expresses the identity\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">equation</span><span class=\"token punctuation\">}</span><span class=\"token equation string\">\nE=m\n</span><span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">equation</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212215015.png\" alt=\"编译后的效果\"></p>\n<blockquote>\n<p>重要说明：equation* 环境是由外部软件包提供的，请参阅 <a href=\"https://www.overleaf.com/learn/Aligning_equations\">amsmath文章</a>。<br><a href=\"https://texfaq.org/FAQ-dolldoll\">不鼓励</a> 使用 $$ $$，因为它会产生不一致的间距，而且可能不适用于某些数学软件包。<br>相关资料：<a href=\"https://blog.csdn.net/qq_17783559/article/details/88181836\">Latex所有常用数学符号整理</a>，<a href=\"https://www.latexlive.com/\">在线LaTeX公式编辑器</a></p>\n</blockquote>\n<hr>\n<h2 id=\"基本框架\"><a href=\"#基本框架\" class=\"headerlink\" title=\"基本框架\"></a>基本框架</h2><h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>在科学文献中，通常会在摘要部分里面简述论文的主要内容。在 LaTeX 中有针对摘要部分设计的环境。摘要环境会将文本以特殊格式放在文档顶部。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">abstract</span><span class=\"token punctuation\">}</span>\nThis is a simple paragraph at the beginning of the document.\nA brief introduction about the main subject.\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">abstract</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"章节命令\"><a href=\"#章节命令\" class=\"headerlink\" title=\"章节命令\"></a>章节命令</h3><p>用来组织文档的命令因文档类型而异，最简单的组织形式是分节，它对所有文档格式均可用。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\chapter</span><span class=\"token punctuation\">{</span><span class=\"token headline class-name\">First Chapter</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\section</span><span class=\"token punctuation\">{</span><span class=\"token headline class-name\">Introduction</span><span class=\"token punctuation\">}</span>\nThis is the first section.\n\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortisfacilisis sem. \nNullam nec mi et neque pharetra sollicitudin. Praesent imperdietmi nec ante.\nDonec ullamcorper, felis non sodales...\n\n<span class=\"token function selector\">\\section</span><span class=\"token punctuation\">{</span><span class=\"token headline class-name\">Second Section</span><span class=\"token punctuation\">}</span>\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem. \nNullam nec mi et neque pharetra sollicitudin. Praesent imperdiet mi necante...\n\n<span class=\"token function selector\">\\subsection</span><span class=\"token punctuation\">{</span><span class=\"token headline class-name\">First Subsection</span><span class=\"token punctuation\">}</span>\nPraesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...\n\n<span class=\"token function selector\">\\section*</span><span class=\"token punctuation\">{</span><span class=\"token headline class-name\">Unnumbered Section</span><span class=\"token punctuation\">}</span>\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222432.png\" alt=\"编译后的效果\"></p>\n<p>命令 <code>\\section&#123;&#125;</code> 标记一个新分节的开始，在大括号内设置标题。分节编号是自动的，也可以通过在命令中加一个<code>*</code>来禁用编号，像这样：<code>\\section*&#123;&#125;</code>。也可以有 \\subsection{}，甚至 \\subsubsection{}。下面列出了基本的标题深度级别：</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222849.png\"></p>\n<blockquote>\n<p>请注意，\\part 和 \\chapter 仅在 report 和 book 类中可用。<br>有关文档结构的更完整讨论，请参阅 <a href=\"https://www.overleaf.com/learn/Sections_and_chapters\">这篇文章</a>。</p>\n</blockquote>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ol>\n<li><strong>thebibliography形式</strong><br>这种形式不需要额外的文件，参考文献信息直接在 thebibliography 环境内填写。</li>\n</ol>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">thebibliography</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>编号样本<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\bibitem</span><span class=\"token punctuation\">[</span>编号<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>标签<span class=\"token punctuation\">}</span> 文献条目\n<span class=\"token function selector\">\\bibitem</span><span class=\"token punctuation\">[</span>编号<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>标签<span class=\"token punctuation\">}</span> 文献条目\n.\n.\n.\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">thebibliography</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>“编号”：通常省略，系统自动按顺序编号，如 [1]，[2]，…</li>\n<li>“编号样本”：指定用多大地方显示 “编号”，一般为数字，位数等于最大编号的位数</li>\n<li>标签 ：文献的 id，可以由字母，数字和除逗号外的符号组成<ul>\n<li>每个文献的标签必须唯一 (互不相同)</li>\n<li>文献的引用：\\cite{标签}，\\cite{标签1，标签2}</li>\n</ul>\n</li>\n<li>文献条目：论文 (作者，标题，期刊，卷期，年代，页码)，书籍 (作者，书名，出版社，年代)</li>\n<li>参考文献的高级定制: natbib 宏包 (详细用法参见宏包手册)</li>\n</ul>\n<p>示例：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">thebibliography</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>00<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\bibitem</span><span class=\"token punctuation\">{</span>b2<span class=\"token punctuation\">}</span> L. Bariah, D. Shehada and E. Salaha, ``Recent Advancesin VANET Security:\nA Survey,\" Vehicular Technology Conference. 2016.\n\n<span class=\"token function selector\">\\bibitem</span><span class=\"token punctuation\">{</span>b3<span class=\"token punctuation\">}</span> S. A. A. Shah, E. Ahmed, F. Xia, A. Karim, M. Shiraz and R. M. Noor, \n``Adaptive beaconing approaches for vehicular ad hoc networks: A survey\", \nIEEE Systems Journal, vol. 12, no. 2, pp. 1263-1277, 2018.\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">thebibliography</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212224152.png\" alt=\"编译后的效果\"></p>\n<ol start=\"2\">\n<li><strong>Bibtex格式</strong></li>\n</ol>\n<p>这种方式是把参考文献写在<code>.bib</code>文件中，然后和<code>.tex</code>放在同一文件夹下，<code>.tex</code>直接引用<code>.bib</code>中的参考文献。这种方法比较简单，不需要你根据期刊的格式每个都改动，只需要你找到相关的文件，按照Bibtex格式放到<code>.bib</code>文件中，在<code>tex</code>文件中会按照指定的参考文献格式现实。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token comment\" spellcheck=\"true\">% 从google学术或者百度学术上找到参考文采用，然后引用->导出Bibtex格式，粘贴到.bib文件中</span>\n@article<span class=\"token punctuation\">{</span>greenwade93,\n    author  = \"George D. Greenwade\",\n    title   = \"The <span class=\"token punctuation\">{</span>C<span class=\"token punctuation\">}</span>omprehensive <span class=\"token punctuation\">{</span>T<span class=\"token punctuation\">}</span>ex <span class=\"token punctuation\">{</span>A<span class=\"token punctuation\">}</span>rchive <span class=\"token punctuation\">{</span>N<span class=\"token punctuation\">}</span>etwork (<span class=\"token punctuation\">{</span>CTAN<span class=\"token punctuation\">}</span>)\",\n    year    = \"1993\",\n    journal = \"TUGBoat\",\n    volume  = \"14\",\n    number  = \"3\",\n    pages   = \"342--351\"\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\bibliographystyle</span><span class=\"token punctuation\">{</span>ieeetr<span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">%设置参考文献类型</span>\n<span class=\"token function selector\">\\bibliography</span><span class=\"token punctuation\">{</span>sample<span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">%声明参考文献文件名称</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212230200.png\" alt=\"Bibtex格式示例\"></p>\n<blockquote>\n<p>参考资料：<a href=\"https://zymin.cn/arcticle/latex-reference-with-bib.html\">LaTeX 参考文献及格式调整</a></p>\n</blockquote>\n<hr>\n<h2 id=\"创建表格\"><a href=\"#创建表格\" class=\"headerlink\" title=\"创建表格\"></a>创建表格</h2><h3 id=\"一个简单的表格\"><a href=\"#一个简单的表格\" class=\"headerlink\" title=\"一个简单的表格\"></a>一个简单的表格</h3><pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span> c c c <span class=\"token punctuation\">}</span>\n cell1 <span class=\"token punctuation\">&amp;</span> cell2 <span class=\"token punctuation\">&amp;</span> cell3 <span class=\"token function selector\">\\\\</span>\n cell4 <span class=\"token punctuation\">&amp;</span> cell5 <span class=\"token punctuation\">&amp;</span> cell6 <span class=\"token function selector\">\\\\</span>\n cell7 <span class=\"token punctuation\">&amp;</span> cell8 <span class=\"token punctuation\">&amp;</span> cell9\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231756.png\"></p>\n<ul>\n<li><code>tabular</code> 环境是创建表的默认 LaTeX 方法。必须为此环境指定一个参数，这个例子里是 <code>&#123;c c c&#125;</code>。这告诉 LaTeX，表格将有三列，每列中的文本居中。你还可以使用 <code>r</code> 将文本向右对齐，使用 <code>l</code> 进行左对齐。</li>\n<li>符号 <code>&amp;</code> 是分隔符，每行中的分隔符始终少于列数。要转到表格的下一行，需要使用换行命令 <code>\\\\</code>。</li>\n<li>将整个表包装在 <code>center</code> 环境中，以让它出现在页面的中心。</li>\n</ul>\n<h3 id=\"添加边框\"><a href=\"#添加边框\" class=\"headerlink\" title=\"添加边框\"></a>添加边框</h3><p><code>tabular</code> 环境很灵活，可以在每列之间放置分隔线。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span> |c|c|c| <span class=\"token punctuation\">}</span>\n <span class=\"token function selector\">\\hline</span>\n cell1 <span class=\"token punctuation\">&amp;</span> cell2 <span class=\"token punctuation\">&amp;</span> cell3 <span class=\"token function selector\">\\\\</span>\n cell4 <span class=\"token punctuation\">&amp;</span> cell5 <span class=\"token punctuation\">&amp;</span> cell6 <span class=\"token function selector\">\\\\</span>\n cell7 <span class=\"token punctuation\">&amp;</span> cell8 <span class=\"token punctuation\">&amp;</span> cell9 <span class=\"token function selector\">\\\\</span>\n <span class=\"token function selector\">\\hline</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231902.png\"></p>\n<p>使用水平线命令 <code>\\hline</code> 和垂直线参数 <code>|</code> 来添加边框。</p>\n<ul>\n<li><code>&#123;|c|c|c|&#125;</code>：这声明表中将会有由垂直线分隔的三列。<code>|</code> 符号指定这些列应由垂直线分隔。</li>\n<li><code>\\hline</code>：这条命令将插入一条水平线。这个示例中，我们在表格的顶部和底部加入了水平线。\\hline 的使用次数没有限制。</li>\n</ul>\n<blockquote>\n<p>可以借助 <a href=\"https://www.tablesgenerator.com/\">TablesGenerator.com</a> 这样的在线工具导出表格的 LaTeX 代码。<em>“文件”&gt;“粘贴表数据”</em> 选项从电子表格软件粘贴数据。</p>\n</blockquote>\n<h3 id=\"标题、标签和引用-1\"><a href=\"#标题、标签和引用-1\" class=\"headerlink\" title=\"标题、标签和引用\"></a>标题、标签和引用</h3><p>可以使用与图片几乎相同的方式来为表格添加标题、标签和引用。唯一的区别是，使用<code>table</code>环境代替了<code>figure</code>环境。</p>\n<pre class=\" language-latex\"><code class=\"language-latex\">Table <span class=\"token function selector\">\\ref</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table:data</span><span class=\"token punctuation\">}</span> is an example of referenced <span class=\"token function selector\">\\LaTeX</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> elements.\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>h!<span class=\"token punctuation\">]</span>\n<span class=\"token function selector\">\\centering</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>||c c c c||<span class=\"token punctuation\">}</span>\n <span class=\"token function selector\">\\hline</span>\n Col1 <span class=\"token punctuation\">&amp;</span> Col2 <span class=\"token punctuation\">&amp;</span> Col2 <span class=\"token punctuation\">&amp;</span> Col3 <span class=\"token function selector\">\\\\</span> <span class=\"token punctuation\">[</span>0.5ex<span class=\"token punctuation\">]</span>\n <span class=\"token function selector\">\\hline</span><span class=\"token function selector\">\\hline</span>\n 1 <span class=\"token punctuation\">&amp;</span> 6 <span class=\"token punctuation\">&amp;</span> 87837 <span class=\"token punctuation\">&amp;</span> 787 <span class=\"token function selector\">\\\\</span>\n 2 <span class=\"token punctuation\">&amp;</span> 7 <span class=\"token punctuation\">&amp;</span> 78 <span class=\"token punctuation\">&amp;</span> 5415 <span class=\"token function selector\">\\\\</span>\n 3 <span class=\"token punctuation\">&amp;</span> 545 <span class=\"token punctuation\">&amp;</span> 778 <span class=\"token punctuation\">&amp;</span> 7507 <span class=\"token function selector\">\\\\</span>\n 4 <span class=\"token punctuation\">&amp;</span> 545 <span class=\"token punctuation\">&amp;</span> 18744 <span class=\"token punctuation\">&amp;</span> 7560 <span class=\"token function selector\">\\\\</span>\n 5 <span class=\"token punctuation\">&amp;</span> 88 <span class=\"token punctuation\">&amp;</span> 788 <span class=\"token punctuation\">&amp;</span> 6344 <span class=\"token function selector\">\\\\</span> <span class=\"token punctuation\">[</span>1ex<span class=\"token punctuation\">]</span>\n <span class=\"token function selector\">\\hline</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>Table to test captions and labels<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table:data</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212232247.png\" alt=\"编译后的效果\"></p>\n<hr>\n<h2 id=\"添加算法伪代码\"><a href=\"#添加算法伪代码\" class=\"headerlink\" title=\"添加算法伪代码\"></a>添加算法伪代码</h2><p>在LaTeX中写伪代码也是需要导入外部宏包，常用的宏包有<code>algorithms</code>、<code>algorithmicx</code> 和 <code>algorithm2e</code>。</p>\n<p>&nbsp;<br><code>algorithms</code>和<code>algorithmicx</code>一般一起使用， 简易但可定制性不高。<code>algorithm2e</code>相对复杂些，但是操作性更高，可定制性更强，所以这里主要详细介绍<code>algorithm2e</code>的使用。</p>\n<h3 id=\"algorithms和algorithmicx示例\"><a href=\"#algorithms和algorithmicx示例\" class=\"headerlink\" title=\"algorithms和algorithmicx示例\"></a>algorithms和algorithmicx示例</h3><pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\renewcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\algorithmicrequire</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\textbf</span><span class=\"token punctuation\">{</span>Input:<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\renewcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\algorithmicensure</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\textbf</span><span class=\"token punctuation\">{</span>Output:<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>Calculate <span class=\"token equation string\">$y = x^n$</span><span class=\"token punctuation\">}</span> \n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">alg3</span><span class=\"token punctuation\">}</span> \n    <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithmic</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\REQUIRE</span> <span class=\"token equation string\">$n <span class=\"token equation-command regex\">\\geq</span> 0 <span class=\"token equation-command regex\">\\vee</span> x <span class=\"token equation-command regex\">\\neq</span> 0$</span> \n        <span class=\"token function selector\">\\ENSURE</span> <span class=\"token equation string\">$y = x^n$</span> \n        <span class=\"token function selector\">\\STATE</span> <span class=\"token equation string\">$y <span class=\"token equation-command regex\">\\gets</span> 1$</span> \n        <span class=\"token function selector\">\\IF</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$n &lt; 0$</span><span class=\"token punctuation\">}</span> \n        <span class=\"token function selector\">\\STATE</span> <span class=\"token equation string\">$X <span class=\"token equation-command regex\">\\gets</span> 1 / x$</span> \n        <span class=\"token function selector\">\\STATE</span> <span class=\"token equation string\">$N <span class=\"token equation-command regex\">\\gets</span> -n$</span> \n        <span class=\"token function selector\">\\ELSE</span> \n        <span class=\"token function selector\">\\STATE</span> <span class=\"token equation string\">$X <span class=\"token equation-command regex\">\\gets</span> x$</span> \n        <span class=\"token function selector\">\\STATE</span> <span class=\"token equation string\">$N <span class=\"token equation-command regex\">\\gets</span> n$</span> \n        <span class=\"token function selector\">\\ENDIF</span> \n        <span class=\"token function selector\">\\WHILE</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$N <span class=\"token equation-command regex\">\\neq</span> 0$</span><span class=\"token punctuation\">}</span> \n        <span class=\"token function selector\">\\IF</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$N$</span> is even<span class=\"token punctuation\">}</span> \n        <span class=\"token function selector\">\\STATE</span> <span class=\"token equation string\">$X <span class=\"token equation-command regex\">\\gets</span> X <span class=\"token equation-command regex\">\\times</span> X$</span> \n        <span class=\"token function selector\">\\STATE</span> <span class=\"token equation string\">$N <span class=\"token equation-command regex\">\\gets</span> N / 2$</span> \n        <span class=\"token function selector\">\\ELSE</span><span class=\"token punctuation\">[</span><span class=\"token equation string\">$N$</span> is odd<span class=\"token punctuation\">]</span> <span class=\"token function selector\">\\STATE</span> <span class=\"token equation string\">$y <span class=\"token equation-command regex\">\\gets</span> y <span class=\"token equation-command regex\">\\times</span> X$</span> \n        <span class=\"token function selector\">\\STATE</span> <span class=\"token equation string\">$N <span class=\"token equation-command regex\">\\gets</span> N - 1$</span> \n        <span class=\"token function selector\">\\ENDIF</span> \n        <span class=\"token function selector\">\\ENDWHILE</span> \n    <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithmic</span><span class=\"token punctuation\">}</span> \n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注意：<br>要在序言区引入宏包：\\usepackage{algorithm, algorithmic}<br>\\renewcommand{\\algorithmicrequire}{\\textbf{Input:}} 将官方的require关键字换成常用的input<br>\\renewcommand{\\algorithmicensure}{\\textbf{Output:}} 将官方的ensure关键字换成常用的output</p>\n</blockquote>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211213105605.png\" alt=\"编译后的效果\"></p>\n<h3 id=\"algorithm2e\"><a href=\"#algorithm2e\" class=\"headerlink\" title=\"algorithm2e\"></a>algorithm2e</h3><ol>\n<li><strong>第一个示例</strong></li>\n</ol>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\documentclass</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">article</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">[</span>linesnumbered,ruled<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm2e</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">% 导入宏包</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">% 伪代码开始</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>identify Row Context<span class=\"token punctuation\">}</span>  \n  <span class=\"token function selector\">\\KwIn</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$r_i$</span>, <span class=\"token equation string\">$Backgrd(T_i)$</span>=<span class=\"token equation string\">${T_1,T_2,<span class=\"token equation-command regex\">\\ldots</span> ,T_n}$</span> and similarity threshold <span class=\"token equation string\">$<span class=\"token equation-command regex\">\\theta</span>_r$</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token function selector\">\\KwOut</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$con(r_i)$</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token equation string\">$con(r_i)= <span class=\"token equation-command regex\">\\Phi</span>$</span><span class=\"token function selector\">\\;</span>  \n  <span class=\"token function selector\">\\For</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$j=1;j <span class=\"token equation-command regex\">\\le</span> n;j <span class=\"token equation-command regex\">\\ne</span> i$</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token punctuation\">{</span>  \n    float <span class=\"token equation string\">$maxSim=0$</span> <span class=\"token function selector\">\\;</span>  \n    <span class=\"token equation string\">$r^{maxSim}=null$</span> <span class=\"token function selector\">\\;</span>  \n    <span class=\"token function selector\">\\While</span><span class=\"token punctuation\">{</span>not end of <span class=\"token equation string\">$T_j$</span><span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">{</span>  \n      compute Jaro(<span class=\"token equation string\">$r_i,r_m$</span>)(<span class=\"token equation string\">$r_m<span class=\"token equation-command regex\">\\in</span> T_j$</span>) <span class=\"token function selector\">\\;</span>  \n      <span class=\"token function selector\">\\If</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$(Jaro(r_i,r_m) <span class=\"token equation-command regex\">\\ge</span> <span class=\"token equation-command regex\">\\theta</span>_r)<span class=\"token equation-command regex\">\\wedge</span> (Jaro(r_i,r_m)<span class=\"token equation-command regex\">\\ge</span> r^{maxSim})$</span><span class=\"token punctuation\">}</span>  \n      <span class=\"token punctuation\">{</span>  \n        replace <span class=\"token equation string\">$r^{maxSim}$</span> with <span class=\"token equation string\">$r_m$</span> <span class=\"token function selector\">\\;</span>  \n      <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token equation string\">$con(r_i)=con(r_i)<span class=\"token equation-command regex\">\\cup</span> {r^{maxSim}}$</span> <span class=\"token function selector\">\\;</span>  \n  <span class=\"token punctuation\">}</span>  \n  return <span class=\"token equation string\">$con(r_i)$</span> <span class=\"token function selector\">\\;</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span>   <span class=\"token comment\" spellcheck=\"true\">% 伪代码结束</span>\n\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span> \n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211213112018.png\"></p>\n<blockquote>\n<p><strong>注意：</strong>每一行的结尾必须以 <code>\\;</code> 结束, 只有那些以宏命令开始的不应该以 <code>\\;</code> 结束, 例如在此示例中的 <code>\\caption</code>、<code>\\KwIn</code> 、<code>\\KwOut</code>属于宏命令, 不需要以 <code>\\;</code> 结尾. </p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>常用环境</strong></li>\n</ol>\n<ul>\n<li>algorithm：这是最常用的环境</li>\n<li>algorithm*：与前者一样, 但它用于两列文本中, 使算法跨两列</li>\n</ul>\n<ol start=\"3\">\n<li><strong>基本关键字</strong></li>\n</ol>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211213142106.png\"></p>\n<ol start=\"4\">\n<li><strong>算法布局</strong></li>\n</ol>\n<p>在引入宏包时，在option选项中加入了 linesnumbered 和 ruled，所以在算法伪代码中会有行编号和上下尺（即三线表样式）。当然，外部的封装环境不止 ruled 一种选项, 也可以选择完全封闭的选项亦或者完全没有外部边框的选项。</p>\n<ul>\n<li>boxed：将算法封装在框中</li>\n<li>boxruled：用方框将算法环绕，将标题放在上方，并在标题后添加一行</li>\n<li>ruled：在顶部和底部都有一条线的算法。请注意，标题不再位于算法下方，而是在算法开始时设置</li>\n<li>algoruled：如上所述，但在尺后留有多余的空格</li>\n<li>tworuled：tworuled 的行为就 ruled 的一样，但标题后面没有加一行</li>\n<li>plain：默认值，无功能</li>\n</ul>\n<ol start=\"5\">\n<li><strong>第二个示例</strong></li>\n</ol>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\documentclass</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">article</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">[</span>linesnumbered,ruled<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm2e</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\renewcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\algorithmcfname</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>Pseudo code<span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">% 这句如果写在引言区，将对全部算法生效</span>\n  <span class=\"token function selector\">\\SetKwData</span><span class=\"token punctuation\">{</span>Left<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">}</span><span class=\"token function selector\">\\SetKwData</span><span class=\"token punctuation\">{</span>This<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>this<span class=\"token punctuation\">}</span><span class=\"token function selector\">\\SetKwData</span><span class=\"token punctuation\">{</span>Up<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>up<span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\SetKwFunction</span><span class=\"token punctuation\">{</span>Union<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>Union<span class=\"token punctuation\">}</span><span class=\"token function selector\">\\SetKwFunction</span><span class=\"token punctuation\">{</span>FindCompress<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>FindCompress<span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\SetKwInOut</span><span class=\"token punctuation\">{</span>Input<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>input<span class=\"token punctuation\">}</span><span class=\"token function selector\">\\SetKwInOut</span><span class=\"token punctuation\">{</span>Output<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>output<span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\Input</span><span class=\"token punctuation\">{</span>A bitmap <span class=\"token equation string\">$Im$</span> of size <span class=\"token equation string\">$w<span class=\"token equation-command regex\">\\times</span> l$</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\Output</span><span class=\"token punctuation\">{</span>A partition of the bitmap<span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\BlankLine</span>\n  <span class=\"token function selector\">\\emph</span><span class=\"token punctuation\">{</span>special treatment of the first line<span class=\"token punctuation\">}</span><span class=\"token function selector\">\\;</span>\n  <span class=\"token function selector\">\\For</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$i<span class=\"token equation-command regex\">\\leftarrow</span> 2$</span> <span class=\"token function selector\">\\KwTo</span> <span class=\"token equation string\">$l$</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function selector\">\\emph</span><span class=\"token punctuation\">{</span>special treatment of the first element of line <span class=\"token equation string\">$i$</span><span class=\"token punctuation\">}</span><span class=\"token function selector\">\\;</span>\n    <span class=\"token function selector\">\\For</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$j<span class=\"token equation-command regex\">\\leftarrow</span> 2$</span> <span class=\"token function selector\">\\KwTo</span> <span class=\"token equation string\">$w$</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">forins</span><span class=\"token punctuation\">}</span>\n      <span class=\"token function selector\">\\Left</span><span class=\"token equation string\">$<span class=\"token equation-command regex\">\\leftarrow</span>$</span> <span class=\"token function selector\">\\FindCompress</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$Im[i,j-1]$</span><span class=\"token punctuation\">}</span><span class=\"token function selector\">\\;</span>\n      <span class=\"token function selector\">\\Up</span><span class=\"token equation string\">$<span class=\"token equation-command regex\">\\leftarrow</span>$</span> <span class=\"token function selector\">\\FindCompress</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$Im[i-1,]$</span><span class=\"token punctuation\">}</span><span class=\"token function selector\">\\;</span>\n      <span class=\"token function selector\">\\This</span><span class=\"token equation string\">$<span class=\"token equation-command regex\">\\leftarrow</span>$</span> <span class=\"token function selector\">\\FindCompress</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$Im[i,j]$</span><span class=\"token punctuation\">}</span><span class=\"token function selector\">\\;</span>\n      <span class=\"token function selector\">\\If</span>(<span class=\"token function selector\">\\tcp*</span><span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>O(<span class=\"token function selector\">\\Left</span>,<span class=\"token function selector\">\\This</span>)==1<span class=\"token punctuation\">}</span>)<span class=\"token punctuation\">{</span><span class=\"token function selector\">\\Left</span> compatible with <span class=\"token function selector\">\\This</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">lt</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\lIf</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\Left</span> <span class=\"token equation string\">$&lt;$</span> <span class=\"token function selector\">\\This</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\Union</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\Left</span>,<span class=\"token function selector\">\\This</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\lElse</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\Union</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\This</span>,<span class=\"token function selector\">\\Left</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\lForEach</span><span class=\"token punctuation\">{</span>element <span class=\"token equation string\">$e$</span> of the line <span class=\"token equation string\">$i$</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\FindCompress</span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>disjoint decomposition<span class=\"token punctuation\">}</span>\n  <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algo_disjdecomp</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211213141730.png\" alt=\"编译后的效果\"></p>\n<hr>\n<h1 id=\"Overleaf写LaTeX\"><a href=\"#Overleaf写LaTeX\" class=\"headerlink\" title=\"Overleaf写LaTeX\"></a>Overleaf写LaTeX</h1><h2 id=\"Overleaf网站：链接\"><a href=\"#Overleaf网站：链接\" class=\"headerlink\" title=\"Overleaf网站：链接\"></a>Overleaf网站：<a href=\"https://cn.overleaf.com/project\">链接</a></h2><p>Overleaf是一个使用LaTeX进行多人协同编辑的平台，可以免费注册和使用，不用下载LaTeX软件，是最为著名的LaTeX在线协作系统。主要特色是有LaTeX插件，编辑功能十分完善，有实时预览（即编即看，无需手动编译）的功能。科研工作者可以在各大期刊的网站上下载到其Overleaf模板，进行论文写作。</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf%E9%A6%96%E9%A1%B5.png\" alt=\"Overleaf项目首页\"></p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212153121.png\"></p>\n<ul>\n<li><strong>空白项目</strong>：一个最基本的.tex文档，适用于从零开始定制个人性化的板式。</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154608.png\" alt=\"空白项目\"></p>\n<ul>\n<li><strong>样例项目</strong>：一个通用的模板，包含了一篇论文的基本结构、基础样式，作者可以在此模板上填充自己的内容，适用于快速开始一篇论文的撰写。</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154413.png\" alt=\"带模板项目\"></p>\n<ul>\n<li><strong>上传项目</strong>：通过其它地方下载的模板创建项目，适用于使用所投期刊提供的模板撰写论文。</li>\n</ul>\n<ul>\n<li><strong>从模板库导入</strong>：通过Overleaf平台的模板库中寻找模板，里面有各式各样的模板。</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212160030.png\"></p>\n<h2 id=\"编辑页面介绍\"><a href=\"#编辑页面介绍\" class=\"headerlink\" title=\"编辑页面介绍\"></a>编辑页面介绍</h2><p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233704.png\" alt=\"页面介绍\"></p>\n<h2 id=\"上传图片\"><a href=\"#上传图片\" class=\"headerlink\" title=\"上传图片\"></a>上传图片</h2><p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf_uploadFig.png\"></p>\n<h2 id=\"下载完成的文档\"><a href=\"#下载完成的文档\" class=\"headerlink\" title=\"下载完成的文档\"></a>下载完成的文档</h2><p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233900.png\"></p>\n<h1 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h1><ul>\n<li>LaTeX工作室在知识库：<a href=\"https://www.latexstudio.net/texdoc/#/\">链接</a></li>\n<li>华东师范大学潘建瑜老师讲义：<a href=\"http://math.ecnu.edu.cn/~jypan/Teaching/Latex/\">链接</a></li>\n<li>简短的 LaTeX2e 介绍：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/CTAN/info/lshort/chinese/lshort-zh-cn.pdf\">链接</a></li>\n<li>algorithm2e 宏包官方文档：<a href=\"http://tug.ctan.org/macros/latex/contrib/algorithm2e/doc/algorithm2e.pdf\">链接</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"LaTeX基础\"><a href=\"#LaTeX基础\" class=\"headerlink\" title=\"LaTeX基础\"></a>LaTeX基础</h1><h2 id=\"TEX是什么\"><a href=\"#TEX是什么\" class=\"headerlink\" title=\"TEX是什么\"></a>TEX是什么</h2><p>TEX 是高德纳 (Donald E. Knuth) 为排版文字和数学公式而开发的程序。</p>\n<ul>\n<li>TEX 系统提供了 300 + 600 多条基本的排版命令 </li>\n<li>TEX 是目前公认的数学公式排版最好的排版语言</li>\n<li>TEX 是免费的 </li>\n<li>TEX 的名字来自大写的希腊字母 (τ, ϵ, χ)，意思是“科技”和“艺术” </li>\n</ul>\n<h2 id=\"LaTeX是什么\"><a href=\"#LaTeX是什么\" class=\"headerlink\" title=\"LaTeX是什么\"></a>LaTeX是什么</h2><p>LaTeX 是一个写作工具，可以用于创建具有专业排版的文档。它基于所见即所得的思想，即写作者只需要关注文档的内容，而计算机负责将其格式化。用户不再需要像 Word 中那样，在页面上用空格来控制格式，而是只需要输入纯文本，让 LaTeX 处理剩下的一切。</p>\n<blockquote>\n<p> LaTeX 是一种使用 TEX 程序作为排版引擎的格式，可以粗略地将它理解成是对 TEX 的一层封装。 </p>\n</blockquote>\n<h2 id=\"LaTeX的用处\"><a href=\"#LaTeX的用处\" class=\"headerlink\" title=\"LaTeX的用处\"></a>LaTeX的用处</h2><p>LaTeX 被广泛应用于科学文档、书籍以及许多其他出版物。它不仅可以创建精美的排版文档，而且还使得用户可以很快速地处理复杂的排版问题，比如输入数学公式、创建目录、管理引用、创建书目、保持布局一致等等。由于可用的开源软件包数量众多，因此 LaTeX 有无限的可能性。这些软件包赋予了用户更多的能力，例如添加脚注，绘制原理图，创建表格等。</p>\n<p>&nbsp;<br>人们使用 LaTeX 的最重要原因之一就是它分离了文档的内容与样式。这意味着你只需要编写文档的内容，我们就可以轻松更改其外观。同样，你也可以创建一个文档模板，用它来统一许多不同文档的外观，这样学术期刊可以创建投稿模板。这些模板具有预制的布局，只需要往里面添加内容即可。实际上，LaTeX 有数百种模板，覆盖从简历到幻灯片的所有内容。</p>\n<h2 id=\"LaTeX的优点\"><a href=\"#LaTeX的优点\" class=\"headerlink\" title=\"LaTeX的优点\"></a>LaTeX的优点</h2><ul>\n<li>LaTeX 特点<ul>\n<li>专注于内容撰写，很少操心文档的版面设计</li>\n<li>自动编号：章节、图表、公式定理、参考文献 ·······</li>\n<li>自动生成目录、索引</li>\n<li>公式、定理、参考文献、插图、页码等可以交叉引用</li>\n<li>可以通过各种宏包扩展其功能, 实现各种特殊要求</li>\n</ul>\n</li>\n<li>LaTeX VS. Word<ul>\n<li>Word 简单易用，所见即所得，普通办公文档建议用 Word</li>\n<li>LaTeX 输出美观，质量高，科技排版 (特别是数学) 推荐使用 LaTeX</li>\n<li>LaTeX 能实现 Word 的所有功能，定制性高，但易用性不如 Word</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写LaTeX的工具\"><a href=\"#写LaTeX的工具\" class=\"headerlink\" title=\"写LaTeX的工具\"></a>写LaTeX的工具</h2><h3 id=\"TEX的发行版\"><a href=\"#TEX的发行版\" class=\"headerlink\" title=\"TEX的发行版\"></a>TEX的发行版</h3><ul>\n<li>Windows 系统：TeXLive (推荐)，MiKTeX，CTEX 套装 (不推荐)</li>\n<li>Unix/Linux 系统：TeXLive</li>\n<li>Mac OS 系统：TeXLive，MacTeX</li>\n</ul>\n<h3 id=\"下载和安装\"><a href=\"#下载和安装\" class=\"headerlink\" title=\"下载和安装\"></a>下载和安装</h3><ul>\n<li>TeXLive : <a href=\"http://tug.org/texlive/\">http://tug.org/texlive/</a> (大而全，全部宏包)</li>\n<li>编辑器: WinEdt, TeXworks, TeXmaker, TeXStudio, vim, emacs, …</li>\n<li>安装演示: 以 <a href=\"http://math.ecnu.edu.cn/~jypan/Teaching/Latex/Install/install_texlive_gb2312.html\">TeXLive 2017</a> 为例</li>\n</ul>\n<h3 id=\"在线平台Overleaf\"><a href=\"#在线平台Overleaf\" class=\"headerlink\" title=\"在线平台Overleaf\"></a>在线平台<a href=\"https://cn.overleaf.com/\">Overleaf</a></h3><p>本文章接下来对LaTeX的使用介绍主要以该平台为例。</p>\n<hr>\n<h1 id=\"LaTeX排版\"><a href=\"#LaTeX排版\" class=\"headerlink\" title=\"LaTeX排版\"></a>LaTeX排版</h1><h2 id=\"LaTeX文稿的排版过程\"><a href=\"#LaTeX文稿的排版过程\" class=\"headerlink\" title=\"LaTeX文稿的排版过程\"></a>LaTeX文稿的排版过程</h2><ol>\n<li><p><strong>编写源文件</strong>：tex 源文件为纯文本文件，以 <code>.tex</code> 为扩展名</p>\n<ul>\n<li>可以使用任何文本编辑器编写, 如: WinEdt, EditPlus, Vi, Emacs, 推荐 WinEdt，专门针对 tex 开发, 提供许多便捷功能, 有助于提高排版效率</li>\n</ul>\n</li>\n<li><p><strong>编译</strong>：用 <code>pdflatex</code> (英文文档) 或 <code>xelatex</code> (中文文档) 编译，生成相应的 pdf 文件</p>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212181900.png\" alt=\"来源：华东师范大学潘建瑜老师的课件\"></p>\n<h2 id=\"第一个LaTeX文件\"><a href=\"#第一个LaTeX文件\" class=\"headerlink\" title=\"第一个LaTeX文件\"></a>第一个LaTeX文件</h2><p>创建一个新的 LaTeX 项目。你可以在自己的电脑上创建 <code>.tex</code> 文件，也可以在 Overleaf 中启动新项目。让我们从最简单的示例开始：</p>\n<pre><code class=\"latex\">\\documentclass&#123;article&#125; %指定文档类型\n% 序言区\n%\n\\begin&#123;document&#125;\n% 正文\nFirst document. This is a simple example, with no extra parameters or packages included.\n\\end&#123;document&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212183155.png\" alt=\"编译后的效果\"></p>\n<p>可以看到，LaTeX 已经对文本进行了格式化（如首行缩进）。下面我们仔细看一下上面这段代码每个部分的功能。</p>\n<ul>\n<li><p>代码的第一行声明了文档的类型，称为**类 (class)**。类控制文档的整体外观，不同类型的文档需要选择不同的类，比如，简历与论文需要不同的类。在这个例子中，类是 <code>article</code>，是最简单和最常见的 LaTeX 类。其他类型的文档可能需要使用不同的类，例如 <code>book</code> 或 <code>report</code>。</p>\n</li>\n<li><p>在<code>\\begin &#123;document&#125;</code> 和 <code>\\end &#123;document&#125;</code>这两个标记之间写入文档内容。这部分就是文档的**主体 (body)**，你可以在此处开始编写和更改文本。要在 PDF 中查看更改的结果，必须首先编译文档。</p>\n</li>\n</ul>\n<blockquote>\n<p>在 Overleaf 中只需单击 重新编译（Recompile）。还可以单击重新编译按钮旁边的小箭头，并将 “自动编译” 设置为 “开”，这样编辑文件时项目将会自动重新编译。<br>LATEX 源文件: 正文 + 命令 + 注解<br>排版命令 (简称 命令): 反斜杠开头的字符串<br>注解符: 百分号 %，注释的内容不会被显示出来<br>文档类型: \\documentclass{…} (论文, 书籍, 幻灯片, 海报)<br>环境: <code>\\begin&#123;...&#125;</code> 开头, <code>\\end&#123;...&#125;</code> 结尾</p>\n</blockquote>\n<h2 id=\"LaTex命令\"><a href=\"#LaTex命令\" class=\"headerlink\" title=\"LaTex命令\"></a>LaTex命令</h2><pre><code class=\"latex\">\\command\n\\command[option]&#123;arguments&#125;\n</code></pre>\n<ul>\n<li>方括号中的是可选的 (称为选项)，花括号中的参数是必需的。</li>\n</ul>\n<pre><code class=\"latex\">例: 一些常用命令\n\\documentcalss, \\title, \\author, \\date, \\usepackage\n\\begin&#123;环境名&#125;, \\end&#123;环境名&#125; 组成一个环境\n</code></pre>\n<ul>\n<li>定义新命令</li>\n</ul>\n<pre><code class=\"latex\">\\newcommand&#123;新命令&#125;&#123;命令内容&#125;\n\\renewcommand&#123;已有命令&#125;&#123;命令内容&#125;\n\n例：\n\\newcommand&#123;\\eps&#125;&#123;\\varepsilon&#125; % $\\eps$ = ε\n</code></pre>\n<h2 id=\"分组和环境\"><a href=\"#分组和环境\" class=\"headerlink\" title=\"分组和环境\"></a>分组和环境</h2><ul>\n<li>分组<ul>\n<li>有些命令只对其参数起作用，如<code>\\textbf&#123;abc&#125;</code></li>\n<li>有些命令对后面所有的内容都起作用，这些命令通常也称为声明，如<code>\\bfseries</code></li>\n<li>可以利用大括号 (即分组) 来限制声明的作用范围</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"latex\">This is \\textbf&#123;bold face&#125; style.    % bold face 粗体显示\nThis is \\bfseries bold face style.   % bold face style. 粗体显示\nThis is &#123;\\bfseries bold face&#125; style. % bold face 粗体显示\n</code></pre>\n<ul>\n<li>环境：某些具有特定格式的内容需要放在相应的环境中, 如表格，数学公式等<ul>\n<li>document 是 LaTeX 的一个最基本的环境，一篇文档有且只能有一个 document 环境</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"latex\">\\begin&#123;环境名&#125;\n.\n.\n.\n\\end&#123;环境名&#125;\n</code></pre>\n<h2 id=\"文档的序言区\"><a href=\"#文档的序言区\" class=\"headerlink\" title=\"文档的序言区\"></a>文档的序言区</h2><p>在基本框架中，文本是在 <code>\\begin &#123;document&#125;</code> 命令之后输入的。在这个命令之前 <code>.tex</code> 文件中的所有内容都称为 **序言 (preamble)**。</p>\n<pre><code class=\"latex\">\\documentclass[12pt, letterpaper]&#123;article&#125;\n\\usepackage[utf8]&#123;inputenc&#125;\n</code></pre>\n<ul>\n<li>位于源文件的最前面, 用于指定文档的整体结构和布局, 必须且只能选一种<ul>\n<li>常用文档类: article, book, beamer, ctexart, ctexbook, ctexbeamer. 常用选项:<ul>\n<li>10pt(缺省值)，11pt，12pt，指定基本字体的大小</li>\n<li>letterpaper(缺省值)，a4paper，a5paper，…  指定纸张的大小</li>\n<li>单双面选项：oneside，twoside，openright，openany</li>\n<li>数学公式：leqno (公式编号在左边)，fleqn (靠左显示行间公式)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>导言区用于放置<strong>全局控制命令</strong>，如：调用宏包，设置页面大小，…</li>\n<li>放在导言区的命令对整个文档都起作用</li>\n</ul>\n<blockquote>\n<p>更多有关 <a href=\"https://www.overleaf.com/learn/Page_size_and_margins\">页面大小和边距</a> 的信息，可以参阅这篇文章。</p>\n</blockquote>\n<p><code>\\usepackage[utf8]&#123;inputenc&#125;</code>这行命令指定了文档的编码，可以省略或更改为其他编码，但建议使用 utf-8。除非特别需要其他编码，否则请将此行添加到序言中。</p>\n<h2 id=\"添加标题、作者和日期\"><a href=\"#添加标题、作者和日期\" class=\"headerlink\" title=\"添加标题、作者和日期\"></a>添加标题、作者和日期</h2><p>要将标题、作者和日期添加到文档中，就必须<strong>在序言中</strong>（不是文章的主体中）添加下面三行。它们是：</p>\n<ul>\n<li><code>\\title&#123;标题&#125;</code></li>\n<li><code>\\author&#123;姓名&#125;</code><ul>\n<li><code>\\thanks&#123;简介&#125;</code>在 author 命令的大括号里添加这条命令，可以添加上标和脚注。如果你需要在文章中感谢一个机构，这个功能将非常有用。</li>\n</ul>\n</li>\n<li><code>\\date&#123;February 2021&#125;</code>你可以手动输入日期，或使用 \\today 命令，以便在编译文档时自动更新日期。</li>\n</ul>\n<p>&nbsp;<br>现在可以使用 <code>\\maketitle</code> 命令在文档上打印这些信息。这条命令应该写在文档 主体 (body) 中你想要打印标题的位置。示例：</p>\n<pre><code class=\"latex\">\\documentclass[12pt, letterpaper, twoside]&#123;article&#125;\n\\usepackage[utf8]&#123;inputenc&#125;\n\n\\title&#123;LaTeX Tutorial&#125;\n\\author&#123;Cheng Budong \\thanks&#123;School of computer Science and Engineering&#125;&#125;\n\\date&#123;December 2021&#125;\n\n\\begin&#123;document&#125;\n\\maketitle\nWe have now added a title, author and date to our first \\LaTeX&#123;&#125; document!\n\\end&#123;document&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212194706.png\" alt=\"编译后的效果\"></p>\n<h2 id=\"换行，分段，分页\"><a href=\"#换行，分段，分页\" class=\"headerlink\" title=\"换行，分段，分页\"></a>换行，分段，分页</h2><ul>\n<li><p>换行：自然换行 (若需强制换行，可使用 <code>\\\\</code> 或 <code>\\linebreak</code>)</p>\n<ul>\n<li>一般情况下, 不建议使用强制换行</li>\n</ul>\n</li>\n<li><p>分段：一个空行或 <code>\\par</code></p>\n<ul>\n<li>建议使用空行进行分段，简洁直观</li>\n</ul>\n</li>\n<li><p>分页：自然分页，若需 强制分页, 可用 <code>\\newpage</code>，<code>\\clearpage</code> 或 <code>\\pagebreak</code></p>\n<ul>\n<li>一般情况下，不建议使用强制分页</li>\n</ul>\n</li>\n<li><p>行间距：行间距伸展因子 <code>\\baselinestretch</code> 或伸展命令 <code>\\linespread</code></p>\n<pre><code class=\"latex\">\\renewcommand&#123;\\baselinestretch&#125;&#123;1.2&#125;\n\\linespread&#123;1.2&#125;\n</code></pre>\n</li>\n<li><p>段落间距和段落缩进：用自动设定的即可，英文每节的第一段首行不会自动缩进</p>\n</li>\n</ul>\n<blockquote>\n<p>可以在这篇有关 <a href=\"https://www.overleaf.com/learn/Paragraphs_and_new_lines\">段落和换行</a> 的文章中找到更多信息。</p>\n</blockquote>\n<h2 id=\"加粗、斜体和下划线\"><a href=\"#加粗、斜体和下划线\" class=\"headerlink\" title=\"加粗、斜体和下划线\"></a>加粗、斜体和下划线</h2><ul>\n<li>加粗：在 LaTeX 中，加粗字体使用 <code>\\textbf&#123;&#125;</code> 命令。</li>\n<li>斜体：在 LaTeX 中，斜体使用 <code>\\textit&#123;&#125;</code> 命令。</li>\n<li>下划线：在 LaTeX 中，下划线使用 <code>\\underline&#123;&#125;</code> 命令。</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"latex\">Some of the \\textbf&#123;greatest&#125;\nwere made by \\textbf&#123;\\textit&#123;accident&#125;&#125;.\ndiscoveries in \\underline&#123;science&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212200351.png\" alt=\"编译后的效果\"></p>\n<h2 id=\"引入宏包\"><a href=\"#引入宏包\" class=\"headerlink\" title=\"引入宏包\"></a>引入宏包</h2><p>宏包可用于更改 LaTeX 文档的默认外观，或实现更多功能。</p>\n<ul>\n<li>宏包调用方法 (只能出现在导言区)  <code>\\usepackage[选项]&#123;宏包名&#125;</code></li>\n<li>如果宏包不带选项, 则可以多个一起调用, 如: </li>\n</ul>\n<pre><code class=\"latex\">\\usepackage&#123;amsmath,amssymb,amsfonts&#125;\n\\usepackage[pagebackref]&#123;hyperref&#125;\n\\usepackage[numbers,sort&amp;compress]&#123;natbib&#125;\n</code></pre>\n<h2 id=\"添加图片\"><a href=\"#添加图片\" class=\"headerlink\" title=\"添加图片\"></a>添加图片</h2><p>LaTeX本身不能管理图像，因此需要使用一个 包 (package)。在这个例子中，要实现在文档中添加图片，需要使用 graphicx 包。graphicx 包提供了新的命令<code>\\includegraphics&#123;&#125;</code>和<code>\\graphicspath&#123;&#125;</code>。</p>\n<ul>\n<li>支持的图片格式：pdf，jpg，png (pdfLaTeX 和 xeLaTeX 编译)<ul>\n<li>eps 格式的图片，epstopdf 宏包, 自动将 eps 转换为 pdf</li>\n</ul>\n</li>\n<li>图形文件名中可以含路径</li>\n<li>常用选项有<ul>\n<li>width, height：指定图形的宽度和高度 (若只指定宽度或高度, 则按比例缩放)</li>\n<li>scale：缩放因子，如 scale=0.5</li>\n</ul>\n</li>\n</ul>\n<p>添加图片的示例：</p>\n<pre><code class=\"latex\">% 在序言区导入包\n\\usepackage&#123;graphicx&#125;\n\\graphicspath&#123;&#123;images/&#125;&#125; % 告诉LaTeX，这些图片保存在当前目录下名为images的文件夹中。\n\n% 在需要插入图片的地方写\n\\includegraphics[scale=0.5]&#123;overleaf.png&#125; % 将图像实际包含在文档中的命令，scale缩放因子\n</code></pre>\n<blockquote>\n<p>注意：在 Overleaf 中，你需要首先上传图片。有关更多详细信息，请参见有关<a href=\"https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes#Generating_high-res_and_low-res_images\">生成高分辨率和低分辨率图像</a>的内容。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212204315.png\" alt=\"编译后的效果\"></p>\n<h3 id=\"标题、标签和引用\"><a href=\"#标题、标签和引用\" class=\"headerlink\" title=\"标题、标签和引用\"></a>标题、标签和引用</h3><p>可以像下面这样，在 figure 环境中对图片添加标题、标签和引用。</p>\n<pre><code class=\"latex\">\\begin&#123;figure&#125;[h]\n    \\centering\n    \\includegraphics[width=0.5\\textwidth]&#123;overleaf&#125;\n    \\caption&#123;overleaf icon&#125;\n    \\label&#123;fig:icon&#125;\n\\end&#123;figure&#125;\nAs you can see in the figure \\ref&#123;fig:icon&#125;.\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210237.png\" alt=\"编译后的效果\"></p>\n<p>在这个示例中，有三个重要的命令：</p>\n<ul>\n<li>\\caption{overleaf icon}：此命令为图形设置标题。你可以将这条命令放置在图的上方或下方。</li>\n<li>\\label{fig:icon}：如果你需要在文档中引用图像，请使用这条命令为图像设置标签。标签可以为图像编上号，并与下一个命令结合，对图片进行引用。</li>\n<li>\\ref{fig:icon}：这条命令在编译后将显示替换为被引用图片对应的编号。</li>\n</ul>\n<blockquote>\n<p>将图像放置在 LaTeX 文档中时，应始终将它们放置在 figure 环境或类似环境中，以便 LaTeX 适配图像和文字。<br>图片排版技巧：<a href=\"https://blog.csdn.net/qq_31347869/article/details/103832190\">图片的插入及排版方法</a>，</p>\n</blockquote>\n<hr>\n<h2 id=\"创建列表\"><a href=\"#创建列表\" class=\"headerlink\" title=\"创建列表\"></a>创建列表</h2><p>在 LaTeX 中创建列表非常简单。可以使用不同的环境来创建不同形式的列表。环境是我们文档中具有不同呈现形式的各个部分。它们以<code>\\begin&#123;...&#125;</code> 命令开始，以<code>\\end&#123;...&#125;</code>命令结束。</p>\n<p>&nbsp;<br>列表主要有两种类型，<strong>有序列表</strong>和<strong>无序列表</strong>。分别使用不同的环境。</p>\n<h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><p>无序列表是由 itemize 环境生成的。每个条目之前必须有 \\item，如下所示。默认情况下，各个条目用黑点表示。条目中的文本可以是任何长度。</p>\n<pre><code class=\"latex\">\\begin&#123;itemize&#125;\n\\item[标签] 条目内容\n· · · · · ·\n\\end&#123;itemize&#125;\n</code></pre>\n<ul>\n<li>缺省的标签与层数有关，分别为：<code>·，-，∗</code></li>\n<li>也可通过选项标签来指定标签</li>\n<li>不要标签：\\item </li>\n</ul>\n<p>无序列表示例：</p>\n<pre><code class=\"latex\">\\begin&#123;itemize&#125;\n  \\item The individual entries are indicated with a black dot, a so-called bullet.\n  \\item The text in the entries may be of any length.\n\\end&#123;itemize&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212210954.png\" alt=\"编译后的效果\"></p>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><p>有序列表在 enumerate 环境中创建，针对条目的语法与无序列表一致。与无序列表一样，每个条目前必须添加 \\item，它将自动生成标记该项目的数字，由从 1 开始。</p>\n<pre><code class=\"latex\">\\begin&#123;enumerate&#125;\n\\item[标签] 条目内容\n· · · · · ·\n\\end&#123;enumerate&#125;\n</code></pre>\n<ul>\n<li>缺省标签为自动编号的符号，与层数有关，分别为:<ul>\n<li>第一层：阿拉伯数字后跟圆点: 1. 2.</li>\n<li>第二层：圆括号包围的小写拉丁字母: (a) (b)</li>\n<li>第三层：小写罗马数字后跟圆点: i. ii.</li>\n<li>第四层：大写拉丁字母后跟圆点: A. B.</li>\n</ul>\n</li>\n<li>高级列表功能：list 环境，enumitem 宏包</li>\n</ul>\n<p>有序列表示例：</p>\n<pre><code class=\"latex\">\\begin&#123;enumerate&#125;\n  \\item This is the first entry in our list\n  \\item The list numbers increase with each entry we add\n\\end&#123;enumerate&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212211202.png\" alt=\"编译后的效果\"></p>\n<hr>\n<h2 id=\"添加数学表达式\"><a href=\"#添加数学表达式\" class=\"headerlink\" title=\"添加数学表达式\"></a>添加数学表达式</h2><p>LaTeX 中有两种模式用于数学表达式：<strong>行内 (inline)模式</strong>和<strong>行间 (display)</strong> 模式。行内模式编写的公式是文本中的一部分，行间模式编写的公式不在段落中，而是放在单独的行上。</p>\n<h3 id=\"行内\"><a href=\"#行内\" class=\"headerlink\" title=\"行内\"></a>行内</h3><p>要在行内模式下添加数学表达式，可以使用以下定界符之一，它们作用相同。选择哪个完全取决于个人喜好，推荐第一种。</p>\n<pre><code class=\"latex\">$ ... $\n\\(... \\)\n\\begin&#123;math&#125; ... \\end&#123;math&#125;\n</code></pre>\n<p>行内模式示例：</p>\n<pre><code class=\"latex\">In physics, the mass-energy equivalence is stated\nby the equation $E=mc^2$, discovered in 1905 by Albert Einstein.\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212213703.png\" alt=\"编译后的效果\"></p>\n<h3 id=\"行间\"><a href=\"#行间\" class=\"headerlink\" title=\"行间\"></a>行间</h3><p>要在行间模式下显示数学公式，可以使用以下定界符之一。</p>\n<pre><code class=\"latex\">\\[ ... \\] % displaymath 环境的简化形式\n$$ ··· $$ % 与上面等价, 但可用\\eqno 或 \\leqno 手工编号\n\\begin&#123;displaymath&#125; ... \\end&#123;displaymath&#125; % 不带编号的单行公式数学环境\n\\begin&#123;equation&#125; ... \\end&#123;equation&#125; % 带 自动编号 的单行公式数学环境\n</code></pre>\n<p>行间模式示例：</p>\n<pre><code class=\"latex\">The mass-energy equivalence is described by the famous equation\n\\[E=mc^2 \\]\ndiscovered in 1905 by Albert Einstein. In natural units ($c = 1$), \nthe formula expresses the identity\n\\begin&#123;equation&#125;\nE=m\n\\end&#123;equation&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212215015.png\" alt=\"编译后的效果\"></p>\n<blockquote>\n<p>重要说明：equation* 环境是由外部软件包提供的，请参阅 <a href=\"https://www.overleaf.com/learn/Aligning_equations\">amsmath文章</a>。<br><a href=\"https://texfaq.org/FAQ-dolldoll\">不鼓励</a> 使用 $$ $$，因为它会产生不一致的间距，而且可能不适用于某些数学软件包。<br>相关资料：<a href=\"https://blog.csdn.net/qq_17783559/article/details/88181836\">Latex所有常用数学符号整理</a>，<a href=\"https://www.latexlive.com/\">在线LaTeX公式编辑器</a></p>\n</blockquote>\n<hr>\n<h2 id=\"基本框架\"><a href=\"#基本框架\" class=\"headerlink\" title=\"基本框架\"></a>基本框架</h2><h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>在科学文献中，通常会在摘要部分里面简述论文的主要内容。在 LaTeX 中有针对摘要部分设计的环境。摘要环境会将文本以特殊格式放在文档顶部。</p>\n<pre><code class=\"latex\">\\begin&#123;document&#125;\n\n\\begin&#123;abstract&#125;\nThis is a simple paragraph at the beginning of the document.\nA brief introduction about the main subject.\n\\end&#123;abstract&#125;\n\\end&#123;document&#125;\n</code></pre>\n<h3 id=\"章节命令\"><a href=\"#章节命令\" class=\"headerlink\" title=\"章节命令\"></a>章节命令</h3><p>用来组织文档的命令因文档类型而异，最简单的组织形式是分节，它对所有文档格式均可用。</p>\n<pre><code class=\"latex\">\\chapter&#123;First Chapter&#125;\n\n\\section&#123;Introduction&#125;\nThis is the first section.\n\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortisfacilisis sem. \nNullam nec mi et neque pharetra sollicitudin. Praesent imperdietmi nec ante.\nDonec ullamcorper, felis non sodales...\n\n\\section&#123;Second Section&#125;\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem. \nNullam nec mi et neque pharetra sollicitudin. Praesent imperdiet mi necante...\n\n\\subsection&#123;First Subsection&#125;\nPraesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...\n\n\\section*&#123;Unnumbered Section&#125;\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222432.png\" alt=\"编译后的效果\"></p>\n<p>命令 <code>\\section&#123;&#125;</code> 标记一个新分节的开始，在大括号内设置标题。分节编号是自动的，也可以通过在命令中加一个<code>*</code>来禁用编号，像这样：<code>\\section*&#123;&#125;</code>。也可以有 \\subsection{}，甚至 \\subsubsection{}。下面列出了基本的标题深度级别：</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212222849.png\"></p>\n<blockquote>\n<p>请注意，\\part 和 \\chapter 仅在 report 和 book 类中可用。<br>有关文档结构的更完整讨论，请参阅 <a href=\"https://www.overleaf.com/learn/Sections_and_chapters\">这篇文章</a>。</p>\n</blockquote>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ol>\n<li><strong>thebibliography形式</strong><br>这种形式不需要额外的文件，参考文献信息直接在 thebibliography 环境内填写。</li>\n</ol>\n<pre><code class=\"latex\">\\begin&#123;thebibliography&#125;&#123;编号样本&#125;\n\\bibitem[编号]&#123;标签&#125; 文献条目\n\\bibitem[编号]&#123;标签&#125; 文献条目\n.\n.\n.\n\\end&#123;thebibliography&#125;\n</code></pre>\n<ul>\n<li>“编号”：通常省略，系统自动按顺序编号，如 [1]，[2]，…</li>\n<li>“编号样本”：指定用多大地方显示 “编号”，一般为数字，位数等于最大编号的位数</li>\n<li>标签 ：文献的 id，可以由字母，数字和除逗号外的符号组成<ul>\n<li>每个文献的标签必须唯一 (互不相同)</li>\n<li>文献的引用：\\cite{标签}，\\cite{标签1，标签2}</li>\n</ul>\n</li>\n<li>文献条目：论文 (作者，标题，期刊，卷期，年代，页码)，书籍 (作者，书名，出版社，年代)</li>\n<li>参考文献的高级定制: natbib 宏包 (详细用法参见宏包手册)</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"latex\">\\begin&#123;thebibliography&#125;&#123;00&#125;\n\\bibitem&#123;b2&#125; L. Bariah, D. Shehada and E. Salaha, ``Recent Advancesin VANET Security:\nA Survey,&quot; Vehicular Technology Conference. 2016.\n\n\\bibitem&#123;b3&#125; S. A. A. Shah, E. Ahmed, F. Xia, A. Karim, M. Shiraz and R. M. Noor, \n``Adaptive beaconing approaches for vehicular ad hoc networks: A survey&quot;, \nIEEE Systems Journal, vol. 12, no. 2, pp. 1263-1277, 2018.\n\\end&#123;thebibliography&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212224152.png\" alt=\"编译后的效果\"></p>\n<ol start=\"2\">\n<li><strong>Bibtex格式</strong></li>\n</ol>\n<p>这种方式是把参考文献写在<code>.bib</code>文件中，然后和<code>.tex</code>放在同一文件夹下，<code>.tex</code>直接引用<code>.bib</code>中的参考文献。这种方法比较简单，不需要你根据期刊的格式每个都改动，只需要你找到相关的文件，按照Bibtex格式放到<code>.bib</code>文件中，在<code>tex</code>文件中会按照指定的参考文献格式现实。</p>\n<pre><code class=\"latex\">% 从google学术或者百度学术上找到参考文采用，然后引用-&gt;导出Bibtex格式，粘贴到.bib文件中\n@article&#123;greenwade93,\n    author  = &quot;George D. Greenwade&quot;,\n    title   = &quot;The &#123;C&#125;omprehensive &#123;T&#125;ex &#123;A&#125;rchive &#123;N&#125;etwork (&#123;CTAN&#125;)&quot;,\n    year    = &quot;1993&quot;,\n    journal = &quot;TUGBoat&quot;,\n    volume  = &quot;14&quot;,\n    number  = &quot;3&quot;,\n    pages   = &quot;342--351&quot;\n&#125;\n</code></pre>\n<pre><code class=\"latex\">\\bibliographystyle&#123;ieeetr&#125; %设置参考文献类型\n\\bibliography&#123;sample&#125; %声明参考文献文件名称\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212230200.png\" alt=\"Bibtex格式示例\"></p>\n<blockquote>\n<p>参考资料：<a href=\"https://zymin.cn/arcticle/latex-reference-with-bib.html\">LaTeX 参考文献及格式调整</a></p>\n</blockquote>\n<hr>\n<h2 id=\"创建表格\"><a href=\"#创建表格\" class=\"headerlink\" title=\"创建表格\"></a>创建表格</h2><h3 id=\"一个简单的表格\"><a href=\"#一个简单的表格\" class=\"headerlink\" title=\"一个简单的表格\"></a>一个简单的表格</h3><pre><code class=\"latex\">\\begin&#123;center&#125;\n\\begin&#123;tabular&#125;&#123; c c c &#125;\n cell1 &amp; cell2 &amp; cell3 \\\\\n cell4 &amp; cell5 &amp; cell6 \\\\\n cell7 &amp; cell8 &amp; cell9\n\\end&#123;tabular&#125;\n\\end&#123;center&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231756.png\"></p>\n<ul>\n<li><code>tabular</code> 环境是创建表的默认 LaTeX 方法。必须为此环境指定一个参数，这个例子里是 <code>&#123;c c c&#125;</code>。这告诉 LaTeX，表格将有三列，每列中的文本居中。你还可以使用 <code>r</code> 将文本向右对齐，使用 <code>l</code> 进行左对齐。</li>\n<li>符号 <code>&amp;</code> 是分隔符，每行中的分隔符始终少于列数。要转到表格的下一行，需要使用换行命令 <code>\\\\</code>。</li>\n<li>将整个表包装在 <code>center</code> 环境中，以让它出现在页面的中心。</li>\n</ul>\n<h3 id=\"添加边框\"><a href=\"#添加边框\" class=\"headerlink\" title=\"添加边框\"></a>添加边框</h3><p><code>tabular</code> 环境很灵活，可以在每列之间放置分隔线。</p>\n<pre><code class=\"latex\">\\begin&#123;center&#125;\n\\begin&#123;tabular&#125;&#123; |c|c|c| &#125;\n \\hline\n cell1 &amp; cell2 &amp; cell3 \\\\\n cell4 &amp; cell5 &amp; cell6 \\\\\n cell7 &amp; cell8 &amp; cell9 \\\\\n \\hline\n\\end&#123;tabular&#125;\n\\end&#123;center&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212231902.png\"></p>\n<p>使用水平线命令 <code>\\hline</code> 和垂直线参数 <code>|</code> 来添加边框。</p>\n<ul>\n<li><code>&#123;|c|c|c|&#125;</code>：这声明表中将会有由垂直线分隔的三列。<code>|</code> 符号指定这些列应由垂直线分隔。</li>\n<li><code>\\hline</code>：这条命令将插入一条水平线。这个示例中，我们在表格的顶部和底部加入了水平线。\\hline 的使用次数没有限制。</li>\n</ul>\n<blockquote>\n<p>可以借助 <a href=\"https://www.tablesgenerator.com/\">TablesGenerator.com</a> 这样的在线工具导出表格的 LaTeX 代码。<em>“文件”&gt;“粘贴表数据”</em> 选项从电子表格软件粘贴数据。</p>\n</blockquote>\n<h3 id=\"标题、标签和引用-1\"><a href=\"#标题、标签和引用-1\" class=\"headerlink\" title=\"标题、标签和引用\"></a>标题、标签和引用</h3><p>可以使用与图片几乎相同的方式来为表格添加标题、标签和引用。唯一的区别是，使用<code>table</code>环境代替了<code>figure</code>环境。</p>\n<pre><code class=\"latex\">Table \\ref&#123;table:data&#125; is an example of referenced \\LaTeX&#123;&#125; elements.\n\n\\begin&#123;table&#125;[h!]\n\\centering\n\\begin&#123;tabular&#125;&#123;||c c c c||&#125;\n \\hline\n Col1 &amp; Col2 &amp; Col2 &amp; Col3 \\\\ [0.5ex]\n \\hline\\hline\n 1 &amp; 6 &amp; 87837 &amp; 787 \\\\\n 2 &amp; 7 &amp; 78 &amp; 5415 \\\\\n 3 &amp; 545 &amp; 778 &amp; 7507 \\\\\n 4 &amp; 545 &amp; 18744 &amp; 7560 \\\\\n 5 &amp; 88 &amp; 788 &amp; 6344 \\\\ [1ex]\n \\hline\n\\end&#123;tabular&#125;\n\\caption&#123;Table to test captions and labels&#125;\n\\label&#123;table:data&#125;\n\\end&#123;table&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212232247.png\" alt=\"编译后的效果\"></p>\n<hr>\n<h2 id=\"添加算法伪代码\"><a href=\"#添加算法伪代码\" class=\"headerlink\" title=\"添加算法伪代码\"></a>添加算法伪代码</h2><p>在LaTeX中写伪代码也是需要导入外部宏包，常用的宏包有<code>algorithms</code>、<code>algorithmicx</code> 和 <code>algorithm2e</code>。</p>\n<p>&nbsp;<br><code>algorithms</code>和<code>algorithmicx</code>一般一起使用， 简易但可定制性不高。<code>algorithm2e</code>相对复杂些，但是操作性更高，可定制性更强，所以这里主要详细介绍<code>algorithm2e</code>的使用。</p>\n<h3 id=\"algorithms和algorithmicx示例\"><a href=\"#algorithms和algorithmicx示例\" class=\"headerlink\" title=\"algorithms和algorithmicx示例\"></a>algorithms和algorithmicx示例</h3><pre><code class=\"latex\">\\begin&#123;algorithm&#125;\n  \\renewcommand&#123;\\algorithmicrequire&#125;&#123;\\textbf&#123;Input:&#125;&#125;\n    \\renewcommand&#123;\\algorithmicensure&#125;&#123;\\textbf&#123;Output:&#125;&#125;\n    \\caption&#123;Calculate $y = x^n$&#125; \n    \\label&#123;alg3&#125; \n    \\begin&#123;algorithmic&#125;\n        \\REQUIRE $n \\geq 0 \\vee x \\neq 0$ \n        \\ENSURE $y = x^n$ \n        \\STATE $y \\gets 1$ \n        \\IF&#123;$n &lt; 0$&#125; \n        \\STATE $X \\gets 1 / x$ \n        \\STATE $N \\gets -n$ \n        \\ELSE \n        \\STATE $X \\gets x$ \n        \\STATE $N \\gets n$ \n        \\ENDIF \n        \\WHILE&#123;$N \\neq 0$&#125; \n        \\IF&#123;$N$ is even&#125; \n        \\STATE $X \\gets X \\times X$ \n        \\STATE $N \\gets N / 2$ \n        \\ELSE[$N$ is odd] \\STATE $y \\gets y \\times X$ \n        \\STATE $N \\gets N - 1$ \n        \\ENDIF \n        \\ENDWHILE \n    \\end&#123;algorithmic&#125; \n\\end&#123;algorithm&#125;\n</code></pre>\n<blockquote>\n<p>注意：<br>要在序言区引入宏包：\\usepackage{algorithm, algorithmic}<br>\\renewcommand{\\algorithmicrequire}{\\textbf{Input:}} 将官方的require关键字换成常用的input<br>\\renewcommand{\\algorithmicensure}{\\textbf{Output:}} 将官方的ensure关键字换成常用的output</p>\n</blockquote>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211213105605.png\" alt=\"编译后的效果\"></p>\n<h3 id=\"algorithm2e\"><a href=\"#algorithm2e\" class=\"headerlink\" title=\"algorithm2e\"></a>algorithm2e</h3><ol>\n<li><strong>第一个示例</strong></li>\n</ol>\n<pre><code class=\"latex\">\\documentclass&#123;article&#125;\n\\usepackage[linesnumbered,ruled]&#123;algorithm2e&#125; % 导入宏包\n\n\\begin&#123;document&#125;\n\n\\begin&#123;algorithm&#125; % 伪代码开始\n    \\caption&#123;identify Row Context&#125;  \n  \\KwIn&#123;$r_i$, $Backgrd(T_i)$=$&#123;T_1,T_2,\\ldots ,T_n&#125;$ and similarity threshold $\\theta_r$&#125;  \n  \\KwOut&#123;$con(r_i)$&#125;  \n  $con(r_i)= \\Phi$\\;  \n  \\For&#123;$j=1;j \\le n;j \\ne i$&#125;  \n  &#123;  \n    float $maxSim=0$ \\;  \n    $r^&#123;maxSim&#125;=null$ \\;  \n    \\While&#123;not end of $T_j$&#125;  \n    &#123;  \n      compute Jaro($r_i,r_m$)($r_m\\in T_j$) \\;  \n      \\If&#123;$(Jaro(r_i,r_m) \\ge \\theta_r)\\wedge (Jaro(r_i,r_m)\\ge r^&#123;maxSim&#125;)$&#125;  \n      &#123;  \n        replace $r^&#123;maxSim&#125;$ with $r_m$ \\;  \n      &#125;  \n    &#125;  \n    $con(r_i)=con(r_i)\\cup &#123;r^&#123;maxSim&#125;&#125;$ \\;  \n  &#125;  \n  return $con(r_i)$ \\;\n\\end&#123;algorithm&#125;   % 伪代码结束\n\n\\end&#123;document&#125; \n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211213112018.png\"></p>\n<blockquote>\n<p><strong>注意：</strong>每一行的结尾必须以 <code>\\;</code> 结束, 只有那些以宏命令开始的不应该以 <code>\\;</code> 结束, 例如在此示例中的 <code>\\caption</code>、<code>\\KwIn</code> 、<code>\\KwOut</code>属于宏命令, 不需要以 <code>\\;</code> 结尾. </p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>常用环境</strong></li>\n</ol>\n<ul>\n<li>algorithm：这是最常用的环境</li>\n<li>algorithm*：与前者一样, 但它用于两列文本中, 使算法跨两列</li>\n</ul>\n<ol start=\"3\">\n<li><strong>基本关键字</strong></li>\n</ol>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211213142106.png\"></p>\n<ol start=\"4\">\n<li><strong>算法布局</strong></li>\n</ol>\n<p>在引入宏包时，在option选项中加入了 linesnumbered 和 ruled，所以在算法伪代码中会有行编号和上下尺（即三线表样式）。当然，外部的封装环境不止 ruled 一种选项, 也可以选择完全封闭的选项亦或者完全没有外部边框的选项。</p>\n<ul>\n<li>boxed：将算法封装在框中</li>\n<li>boxruled：用方框将算法环绕，将标题放在上方，并在标题后添加一行</li>\n<li>ruled：在顶部和底部都有一条线的算法。请注意，标题不再位于算法下方，而是在算法开始时设置</li>\n<li>algoruled：如上所述，但在尺后留有多余的空格</li>\n<li>tworuled：tworuled 的行为就 ruled 的一样，但标题后面没有加一行</li>\n<li>plain：默认值，无功能</li>\n</ul>\n<ol start=\"5\">\n<li><strong>第二个示例</strong></li>\n</ol>\n<pre><code class=\"latex\">\\documentclass&#123;article&#125;\n\\usepackage[linesnumbered,ruled]&#123;algorithm2e&#125;\n\\begin&#123;document&#125;\n\\begin&#123;algorithm&#125;\n  \\renewcommand&#123;\\algorithmcfname&#125;&#123;Pseudo code&#125; % 这句如果写在引言区，将对全部算法生效\n  \\SetKwData&#123;Left&#125;&#123;left&#125;\\SetKwData&#123;This&#125;&#123;this&#125;\\SetKwData&#123;Up&#125;&#123;up&#125;\n  \\SetKwFunction&#123;Union&#125;&#123;Union&#125;\\SetKwFunction&#123;FindCompress&#125;&#123;FindCompress&#125;\n  \\SetKwInOut&#123;Input&#125;&#123;input&#125;\\SetKwInOut&#123;Output&#125;&#123;output&#125;\n  \\Input&#123;A bitmap $Im$ of size $w\\times l$&#125;\n  \\Output&#123;A partition of the bitmap&#125;\n  \\BlankLine\n  \\emph&#123;special treatment of the first line&#125;\\;\n  \\For&#123;$i\\leftarrow 2$ \\KwTo $l$&#125;&#123;\n    \\emph&#123;special treatment of the first element of line $i$&#125;\\;\n    \\For&#123;$j\\leftarrow 2$ \\KwTo $w$&#125;&#123;\\label&#123;forins&#125;\n      \\Left$\\leftarrow$ \\FindCompress&#123;$Im[i,j-1]$&#125;\\;\n      \\Up$\\leftarrow$ \\FindCompress&#123;$Im[i-1,]$&#125;\\;\n      \\This$\\leftarrow$ \\FindCompress&#123;$Im[i,j]$&#125;\\;\n      \\If(\\tcp*[h]&#123;O(\\Left,\\This)==1&#125;)&#123;\\Left compatible with \\This&#125;&#123;\\label&#123;lt&#125;\n        \\lIf&#123;\\Left $&lt;$ \\This&#125;&#123;\\Union&#123;\\Left,\\This&#125;&#125;\n        \\lElse&#123;\\Union&#123;\\This,\\Left&#125;&#125;\n      &#125;\n    &#125;\n    \\lForEach&#123;element $e$ of the line $i$&#125;&#123;\\FindCompress&#123;p&#125;&#125;\n  &#125;\n  \\caption&#123;disjoint decomposition&#125;\n  \\label&#123;algo_disjdecomp&#125;\n\\end&#123;algorithm&#125;\n\\end&#123;document&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211213141730.png\" alt=\"编译后的效果\"></p>\n<hr>\n<h1 id=\"Overleaf写LaTeX\"><a href=\"#Overleaf写LaTeX\" class=\"headerlink\" title=\"Overleaf写LaTeX\"></a>Overleaf写LaTeX</h1><h2 id=\"Overleaf网站：链接\"><a href=\"#Overleaf网站：链接\" class=\"headerlink\" title=\"Overleaf网站：链接\"></a>Overleaf网站：<a href=\"https://cn.overleaf.com/project\">链接</a></h2><p>Overleaf是一个使用LaTeX进行多人协同编辑的平台，可以免费注册和使用，不用下载LaTeX软件，是最为著名的LaTeX在线协作系统。主要特色是有LaTeX插件，编辑功能十分完善，有实时预览（即编即看，无需手动编译）的功能。科研工作者可以在各大期刊的网站上下载到其Overleaf模板，进行论文写作。</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf%E9%A6%96%E9%A1%B5.png\" alt=\"Overleaf项目首页\"></p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212153121.png\"></p>\n<ul>\n<li><strong>空白项目</strong>：一个最基本的.tex文档，适用于从零开始定制个人性化的板式。</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154608.png\" alt=\"空白项目\"></p>\n<ul>\n<li><strong>样例项目</strong>：一个通用的模板，包含了一篇论文的基本结构、基础样式，作者可以在此模板上填充自己的内容，适用于快速开始一篇论文的撰写。</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212154413.png\" alt=\"带模板项目\"></p>\n<ul>\n<li><strong>上传项目</strong>：通过其它地方下载的模板创建项目，适用于使用所投期刊提供的模板撰写论文。</li>\n</ul>\n<ul>\n<li><strong>从模板库导入</strong>：通过Overleaf平台的模板库中寻找模板，里面有各式各样的模板。</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212160030.png\"></p>\n<h2 id=\"编辑页面介绍\"><a href=\"#编辑页面介绍\" class=\"headerlink\" title=\"编辑页面介绍\"></a>编辑页面介绍</h2><p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233704.png\" alt=\"页面介绍\"></p>\n<h2 id=\"上传图片\"><a href=\"#上传图片\" class=\"headerlink\" title=\"上传图片\"></a>上传图片</h2><p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/overleaf_uploadFig.png\"></p>\n<h2 id=\"下载完成的文档\"><a href=\"#下载完成的文档\" class=\"headerlink\" title=\"下载完成的文档\"></a>下载完成的文档</h2><p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211212233900.png\"></p>\n<h1 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h1><ul>\n<li>LaTeX工作室在知识库：<a href=\"https://www.latexstudio.net/texdoc/#/\">链接</a></li>\n<li>华东师范大学潘建瑜老师讲义：<a href=\"http://math.ecnu.edu.cn/~jypan/Teaching/Latex/\">链接</a></li>\n<li>简短的 LaTeX2e 介绍：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/CTAN/info/lshort/chinese/lshort-zh-cn.pdf\">链接</a></li>\n<li>algorithm2e 宏包官方文档：<a href=\"http://tug.ctan.org/macros/latex/contrib/algorithm2e/doc/algorithm2e.pdf\">链接</a></li>\n</ul>\n"},{"title":"KMS服务激活win10和office","date":"2021-12-08T04:51:18.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"## 服务器\n服务器地址：[http://kms.03k.org](http://kms.03k.org/)([点击检查是否可用](https://03k.org/go/kmscheck.html))；\n服务作用：在线激活windows和office\n适用对象：VOL版本的windows和office\n适用版本：截止到win10和office2016的所有版本\n公开地址有：\n> [kms.loli.best](https://moe.best/kms.html)\n[kms.cangshui.net](https://kms.cangshui.net/)\n[kms.kuretru.com](https://blog.kuretru.com/kms/)\n\n## 激活win10：\n\n1. 一般来说，只要确保的下载的是VL批量版本并且没有手动安装过任何key，你只需要**使用管理员权限运行cmd**执行一句命令就足够：\n\n\n```bash\nslmgr /skms kms.03k.org\n```\n\n这句命令的意思是，把kms服务器地址设置（set kms）[为kms.03k.org](https://link.zhihu.com/?target=http%3A//%25E4%25B8%25BAkms.03k.org)，设置成功如下：\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211208124943.png)\n\n2. 然后一句命令手动激活：\n\n\n```bash\nslmgr /ato\n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211208125022.png)\n\n## 激活office\n\n1. 首先你的office必须是vol版本，否则无法激活。\n\n找到你的office安装目录，比如C:\\Program Files (x86)\\Microsoft Office\\Office16\n> 64位的就是C:\\Program Files\\Microsoft Office\\Office16\n> office16是office2016，office15就是2013，office14就是2010.\n\n然后目录对的话，该目录下面应该有个OSPP.VBS。\n\n2. 接下来我们就cd到这个目录下面，例如（请更改为自己的实际安装目录）：\n\n\n```bash\ncd \"C:\\Program Files (x86)\\Microsoft Office\\Office16\"\n```\n\n如果你不知道你的office装在哪个目录，可以打开一个程序比如word，然后用打开任务管理员右键选择“打开文件所在的位置”。\n\n\n3. 然后执行注册kms服务器地址：\n\n\n```bash\ncscript ospp.vbs /sethst:kms.03k.org\n```\n\n> /sethst参数就是指定kms服务器地址。\n\n\n一般ospp.vbs可以拖进去cmd窗口，所以也可以这么弄：\n\n```bash\ncscript \"C:\\Program Files (x86)\\Microsoft Office\\Office16\\OSPP.VBS\" /sethst:kms.03k.org\n```\n\n一般来说，“一句命令已经完成了”，但一般office不会马上连接kms服务器进行激活，所以我们额外补充一条手动激活命令：\n\n```bash\ncscript ospp.vbs /act\n```\n\n如果提示看到successful的字样，那么就是激活成功了，重新打开office就好。\n","source":"_posts/KMS服务激活win10和office.md","raw":"---\ntitle: KMS服务激活win10和office\ndate: 2021-12-08 12:51:18\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- win10激活\ncategories: \n- 软件与工具\n---\n## 服务器\n服务器地址：[http://kms.03k.org](http://kms.03k.org/)([点击检查是否可用](https://03k.org/go/kmscheck.html))；\n服务作用：在线激活windows和office\n适用对象：VOL版本的windows和office\n适用版本：截止到win10和office2016的所有版本\n公开地址有：\n> [kms.loli.best](https://moe.best/kms.html)\n[kms.cangshui.net](https://kms.cangshui.net/)\n[kms.kuretru.com](https://blog.kuretru.com/kms/)\n\n## 激活win10：\n\n1. 一般来说，只要确保的下载的是VL批量版本并且没有手动安装过任何key，你只需要**使用管理员权限运行cmd**执行一句命令就足够：\n\n\n```bash\nslmgr /skms kms.03k.org\n```\n\n这句命令的意思是，把kms服务器地址设置（set kms）[为kms.03k.org](https://link.zhihu.com/?target=http%3A//%25E4%25B8%25BAkms.03k.org)，设置成功如下：\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211208124943.png)\n\n2. 然后一句命令手动激活：\n\n\n```bash\nslmgr /ato\n```\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211208125022.png)\n\n## 激活office\n\n1. 首先你的office必须是vol版本，否则无法激活。\n\n找到你的office安装目录，比如C:\\Program Files (x86)\\Microsoft Office\\Office16\n> 64位的就是C:\\Program Files\\Microsoft Office\\Office16\n> office16是office2016，office15就是2013，office14就是2010.\n\n然后目录对的话，该目录下面应该有个OSPP.VBS。\n\n2. 接下来我们就cd到这个目录下面，例如（请更改为自己的实际安装目录）：\n\n\n```bash\ncd \"C:\\Program Files (x86)\\Microsoft Office\\Office16\"\n```\n\n如果你不知道你的office装在哪个目录，可以打开一个程序比如word，然后用打开任务管理员右键选择“打开文件所在的位置”。\n\n\n3. 然后执行注册kms服务器地址：\n\n\n```bash\ncscript ospp.vbs /sethst:kms.03k.org\n```\n\n> /sethst参数就是指定kms服务器地址。\n\n\n一般ospp.vbs可以拖进去cmd窗口，所以也可以这么弄：\n\n```bash\ncscript \"C:\\Program Files (x86)\\Microsoft Office\\Office16\\OSPP.VBS\" /sethst:kms.03k.org\n```\n\n一般来说，“一句命令已经完成了”，但一般office不会马上连接kms服务器进行激活，所以我们额外补充一条手动激活命令：\n\n```bash\ncscript ospp.vbs /act\n```\n\n如果提示看到successful的字样，那么就是激活成功了，重新打开office就好。\n","slug":"KMS服务激活win10和office","published":1,"updated":"2021-12-30T08:57:23.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3q00098ou11elf2icw","content":"<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><p>服务器地址：<a href=\"http://kms.03k.org/\">http://kms.03k.org</a>(<a href=\"https://03k.org/go/kmscheck.html\">点击检查是否可用</a>)；<br>服务作用：在线激活windows和office<br>适用对象：VOL版本的windows和office<br>适用版本：截止到win10和office2016的所有版本<br>公开地址有：</p>\n<blockquote>\n<p><a href=\"https://moe.best/kms.html\">kms.loli.best</a><br><a href=\"https://kms.cangshui.net/\">kms.cangshui.net</a><br><a href=\"https://blog.kuretru.com/kms/\">kms.kuretru.com</a></p>\n</blockquote>\n<h2 id=\"激活win10：\"><a href=\"#激活win10：\" class=\"headerlink\" title=\"激活win10：\"></a>激活win10：</h2><ol>\n<li>一般来说，只要确保的下载的是VL批量版本并且没有手动安装过任何key，你只需要<strong>使用管理员权限运行cmd</strong>执行一句命令就足够：</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\">slmgr /skms kms.03k.org\n</code></pre>\n<p>这句命令的意思是，把kms服务器地址设置（set kms）<a href=\"https://link.zhihu.com/?target=http://%25E4%25B8%25BAkms.03k.org\">为kms.03k.org</a>，设置成功如下：</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211208124943.png\"></p>\n<ol start=\"2\">\n<li>然后一句命令手动激活：</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\">slmgr /ato\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211208125022.png\"></p>\n<h2 id=\"激活office\"><a href=\"#激活office\" class=\"headerlink\" title=\"激活office\"></a>激活office</h2><ol>\n<li>首先你的office必须是vol版本，否则无法激活。</li>\n</ol>\n<p>找到你的office安装目录，比如C:\\Program Files (x86)\\Microsoft Office\\Office16</p>\n<blockquote>\n<p>64位的就是C:\\Program Files\\Microsoft Office\\Office16<br>office16是office2016，office15就是2013，office14就是2010.</p>\n</blockquote>\n<p>然后目录对的话，该目录下面应该有个OSPP.VBS。</p>\n<ol start=\"2\">\n<li>接下来我们就cd到这个目录下面，例如（请更改为自己的实际安装目录）：</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> <span class=\"token string\">\"C:\\Program Files (x86)\\Microsoft Office\\Office16\"</span>\n</code></pre>\n<p>如果你不知道你的office装在哪个目录，可以打开一个程序比如word，然后用打开任务管理员右键选择“打开文件所在的位置”。</p>\n<ol start=\"3\">\n<li>然后执行注册kms服务器地址：</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\">cscript ospp.vbs /sethst:kms.03k.org\n</code></pre>\n<blockquote>\n<p>/sethst参数就是指定kms服务器地址。</p>\n</blockquote>\n<p>一般ospp.vbs可以拖进去cmd窗口，所以也可以这么弄：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">cscript <span class=\"token string\">\"C:\\Program Files (x86)\\Microsoft Office\\Office16\\OSPP.VBS\"</span> /sethst:kms.03k.org\n</code></pre>\n<p>一般来说，“一句命令已经完成了”，但一般office不会马上连接kms服务器进行激活，所以我们额外补充一条手动激活命令：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">cscript ospp.vbs /act\n</code></pre>\n<p>如果提示看到successful的字样，那么就是激活成功了，重新打开office就好。</p>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><p>服务器地址：<a href=\"http://kms.03k.org/\">http://kms.03k.org</a>(<a href=\"https://03k.org/go/kmscheck.html\">点击检查是否可用</a>)；<br>服务作用：在线激活windows和office<br>适用对象：VOL版本的windows和office<br>适用版本：截止到win10和office2016的所有版本<br>公开地址有：</p>\n<blockquote>\n<p><a href=\"https://moe.best/kms.html\">kms.loli.best</a><br><a href=\"https://kms.cangshui.net/\">kms.cangshui.net</a><br><a href=\"https://blog.kuretru.com/kms/\">kms.kuretru.com</a></p>\n</blockquote>\n<h2 id=\"激活win10：\"><a href=\"#激活win10：\" class=\"headerlink\" title=\"激活win10：\"></a>激活win10：</h2><ol>\n<li>一般来说，只要确保的下载的是VL批量版本并且没有手动安装过任何key，你只需要<strong>使用管理员权限运行cmd</strong>执行一句命令就足够：</li>\n</ol>\n<pre><code class=\"bash\">slmgr /skms kms.03k.org\n</code></pre>\n<p>这句命令的意思是，把kms服务器地址设置（set kms）<a href=\"https://link.zhihu.com/?target=http://%25E4%25B8%25BAkms.03k.org\">为kms.03k.org</a>，设置成功如下：</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211208124943.png\"></p>\n<ol start=\"2\">\n<li>然后一句命令手动激活：</li>\n</ol>\n<pre><code class=\"bash\">slmgr /ato\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211208125022.png\"></p>\n<h2 id=\"激活office\"><a href=\"#激活office\" class=\"headerlink\" title=\"激活office\"></a>激活office</h2><ol>\n<li>首先你的office必须是vol版本，否则无法激活。</li>\n</ol>\n<p>找到你的office安装目录，比如C:\\Program Files (x86)\\Microsoft Office\\Office16</p>\n<blockquote>\n<p>64位的就是C:\\Program Files\\Microsoft Office\\Office16<br>office16是office2016，office15就是2013，office14就是2010.</p>\n</blockquote>\n<p>然后目录对的话，该目录下面应该有个OSPP.VBS。</p>\n<ol start=\"2\">\n<li>接下来我们就cd到这个目录下面，例如（请更改为自己的实际安装目录）：</li>\n</ol>\n<pre><code class=\"bash\">cd &quot;C:\\Program Files (x86)\\Microsoft Office\\Office16&quot;\n</code></pre>\n<p>如果你不知道你的office装在哪个目录，可以打开一个程序比如word，然后用打开任务管理员右键选择“打开文件所在的位置”。</p>\n<ol start=\"3\">\n<li>然后执行注册kms服务器地址：</li>\n</ol>\n<pre><code class=\"bash\">cscript ospp.vbs /sethst:kms.03k.org\n</code></pre>\n<blockquote>\n<p>/sethst参数就是指定kms服务器地址。</p>\n</blockquote>\n<p>一般ospp.vbs可以拖进去cmd窗口，所以也可以这么弄：</p>\n<pre><code class=\"bash\">cscript &quot;C:\\Program Files (x86)\\Microsoft Office\\Office16\\OSPP.VBS&quot; /sethst:kms.03k.org\n</code></pre>\n<p>一般来说，“一句命令已经完成了”，但一般office不会马上连接kms服务器进行激活，所以我们额外补充一条手动激活命令：</p>\n<pre><code class=\"bash\">cscript ospp.vbs /act\n</code></pre>\n<p>如果提示看到successful的字样，那么就是激活成功了，重新打开office就好。</p>\n"},{"title":"Typora自动上传图片","date":"2021-12-20T02:35:18.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"\n## 配合PicGo自动上传图片\n\n1. **下载配置PicGo**\n\n我这里以上传到gitee为例：\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220100720.png)\n\n2. **设置typora和PicGo关联**\n\n文件-->偏好设置-->图像\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101432.png)\n\n然后开启自动上传：\n格式-->图像-->当插入本地图片时-->上传图像\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101657.png)\n\n## 设置图片居左显示\nTypora默认图片是居中显示，通过修改主题样式.css文件可实现默认居左显示。\n\n1. **打开所使用的主题样式文件**\n\n文件-->偏好设置-->外观-->打开主题文件夹\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220102727.png)\n\n2. **打开主题的css文件，在后面添加代码**\n```css\np .md-image:only-child{\n    width: auto;\n    text-align: left;\n}\n```\n\n3. **重启Typora即可生效**。\n","source":"_posts/Typora自动上传图片.md","raw":"---\ntitle: Typora自动上传图片\ndate: 2021-12-20 10:35:18\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- Typora\ncategories: \n- 软件与工具\n---\n\n## 配合PicGo自动上传图片\n\n1. **下载配置PicGo**\n\n我这里以上传到gitee为例：\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220100720.png)\n\n2. **设置typora和PicGo关联**\n\n文件-->偏好设置-->图像\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101432.png)\n\n然后开启自动上传：\n格式-->图像-->当插入本地图片时-->上传图像\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101657.png)\n\n## 设置图片居左显示\nTypora默认图片是居中显示，通过修改主题样式.css文件可实现默认居左显示。\n\n1. **打开所使用的主题样式文件**\n\n文件-->偏好设置-->外观-->打开主题文件夹\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211220102727.png)\n\n2. **打开主题的css文件，在后面添加代码**\n```css\np .md-image:only-child{\n    width: auto;\n    text-align: left;\n}\n```\n\n3. **重启Typora即可生效**。\n","slug":"Typora自动上传图片","published":1,"updated":"2021-12-30T08:57:23.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3s000b8ou1482qh71v","content":"<h2 id=\"配合PicGo自动上传图片\"><a href=\"#配合PicGo自动上传图片\" class=\"headerlink\" title=\"配合PicGo自动上传图片\"></a>配合PicGo自动上传图片</h2><ol>\n<li><strong>下载配置PicGo</strong></li>\n</ol>\n<p>我这里以上传到gitee为例：</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220100720.png\"></p>\n<ol start=\"2\">\n<li><strong>设置typora和PicGo关联</strong></li>\n</ol>\n<p>文件–&gt;偏好设置–&gt;图像</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101432.png\"></p>\n<p>然后开启自动上传：<br>格式–&gt;图像–&gt;当插入本地图片时–&gt;上传图像</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101657.png\"></p>\n<h2 id=\"设置图片居左显示\"><a href=\"#设置图片居左显示\" class=\"headerlink\" title=\"设置图片居左显示\"></a>设置图片居左显示</h2><p>Typora默认图片是居中显示，通过修改主题样式.css文件可实现默认居左显示。</p>\n<ol>\n<li><strong>打开所使用的主题样式文件</strong></li>\n</ol>\n<p>文件–&gt;偏好设置–&gt;外观–&gt;打开主题文件夹</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220102727.png\"></p>\n<ol start=\"2\">\n<li><p><strong>打开主题的css文件，在后面添加代码</strong></p>\n<pre class=\" language-css\"><code class=\"language-css\"><span class=\"token selector\">p <span class=\"token class\">.md-image</span><span class=\"token pseudo-class\">:only-child</span></span><span class=\"token punctuation\">{</span>\n <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li><p><strong>重启Typora即可生效</strong>。</p>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"配合PicGo自动上传图片\"><a href=\"#配合PicGo自动上传图片\" class=\"headerlink\" title=\"配合PicGo自动上传图片\"></a>配合PicGo自动上传图片</h2><ol>\n<li><strong>下载配置PicGo</strong></li>\n</ol>\n<p>我这里以上传到gitee为例：</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220100720.png\"></p>\n<ol start=\"2\">\n<li><strong>设置typora和PicGo关联</strong></li>\n</ol>\n<p>文件–&gt;偏好设置–&gt;图像</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101432.png\"></p>\n<p>然后开启自动上传：<br>格式–&gt;图像–&gt;当插入本地图片时–&gt;上传图像</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220101657.png\"></p>\n<h2 id=\"设置图片居左显示\"><a href=\"#设置图片居左显示\" class=\"headerlink\" title=\"设置图片居左显示\"></a>设置图片居左显示</h2><p>Typora默认图片是居中显示，通过修改主题样式.css文件可实现默认居左显示。</p>\n<ol>\n<li><strong>打开所使用的主题样式文件</strong></li>\n</ol>\n<p>文件–&gt;偏好设置–&gt;外观–&gt;打开主题文件夹</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211220102727.png\"></p>\n<ol start=\"2\">\n<li><p><strong>打开主题的css文件，在后面添加代码</strong></p>\n<pre><code class=\"css\">p .md-image:only-child&#123;\n width: auto;\n text-align: left;\n&#125;\n</code></pre>\n</li>\n<li><p><strong>重启Typora即可生效</strong>。</p>\n</li>\n</ol>\n"},{"title":"Mysql 8.0以上重置初始密码的方法(Win10)","date":"2021-12-15T11:51:18.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"\n网上大部分的方法都是通过在`My.ini`或是`My_default.ini`中添加`–skip-grant-tables`的方法来实现跳过Mysql密码来连接数据库，并更改密码，然而都没有成功。\n> **以下命令行代码均在管理员模式下操作**\n\n### 第一步：关闭Mysql服务\n首先，确保自己已经关闭了Mysql的服务\n```bash\ncd \"d:\\Program Files\\mysql8\\bin\"(此处输入自己的Mysql安装地址)\nnet stop mysql\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195648.png)\n\n### 第二步：跳过Mysql密码验证\n关闭Mysql服务之后，继续在 d:\\Program Files\\mysql8\\bin 目录下进行操作，输入命令\n```bash\nmysqld --console --skip-grant-tables --shared-memory \n```\n在输入这行代码之后，我们就已经成功跳过Mysql的密码登录了\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195732.png)\n\n### 第三步：无密码方式进入Mysql\n在上述步骤之后，再打开一个管理员模式运行的cmd.exe。\n\n进入 mysql 下的 bin 目录后，直接登录mysql。\n\n在命令行中输入以下代码\n```bash\ncd \"d:\\Program Files\\mysql8\\bin\"(此处输入自己的Mysql安装地址)\nmysql -u root -p\n```\n\n此时会显示让你输入密码，直接回车，就可以成功连接Mysql\n\n### 第四步：将登陆密码设置为空\n输入代码，将密码设置为空（此时还不能直接修改密码，必须先设置为空，否则会报错）。\n```bash\nuse mysql; (使用mysql数据表)\nupdate user set authentication_string='' where user='root';（将密码置为空）\nquit; (然后退出Mysql)\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195806.png)\n\n### 第五步：更改自己的登陆密码\n这里分为两个部分\n\n1. 关闭第一个cmd窗口(一定要关闭！)\n2. 在第二个窗口中输入代码\n```bash\nnet stop mysql (关闭mysql服务, 虽然会显示没有开启服务，但是以防万一)\nnet start mysql (再打开mysql服务)\nmysql -u root -p\n```\n\n此处会显示输入密码，直接回车就好了，第四步我们已经将他置为空了\n\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED BY '新密码';（更改密码）\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195829.png)\n\n### 最后一步：验证密码是否修改成功\n```bash\nquit（退出mysql）\nmysql -u root -p \n(输入新密码，再次登录)\n```\n","source":"_posts/Mysql 8.0以上重置初始密码的方法（Win10）.md","raw":"---\ntitle: Mysql 8.0以上重置初始密码的方法(Win10)\ndate: 2021-12-15 19:51:18\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- Mysql\ncategories: \n- 软件与工具\n---\n\n网上大部分的方法都是通过在`My.ini`或是`My_default.ini`中添加`–skip-grant-tables`的方法来实现跳过Mysql密码来连接数据库，并更改密码，然而都没有成功。\n> **以下命令行代码均在管理员模式下操作**\n\n### 第一步：关闭Mysql服务\n首先，确保自己已经关闭了Mysql的服务\n```bash\ncd \"d:\\Program Files\\mysql8\\bin\"(此处输入自己的Mysql安装地址)\nnet stop mysql\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195648.png)\n\n### 第二步：跳过Mysql密码验证\n关闭Mysql服务之后，继续在 d:\\Program Files\\mysql8\\bin 目录下进行操作，输入命令\n```bash\nmysqld --console --skip-grant-tables --shared-memory \n```\n在输入这行代码之后，我们就已经成功跳过Mysql的密码登录了\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195732.png)\n\n### 第三步：无密码方式进入Mysql\n在上述步骤之后，再打开一个管理员模式运行的cmd.exe。\n\n进入 mysql 下的 bin 目录后，直接登录mysql。\n\n在命令行中输入以下代码\n```bash\ncd \"d:\\Program Files\\mysql8\\bin\"(此处输入自己的Mysql安装地址)\nmysql -u root -p\n```\n\n此时会显示让你输入密码，直接回车，就可以成功连接Mysql\n\n### 第四步：将登陆密码设置为空\n输入代码，将密码设置为空（此时还不能直接修改密码，必须先设置为空，否则会报错）。\n```bash\nuse mysql; (使用mysql数据表)\nupdate user set authentication_string='' where user='root';（将密码置为空）\nquit; (然后退出Mysql)\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195806.png)\n\n### 第五步：更改自己的登陆密码\n这里分为两个部分\n\n1. 关闭第一个cmd窗口(一定要关闭！)\n2. 在第二个窗口中输入代码\n```bash\nnet stop mysql (关闭mysql服务, 虽然会显示没有开启服务，但是以防万一)\nnet start mysql (再打开mysql服务)\nmysql -u root -p\n```\n\n此处会显示输入密码，直接回车就好了，第四步我们已经将他置为空了\n\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED BY '新密码';（更改密码）\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195829.png)\n\n### 最后一步：验证密码是否修改成功\n```bash\nquit（退出mysql）\nmysql -u root -p \n(输入新密码，再次登录)\n```\n","slug":"Mysql 8.0以上重置初始密码的方法（Win10）","published":1,"updated":"2021-12-30T08:57:23.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3t000g8ou182fb0gz5","content":"<p>网上大部分的方法都是通过在<code>My.ini</code>或是<code>My_default.ini</code>中添加<code>–skip-grant-tables</code>的方法来实现跳过Mysql密码来连接数据库，并更改密码，然而都没有成功。</p>\n<blockquote>\n<p><strong>以下命令行代码均在管理员模式下操作</strong></p>\n</blockquote>\n<h3 id=\"第一步：关闭Mysql服务\"><a href=\"#第一步：关闭Mysql服务\" class=\"headerlink\" title=\"第一步：关闭Mysql服务\"></a>第一步：关闭Mysql服务</h3><p>首先，确保自己已经关闭了Mysql的服务</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> <span class=\"token string\">\"d:\\Program Files\\mysql8\\bin\"</span><span class=\"token punctuation\">(</span>此处输入自己的Mysql安装地址<span class=\"token punctuation\">)</span>\nnet stop mysql\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195648.png\"></p>\n<h3 id=\"第二步：跳过Mysql密码验证\"><a href=\"#第二步：跳过Mysql密码验证\" class=\"headerlink\" title=\"第二步：跳过Mysql密码验证\"></a>第二步：跳过Mysql密码验证</h3><p>关闭Mysql服务之后，继续在 d:\\Program Files\\mysql8\\bin 目录下进行操作，输入命令</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">mysqld --console --skip-grant-tables --shared-memory \n</code></pre>\n<p>在输入这行代码之后，我们就已经成功跳过Mysql的密码登录了<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195732.png\"></p>\n<h3 id=\"第三步：无密码方式进入Mysql\"><a href=\"#第三步：无密码方式进入Mysql\" class=\"headerlink\" title=\"第三步：无密码方式进入Mysql\"></a>第三步：无密码方式进入Mysql</h3><p>在上述步骤之后，再打开一个管理员模式运行的cmd.exe。</p>\n<p>进入 mysql 下的 bin 目录后，直接登录mysql。</p>\n<p>在命令行中输入以下代码</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> <span class=\"token string\">\"d:\\Program Files\\mysql8\\bin\"</span><span class=\"token punctuation\">(</span>此处输入自己的Mysql安装地址<span class=\"token punctuation\">)</span>\nmysql -u root -p\n</code></pre>\n<p>此时会显示让你输入密码，直接回车，就可以成功连接Mysql</p>\n<h3 id=\"第四步：将登陆密码设置为空\"><a href=\"#第四步：将登陆密码设置为空\" class=\"headerlink\" title=\"第四步：将登陆密码设置为空\"></a>第四步：将登陆密码设置为空</h3><p>输入代码，将密码设置为空（此时还不能直接修改密码，必须先设置为空，否则会报错）。</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">use mysql<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>使用mysql数据表<span class=\"token punctuation\">)</span>\nupdate user <span class=\"token keyword\">set</span> authentication_string<span class=\"token operator\">=</span><span class=\"token string\">''</span> where user<span class=\"token operator\">=</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">;</span>（将密码置为空）\nquit<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>然后退出Mysql<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195806.png\"></p>\n<h3 id=\"第五步：更改自己的登陆密码\"><a href=\"#第五步：更改自己的登陆密码\" class=\"headerlink\" title=\"第五步：更改自己的登陆密码\"></a>第五步：更改自己的登陆密码</h3><p>这里分为两个部分</p>\n<ol>\n<li>关闭第一个cmd窗口(一定要关闭！)</li>\n<li>在第二个窗口中输入代码<pre class=\" language-bash\"><code class=\"language-bash\">net stop mysql <span class=\"token punctuation\">(</span>关闭mysql服务, 虽然会显示没有开启服务，但是以防万一<span class=\"token punctuation\">)</span>\nnet start mysql <span class=\"token punctuation\">(</span>再打开mysql服务<span class=\"token punctuation\">)</span>\nmysql -u root -p\n</code></pre>\n</li>\n</ol>\n<p>此处会显示输入密码，直接回车就好了，第四步我们已经将他置为空了</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">ALTER USER <span class=\"token string\">'root'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED BY <span class=\"token string\">'新密码'</span><span class=\"token punctuation\">;</span>（更改密码）\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195829.png\"></p>\n<h3 id=\"最后一步：验证密码是否修改成功\"><a href=\"#最后一步：验证密码是否修改成功\" class=\"headerlink\" title=\"最后一步：验证密码是否修改成功\"></a>最后一步：验证密码是否修改成功</h3><pre class=\" language-bash\"><code class=\"language-bash\">quit（退出mysql）\nmysql -u root -p \n<span class=\"token punctuation\">(</span>输入新密码，再次登录<span class=\"token punctuation\">)</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<p>网上大部分的方法都是通过在<code>My.ini</code>或是<code>My_default.ini</code>中添加<code>–skip-grant-tables</code>的方法来实现跳过Mysql密码来连接数据库，并更改密码，然而都没有成功。</p>\n<blockquote>\n<p><strong>以下命令行代码均在管理员模式下操作</strong></p>\n</blockquote>\n<h3 id=\"第一步：关闭Mysql服务\"><a href=\"#第一步：关闭Mysql服务\" class=\"headerlink\" title=\"第一步：关闭Mysql服务\"></a>第一步：关闭Mysql服务</h3><p>首先，确保自己已经关闭了Mysql的服务</p>\n<pre><code class=\"bash\">cd &quot;d:\\Program Files\\mysql8\\bin&quot;(此处输入自己的Mysql安装地址)\nnet stop mysql\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195648.png\"></p>\n<h3 id=\"第二步：跳过Mysql密码验证\"><a href=\"#第二步：跳过Mysql密码验证\" class=\"headerlink\" title=\"第二步：跳过Mysql密码验证\"></a>第二步：跳过Mysql密码验证</h3><p>关闭Mysql服务之后，继续在 d:\\Program Files\\mysql8\\bin 目录下进行操作，输入命令</p>\n<pre><code class=\"bash\">mysqld --console --skip-grant-tables --shared-memory \n</code></pre>\n<p>在输入这行代码之后，我们就已经成功跳过Mysql的密码登录了<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195732.png\"></p>\n<h3 id=\"第三步：无密码方式进入Mysql\"><a href=\"#第三步：无密码方式进入Mysql\" class=\"headerlink\" title=\"第三步：无密码方式进入Mysql\"></a>第三步：无密码方式进入Mysql</h3><p>在上述步骤之后，再打开一个管理员模式运行的cmd.exe。</p>\n<p>进入 mysql 下的 bin 目录后，直接登录mysql。</p>\n<p>在命令行中输入以下代码</p>\n<pre><code class=\"bash\">cd &quot;d:\\Program Files\\mysql8\\bin&quot;(此处输入自己的Mysql安装地址)\nmysql -u root -p\n</code></pre>\n<p>此时会显示让你输入密码，直接回车，就可以成功连接Mysql</p>\n<h3 id=\"第四步：将登陆密码设置为空\"><a href=\"#第四步：将登陆密码设置为空\" class=\"headerlink\" title=\"第四步：将登陆密码设置为空\"></a>第四步：将登陆密码设置为空</h3><p>输入代码，将密码设置为空（此时还不能直接修改密码，必须先设置为空，否则会报错）。</p>\n<pre><code class=\"bash\">use mysql; (使用mysql数据表)\nupdate user set authentication_string=&#39;&#39; where user=&#39;root&#39;;（将密码置为空）\nquit; (然后退出Mysql)\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195806.png\"></p>\n<h3 id=\"第五步：更改自己的登陆密码\"><a href=\"#第五步：更改自己的登陆密码\" class=\"headerlink\" title=\"第五步：更改自己的登陆密码\"></a>第五步：更改自己的登陆密码</h3><p>这里分为两个部分</p>\n<ol>\n<li>关闭第一个cmd窗口(一定要关闭！)</li>\n<li>在第二个窗口中输入代码<pre><code class=\"bash\">net stop mysql (关闭mysql服务, 虽然会显示没有开启服务，但是以防万一)\nnet start mysql (再打开mysql服务)\nmysql -u root -p\n</code></pre>\n</li>\n</ol>\n<p>此处会显示输入密码，直接回车就好了，第四步我们已经将他置为空了</p>\n<pre><code class=\"bash\">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;;（更改密码）\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215195829.png\"></p>\n<h3 id=\"最后一步：验证密码是否修改成功\"><a href=\"#最后一步：验证密码是否修改成功\" class=\"headerlink\" title=\"最后一步：验证密码是否修改成功\"></a>最后一步：验证密码是否修改成功</h3><pre><code class=\"bash\">quit（退出mysql）\nmysql -u root -p \n(输入新密码，再次登录)\n</code></pre>\n"},{"title":"PicGo配置图床","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-24T05:36:46.000Z","update":null,"img":"https://s2.loli.net/2021/12/24/2aVbRGrFwugK6nv.png","password":null,"summary":null,"_content":"## PicGo+Gitee搭建个人图床\n### 1. PicGo下载安装\n进入[PicGo官方地址](https://github.com/Molunerfinn/PicGo/releases)下载所需要的安装包。\n\n安装好后，在软件的插件设置里安装上传gitee所需要的插件，我这里使用的是`gitee-smart 1.1.7`。\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224135031.png)\n\n### 2. Gitee上创建存放图片的仓库\n1. 打开[Gitee官网](https://gitee.com/)创建仓库，如果没注册的先自行注册账号，Gitee免费提供5G的存储空间。\n\n新建仓库时注意：\n- 设置为开源\n- Readme文件初始化\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224140258.png)\n\n2. 创建私人令牌\n\n`个人头像-->设置-->私人令牌-->生成新令牌`\n> 注意: 令牌生成后只能看见一次, 记得复制粘贴保存下来, 关闭之后就看不到了.\n\n3. 私人令牌权限设置\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224141514.png)\n\n### 3. 配置PicGo\n1. 进入PicGo软件, 选择图床设置, 找到gitee\n2. gitee配置如下:\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224143035.png)\n\n> repo: 用户名/仓库名, 可以在刚创建的仓库里进行复制\n> branch: 分支, 创建仓库时选择了master单分支, 所以这里填master\n> token: 填刚在Gitee上创建的私人令牌\n> path: 图片在仓库中的存储路径，我这里存储在image下\n> customPath：默认即可\n> customURL: 默认即可\n\n\n## PicGo配置SM.MS公共图床\n### 1. 获得SM.MS的密令Token\nSM.MS是一个老牌公共图床, 永久存储免注册，图片链接支持https，可以删除上传的图片，提供多种图片链接格式. 单张图片最大5M，每分钟最多上传10张, 有5G免费空间.\n\n进入[SM.MS官网](https://sm.ms/)注册账号, 点击`User-->Login`注册登录，登录后点击相同的位置，进入Dashboard. 左侧菜单栏找到`API Token`, 创建Token.\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224145857.png)\n\n### 2. PicGo中配置\n在PicGo中配置SM.MS非常简单, PicGO默认支持上传SM.MS图床, 不需要额外安装插件,  只需要填入密令Token即可.\n\n![](https://s2.loli.net/2021/12/24/NehaJXuBEYivjsr.png)\n\n> 附：[PicGo官方指南](https://picgo.github.io/PicGo-Doc/zh/guide/)\n","source":"_posts/PicGo配置图床.md","raw":"---\ntitle: PicGo配置图床\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-24 13:36:46\nupdate:\nimg: https://s2.loli.net/2021/12/24/2aVbRGrFwugK6nv.png\npassword:\nsummary:\ntags:\n- PicGo\n- 图床\ncategories: 软件与工具\n---\n## PicGo+Gitee搭建个人图床\n### 1. PicGo下载安装\n进入[PicGo官方地址](https://github.com/Molunerfinn/PicGo/releases)下载所需要的安装包。\n\n安装好后，在软件的插件设置里安装上传gitee所需要的插件，我这里使用的是`gitee-smart 1.1.7`。\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224135031.png)\n\n### 2. Gitee上创建存放图片的仓库\n1. 打开[Gitee官网](https://gitee.com/)创建仓库，如果没注册的先自行注册账号，Gitee免费提供5G的存储空间。\n\n新建仓库时注意：\n- 设置为开源\n- Readme文件初始化\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224140258.png)\n\n2. 创建私人令牌\n\n`个人头像-->设置-->私人令牌-->生成新令牌`\n> 注意: 令牌生成后只能看见一次, 记得复制粘贴保存下来, 关闭之后就看不到了.\n\n3. 私人令牌权限设置\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224141514.png)\n\n### 3. 配置PicGo\n1. 进入PicGo软件, 选择图床设置, 找到gitee\n2. gitee配置如下:\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224143035.png)\n\n> repo: 用户名/仓库名, 可以在刚创建的仓库里进行复制\n> branch: 分支, 创建仓库时选择了master单分支, 所以这里填master\n> token: 填刚在Gitee上创建的私人令牌\n> path: 图片在仓库中的存储路径，我这里存储在image下\n> customPath：默认即可\n> customURL: 默认即可\n\n\n## PicGo配置SM.MS公共图床\n### 1. 获得SM.MS的密令Token\nSM.MS是一个老牌公共图床, 永久存储免注册，图片链接支持https，可以删除上传的图片，提供多种图片链接格式. 单张图片最大5M，每分钟最多上传10张, 有5G免费空间.\n\n进入[SM.MS官网](https://sm.ms/)注册账号, 点击`User-->Login`注册登录，登录后点击相同的位置，进入Dashboard. 左侧菜单栏找到`API Token`, 创建Token.\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211224145857.png)\n\n### 2. PicGo中配置\n在PicGo中配置SM.MS非常简单, PicGO默认支持上传SM.MS图床, 不需要额外安装插件,  只需要填入密令Token即可.\n\n![](https://s2.loli.net/2021/12/24/NehaJXuBEYivjsr.png)\n\n> 附：[PicGo官方指南](https://picgo.github.io/PicGo-Doc/zh/guide/)\n","slug":"PicGo配置图床","published":1,"updated":"2021-12-30T08:57:23.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3u000h8ou15mtq5ik2","content":"<h2 id=\"PicGo-Gitee搭建个人图床\"><a href=\"#PicGo-Gitee搭建个人图床\" class=\"headerlink\" title=\"PicGo+Gitee搭建个人图床\"></a>PicGo+Gitee搭建个人图床</h2><h3 id=\"1-PicGo下载安装\"><a href=\"#1-PicGo下载安装\" class=\"headerlink\" title=\"1. PicGo下载安装\"></a>1. PicGo下载安装</h3><p>进入<a href=\"https://github.com/Molunerfinn/PicGo/releases\">PicGo官方地址</a>下载所需要的安装包。</p>\n<p>安装好后，在软件的插件设置里安装上传gitee所需要的插件，我这里使用的是<code>gitee-smart 1.1.7</code>。</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224135031.png\"></p>\n<h3 id=\"2-Gitee上创建存放图片的仓库\"><a href=\"#2-Gitee上创建存放图片的仓库\" class=\"headerlink\" title=\"2. Gitee上创建存放图片的仓库\"></a>2. Gitee上创建存放图片的仓库</h3><ol>\n<li>打开<a href=\"https://gitee.com/\">Gitee官网</a>创建仓库，如果没注册的先自行注册账号，Gitee免费提供5G的存储空间。</li>\n</ol>\n<p>新建仓库时注意：</p>\n<ul>\n<li>设置为开源</li>\n<li>Readme文件初始化</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224140258.png\"></p>\n<ol start=\"2\">\n<li>创建私人令牌</li>\n</ol>\n<p><code>个人头像--&gt;设置--&gt;私人令牌--&gt;生成新令牌</code></p>\n<blockquote>\n<p>注意: 令牌生成后只能看见一次, 记得复制粘贴保存下来, 关闭之后就看不到了.</p>\n</blockquote>\n<ol start=\"3\">\n<li>私人令牌权限设置</li>\n</ol>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224141514.png\"></p>\n<h3 id=\"3-配置PicGo\"><a href=\"#3-配置PicGo\" class=\"headerlink\" title=\"3. 配置PicGo\"></a>3. 配置PicGo</h3><ol>\n<li>进入PicGo软件, 选择图床设置, 找到gitee</li>\n<li>gitee配置如下:</li>\n</ol>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224143035.png\"></p>\n<blockquote>\n<p>repo: 用户名/仓库名, 可以在刚创建的仓库里进行复制<br>branch: 分支, 创建仓库时选择了master单分支, 所以这里填master<br>token: 填刚在Gitee上创建的私人令牌<br>path: 图片在仓库中的存储路径，我这里存储在image下<br>customPath：默认即可<br>customURL: 默认即可</p>\n</blockquote>\n<h2 id=\"PicGo配置SM-MS公共图床\"><a href=\"#PicGo配置SM-MS公共图床\" class=\"headerlink\" title=\"PicGo配置SM.MS公共图床\"></a>PicGo配置SM.MS公共图床</h2><h3 id=\"1-获得SM-MS的密令Token\"><a href=\"#1-获得SM-MS的密令Token\" class=\"headerlink\" title=\"1. 获得SM.MS的密令Token\"></a>1. 获得SM.MS的密令Token</h3><p>SM.MS是一个老牌公共图床, 永久存储免注册，图片链接支持https，可以删除上传的图片，提供多种图片链接格式. 单张图片最大5M，每分钟最多上传10张, 有5G免费空间.</p>\n<p>进入<a href=\"https://sm.ms/\">SM.MS官网</a>注册账号, 点击<code>User--&gt;Login</code>注册登录，登录后点击相同的位置，进入Dashboard. 左侧菜单栏找到<code>API Token</code>, 创建Token.</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224145857.png\"></p>\n<h3 id=\"2-PicGo中配置\"><a href=\"#2-PicGo中配置\" class=\"headerlink\" title=\"2. PicGo中配置\"></a>2. PicGo中配置</h3><p>在PicGo中配置SM.MS非常简单, PicGO默认支持上传SM.MS图床, 不需要额外安装插件,  只需要填入密令Token即可.</p>\n<p><img src=\"https://s2.loli.net/2021/12/24/NehaJXuBEYivjsr.png\"></p>\n<blockquote>\n<p>附：<a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/\">PicGo官方指南</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"PicGo-Gitee搭建个人图床\"><a href=\"#PicGo-Gitee搭建个人图床\" class=\"headerlink\" title=\"PicGo+Gitee搭建个人图床\"></a>PicGo+Gitee搭建个人图床</h2><h3 id=\"1-PicGo下载安装\"><a href=\"#1-PicGo下载安装\" class=\"headerlink\" title=\"1. PicGo下载安装\"></a>1. PicGo下载安装</h3><p>进入<a href=\"https://github.com/Molunerfinn/PicGo/releases\">PicGo官方地址</a>下载所需要的安装包。</p>\n<p>安装好后，在软件的插件设置里安装上传gitee所需要的插件，我这里使用的是<code>gitee-smart 1.1.7</code>。</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224135031.png\"></p>\n<h3 id=\"2-Gitee上创建存放图片的仓库\"><a href=\"#2-Gitee上创建存放图片的仓库\" class=\"headerlink\" title=\"2. Gitee上创建存放图片的仓库\"></a>2. Gitee上创建存放图片的仓库</h3><ol>\n<li>打开<a href=\"https://gitee.com/\">Gitee官网</a>创建仓库，如果没注册的先自行注册账号，Gitee免费提供5G的存储空间。</li>\n</ol>\n<p>新建仓库时注意：</p>\n<ul>\n<li>设置为开源</li>\n<li>Readme文件初始化</li>\n</ul>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224140258.png\"></p>\n<ol start=\"2\">\n<li>创建私人令牌</li>\n</ol>\n<p><code>个人头像--&gt;设置--&gt;私人令牌--&gt;生成新令牌</code></p>\n<blockquote>\n<p>注意: 令牌生成后只能看见一次, 记得复制粘贴保存下来, 关闭之后就看不到了.</p>\n</blockquote>\n<ol start=\"3\">\n<li>私人令牌权限设置</li>\n</ol>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224141514.png\"></p>\n<h3 id=\"3-配置PicGo\"><a href=\"#3-配置PicGo\" class=\"headerlink\" title=\"3. 配置PicGo\"></a>3. 配置PicGo</h3><ol>\n<li>进入PicGo软件, 选择图床设置, 找到gitee</li>\n<li>gitee配置如下:</li>\n</ol>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224143035.png\"></p>\n<blockquote>\n<p>repo: 用户名/仓库名, 可以在刚创建的仓库里进行复制<br>branch: 分支, 创建仓库时选择了master单分支, 所以这里填master<br>token: 填刚在Gitee上创建的私人令牌<br>path: 图片在仓库中的存储路径，我这里存储在image下<br>customPath：默认即可<br>customURL: 默认即可</p>\n</blockquote>\n<h2 id=\"PicGo配置SM-MS公共图床\"><a href=\"#PicGo配置SM-MS公共图床\" class=\"headerlink\" title=\"PicGo配置SM.MS公共图床\"></a>PicGo配置SM.MS公共图床</h2><h3 id=\"1-获得SM-MS的密令Token\"><a href=\"#1-获得SM-MS的密令Token\" class=\"headerlink\" title=\"1. 获得SM.MS的密令Token\"></a>1. 获得SM.MS的密令Token</h3><p>SM.MS是一个老牌公共图床, 永久存储免注册，图片链接支持https，可以删除上传的图片，提供多种图片链接格式. 单张图片最大5M，每分钟最多上传10张, 有5G免费空间.</p>\n<p>进入<a href=\"https://sm.ms/\">SM.MS官网</a>注册账号, 点击<code>User--&gt;Login</code>注册登录，登录后点击相同的位置，进入Dashboard. 左侧菜单栏找到<code>API Token</code>, 创建Token.</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211224145857.png\"></p>\n<h3 id=\"2-PicGo中配置\"><a href=\"#2-PicGo中配置\" class=\"headerlink\" title=\"2. PicGo中配置\"></a>2. PicGo中配置</h3><p>在PicGo中配置SM.MS非常简单, PicGO默认支持上传SM.MS图床, 不需要额外安装插件,  只需要填入密令Token即可.</p>\n<p><img src=\"https://s2.loli.net/2021/12/24/NehaJXuBEYivjsr.png\"></p>\n<blockquote>\n<p>附：<a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/\">PicGo官方指南</a></p>\n</blockquote>\n"},{"title":"git连接GitHub报错port 22 Connection timed out","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-28T03:01:25.000Z","update":null,"img":"https://s2.loli.net/2021/12/24/1xYTHXJLykSuRPE.jpg","password":null,"summary":null,"_content":"## 前言\n使用Git提交代码时，发现报错Connection timed out，然后使用`ssh -T git@github.com`检查连接GitHub，报错：\n\n![](https://s2.loli.net/2021/12/28/QieGVSZPuBDNUyn.png)\n\n## 解决方法\n在存放公钥私钥(`id_rsa` 和 `id_rsa.pub`)的同级文件夹中，例如我的是Windows系统，路径为：`C:\\Users\\2cc\\.ssh`。在该文件夹新建`config文本`，内容如下：\n```bash\nHost github.com\nUser cfxin@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n```\n> User 后面写的是登录Github的账号;\n该配置文件目的是将原来的22端口改为443端口。\n\n再次执行`ssh -T git@github.com`检查，输入yes，可以看到连接成功。\n\n![](https://s2.loli.net/2021/12/28/bkZoPA8LQ5Yifcz.png)\n","source":"_posts/git连接GitHub报错port 22 Connection timed out.md","raw":"---\ntitle: git连接GitHub报错port 22 Connection timed out\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-28 11:01:25\nupdate: \nimg: https://s2.loli.net/2021/12/24/1xYTHXJLykSuRPE.jpg\npassword: \nsummary: \ncategories: 软件与工具\ntags: \n- Git\n- Github\n---\n## 前言\n使用Git提交代码时，发现报错Connection timed out，然后使用`ssh -T git@github.com`检查连接GitHub，报错：\n\n![](https://s2.loli.net/2021/12/28/QieGVSZPuBDNUyn.png)\n\n## 解决方法\n在存放公钥私钥(`id_rsa` 和 `id_rsa.pub`)的同级文件夹中，例如我的是Windows系统，路径为：`C:\\Users\\2cc\\.ssh`。在该文件夹新建`config文本`，内容如下：\n```bash\nHost github.com\nUser cfxin@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n```\n> User 后面写的是登录Github的账号;\n该配置文件目的是将原来的22端口改为443端口。\n\n再次执行`ssh -T git@github.com`检查，输入yes，可以看到连接成功。\n\n![](https://s2.loli.net/2021/12/28/bkZoPA8LQ5Yifcz.png)\n","slug":"git连接GitHub报错port 22 Connection timed out","published":1,"updated":"2021-12-30T08:57:23.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3w000l8ou1cv0e2yfc","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用Git提交代码时，发现报错Connection timed out，然后使用<code>ssh -T git@github.com</code>检查连接GitHub，报错：</p>\n<p><img src=\"https://s2.loli.net/2021/12/28/QieGVSZPuBDNUyn.png\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在存放公钥私钥(<code>id_rsa</code> 和 <code>id_rsa.pub</code>)的同级文件夹中，例如我的是Windows系统，路径为：<code>C:\\Users\\2cc\\.ssh</code>。在该文件夹新建<code>config文本</code>，内容如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">Host github.com\nUser cfxin@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n</code></pre>\n<blockquote>\n<p>User 后面写的是登录Github的账号;<br>该配置文件目的是将原来的22端口改为443端口。</p>\n</blockquote>\n<p>再次执行<code>ssh -T git@github.com</code>检查，输入yes，可以看到连接成功。</p>\n<p><img src=\"https://s2.loli.net/2021/12/28/bkZoPA8LQ5Yifcz.png\"></p>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用Git提交代码时，发现报错Connection timed out，然后使用<code>ssh -T git@github.com</code>检查连接GitHub，报错：</p>\n<p><img src=\"https://s2.loli.net/2021/12/28/QieGVSZPuBDNUyn.png\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在存放公钥私钥(<code>id_rsa</code> 和 <code>id_rsa.pub</code>)的同级文件夹中，例如我的是Windows系统，路径为：<code>C:\\Users\\2cc\\.ssh</code>。在该文件夹新建<code>config文本</code>，内容如下：</p>\n<pre><code class=\"bash\">Host github.com\nUser cfxin@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n</code></pre>\n<blockquote>\n<p>User 后面写的是登录Github的账号;<br>该配置文件目的是将原来的22端口改为443端口。</p>\n</blockquote>\n<p>再次执行<code>ssh -T git@github.com</code>检查，输入yes，可以看到连接成功。</p>\n<p><img src=\"https://s2.loli.net/2021/12/28/bkZoPA8LQ5Yifcz.png\"></p>\n"},{"title":"markdown语法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-27T13:44:46.000Z","update":null,"img":"https://s2.loli.net/2021/12/24/qy6eWLDFU9aTBE8.png","password":null,"summary":null,"_content":"\n## 基础语法\n### 标题\n在文字前面加`#`表示标题，`#`的个数代表标题级数，一个`#`是一级标题，最多6个`#`。\n例如：\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n···\n###### 六级标题\n```\n> 注意：#号后面需要一个空格才生效\n\n### 换行\n现在大多数 markdown 编辑器都支持直接`按回车键`换行，例如Typora、Markdown Preview Enhanced插件等。若直接`按回车键`不能换行，需以`2个或多个空格`结束一行，然后再`按回车键`，则会另起一行。\n\n### 分段\n使用`空白行`分隔一行或多行文本。\n```markdown\n这是第一段\n这还是第一段\n\n这是第二段\n```\n\n### 强调\n- 加粗：在需要加粗的地方前后添加`2个*号`\n- 斜体：在需要斜体的地方前后添加`1个*号`\n- 粗斜体：在需要粗斜体的地方前后添加`3个*号`\n- 横线删除：在需要删除的地方前后添加`2个~号`\n\n```markdown\n**我是粗体**\n*我是斜体*\n***我是粗斜体***\n~~我会被横线删除~~\n```\n![](https://s2.loli.net/2021/12/28/vq6LjFYyktcxh3w.png)\n\n### 引用\n在需要引用的句子或段落前添加1个`>空格`。\n\n- 块引用可以包含多个段落。在段落之间的空白行上添加一个`>`。\n- 需要嵌套块引用时，在段落前面添加1个`>>空格`。\n\n```markdown\n> 第一段引用\n> \n> 第二段引用\n>> 第二段引用中的引用\n```\n![](https://s2.loli.net/2021/12/28/Q1fCRdbAlXYvP6o.png)\n\n### 列表\n- 无序列表：在条目前添加1个`-空格`。\n- 有序列表：在条目前添加`数字.空格`或`字母.空格`。\n- 嵌套列表，在条目前先添加`2个或多个空格`，再写列表。\n\n```markdown\n- 条目\n- 条目\n  - 条目\n  - 条目\n1. 条目1\n2. 条目2\n  a. 条目2.1\n  b. 条目2.2\n```\n![](https://s2.loli.net/2021/12/28/oHvPzs56uatRErQ.png)\n\n### 链接\n用`[链接名](网址)`插入链接，如果需要连接名则使用`<网址>`的形式。若需要鼠标悬停在链接上时显示提示，则在网址后用引号`' '`添加提示信息。\n```markdown\n[首页](https://cfxin.github.io)\n<https://cfxin.github.io>\n[首页](https://cfxin.github.io '提示信息')\n```\n![](https://s2.loli.net/2021/12/28/tcKyrPkY3E8IxOd.png)\n\n### 图片\n用`![图片描述](图片路径或url)`插入图片, 若不需要图片描述，则方括号内空着即可。\n```markdown\n![图1](https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png)\n![图2](/images/2.png)\n```\n\n### 代码\n- 行内代码：用``括起来。\n- 代码块：用一对` ``` `围起来。\n  - 在第一个` ``` `后指定语言可语法高亮\n\n![](https://s2.loli.net/2021/12/28/KTmjZ9ilnR4GJpQ.png)\n\n### 分割线\n在单独一行上使用3个`-`可插入分割线。\n```markdown\n水平线上\n\n---\n\n水平线下\n```\n\n### 表格\n使用如下形式，默认左对齐，`-`相当于`:-`表示左对齐，`-:`表示右对齐，`:-:`表示居中对齐。\n```markdown\n|表头|表头|\n|-|-|\n|单元格|单元格|\n|单元格|单元格|\n```\n![](https://s2.loli.net/2021/12/28/eIzKbXZxtDlkp95.png)\n\n> 参考资料：[Markdown中文网](http://markdown.p2hp.com/index.html)、[MPE插件简介](https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/)\n","source":"_posts/markdown语法.md","raw":"---\ntitle: markdown语法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-27 21:44:46\nupdate: \nimg: https://s2.loli.net/2021/12/24/qy6eWLDFU9aTBE8.png\npassword: \nsummary: \ncategories: 软件与工具\ntags: \n- markdown\n---\n\n## 基础语法\n### 标题\n在文字前面加`#`表示标题，`#`的个数代表标题级数，一个`#`是一级标题，最多6个`#`。\n例如：\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n···\n###### 六级标题\n```\n> 注意：#号后面需要一个空格才生效\n\n### 换行\n现在大多数 markdown 编辑器都支持直接`按回车键`换行，例如Typora、Markdown Preview Enhanced插件等。若直接`按回车键`不能换行，需以`2个或多个空格`结束一行，然后再`按回车键`，则会另起一行。\n\n### 分段\n使用`空白行`分隔一行或多行文本。\n```markdown\n这是第一段\n这还是第一段\n\n这是第二段\n```\n\n### 强调\n- 加粗：在需要加粗的地方前后添加`2个*号`\n- 斜体：在需要斜体的地方前后添加`1个*号`\n- 粗斜体：在需要粗斜体的地方前后添加`3个*号`\n- 横线删除：在需要删除的地方前后添加`2个~号`\n\n```markdown\n**我是粗体**\n*我是斜体*\n***我是粗斜体***\n~~我会被横线删除~~\n```\n![](https://s2.loli.net/2021/12/28/vq6LjFYyktcxh3w.png)\n\n### 引用\n在需要引用的句子或段落前添加1个`>空格`。\n\n- 块引用可以包含多个段落。在段落之间的空白行上添加一个`>`。\n- 需要嵌套块引用时，在段落前面添加1个`>>空格`。\n\n```markdown\n> 第一段引用\n> \n> 第二段引用\n>> 第二段引用中的引用\n```\n![](https://s2.loli.net/2021/12/28/Q1fCRdbAlXYvP6o.png)\n\n### 列表\n- 无序列表：在条目前添加1个`-空格`。\n- 有序列表：在条目前添加`数字.空格`或`字母.空格`。\n- 嵌套列表，在条目前先添加`2个或多个空格`，再写列表。\n\n```markdown\n- 条目\n- 条目\n  - 条目\n  - 条目\n1. 条目1\n2. 条目2\n  a. 条目2.1\n  b. 条目2.2\n```\n![](https://s2.loli.net/2021/12/28/oHvPzs56uatRErQ.png)\n\n### 链接\n用`[链接名](网址)`插入链接，如果需要连接名则使用`<网址>`的形式。若需要鼠标悬停在链接上时显示提示，则在网址后用引号`' '`添加提示信息。\n```markdown\n[首页](https://cfxin.github.io)\n<https://cfxin.github.io>\n[首页](https://cfxin.github.io '提示信息')\n```\n![](https://s2.loli.net/2021/12/28/tcKyrPkY3E8IxOd.png)\n\n### 图片\n用`![图片描述](图片路径或url)`插入图片, 若不需要图片描述，则方括号内空着即可。\n```markdown\n![图1](https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png)\n![图2](/images/2.png)\n```\n\n### 代码\n- 行内代码：用``括起来。\n- 代码块：用一对` ``` `围起来。\n  - 在第一个` ``` `后指定语言可语法高亮\n\n![](https://s2.loli.net/2021/12/28/KTmjZ9ilnR4GJpQ.png)\n\n### 分割线\n在单独一行上使用3个`-`可插入分割线。\n```markdown\n水平线上\n\n---\n\n水平线下\n```\n\n### 表格\n使用如下形式，默认左对齐，`-`相当于`:-`表示左对齐，`-:`表示右对齐，`:-:`表示居中对齐。\n```markdown\n|表头|表头|\n|-|-|\n|单元格|单元格|\n|单元格|单元格|\n```\n![](https://s2.loli.net/2021/12/28/eIzKbXZxtDlkp95.png)\n\n> 参考资料：[Markdown中文网](http://markdown.p2hp.com/index.html)、[MPE插件简介](https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/)\n","slug":"markdown语法","published":1,"updated":"2021-12-30T08:57:23.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3x000n8ou13qkigcz9","content":"<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>在文字前面加<code>#</code>表示标题，<code>#</code>的个数代表标题级数，一个<code>#</code>是一级标题，最多6个<code>#</code>。<br>例如：</p>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 一级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 二级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 三级标题</span>\n···\n<span class=\"token title important\"><span class=\"token punctuation\">######</span> 六级标题</span>\n</code></pre>\n<blockquote>\n<p>注意：#号后面需要一个空格才生效</p>\n</blockquote>\n<h3 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h3><p>现在大多数 markdown 编辑器都支持直接<code>按回车键</code>换行，例如Typora、Markdown Preview Enhanced插件等。若直接<code>按回车键</code>不能换行，需以<code>2个或多个空格</code>结束一行，然后再<code>按回车键</code>，则会另起一行。</p>\n<h3 id=\"分段\"><a href=\"#分段\" class=\"headerlink\" title=\"分段\"></a>分段</h3><p>使用<code>空白行</code>分隔一行或多行文本。</p>\n<pre class=\" language-markdown\"><code class=\"language-markdown\">这是第一段\n这还是第一段\n\n这是第二段\n</code></pre>\n<h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><ul>\n<li>加粗：在需要加粗的地方前后添加<code>2个*号</code></li>\n<li>斜体：在需要斜体的地方前后添加<code>1个*号</code></li>\n<li>粗斜体：在需要粗斜体的地方前后添加<code>3个*号</code></li>\n<li>横线删除：在需要删除的地方前后添加<code>2个~号</code></li>\n</ul>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token bold\"><span class=\"token punctuation\">**</span>我是粗体<span class=\"token punctuation\">**</span></span>\n<span class=\"token italic\"><span class=\"token punctuation\">*</span>我是斜体<span class=\"token punctuation\">*</span></span>\n<span class=\"token bold\"><span class=\"token punctuation\">**</span>*我是粗斜体<span class=\"token punctuation\">**</span></span>*\n~~我会被横线删除~~\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/vq6LjFYyktcxh3w.png\"></p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>在需要引用的句子或段落前添加1个<code>&gt;空格</code>。</p>\n<ul>\n<li>块引用可以包含多个段落。在段落之间的空白行上添加一个<code>&gt;</code>。</li>\n<li>需要嵌套块引用时，在段落前面添加1个<code>&gt;&gt;空格</code>。</li>\n</ul>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token blockquote punctuation\">></span> 第一段引用\n<span class=\"token blockquote punctuation\">></span> \n<span class=\"token blockquote punctuation\">></span> 第二段引用\n<span class=\"token blockquote punctuation\">>></span> 第二段引用中的引用\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/Q1fCRdbAlXYvP6o.png\"></p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>无序列表：在条目前添加1个<code>-空格</code>。</li>\n<li>有序列表：在条目前添加<code>数字.空格</code>或<code>字母.空格</code>。</li>\n<li>嵌套列表，在条目前先添加<code>2个或多个空格</code>，再写列表。</li>\n</ul>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">-</span> 条目\n<span class=\"token list punctuation\">-</span> 条目\n  <span class=\"token list punctuation\">-</span> 条目\n  <span class=\"token list punctuation\">-</span> 条目\n<span class=\"token list punctuation\">1.</span> 条目1\n<span class=\"token list punctuation\">2.</span> 条目2\n  a. 条目2.1\n  b. 条目2.2\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/oHvPzs56uatRErQ.png\"></p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>用<code>[链接名](网址)</code>插入链接，如果需要连接名则使用<code>&lt;网址&gt;</code>的形式。若需要鼠标悬停在链接上时显示提示，则在网址后用引号<code>&#39; &#39;</code>添加提示信息。</p>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token url\">[首页](https://cfxin.github.io)</span>\n&lt;https://cfxin.github.io>\n[首页](https://cfxin.github.io '提示信息')\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/tcKyrPkY3E8IxOd.png\"></p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>用<code>![图片描述](图片路径或url)</code>插入图片, 若不需要图片描述，则方括号内空着即可。</p>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token url\">![图1](https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png)</span>\n<span class=\"token url\">![图2](/images/2.png)</span>\n</code></pre>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>行内代码：用``括起来。</li>\n<li>代码块：用一对<code>```</code>围起来。<ul>\n<li>在第一个<code>```</code>后指定语言可语法高亮</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2021/12/28/KTmjZ9ilnR4GJpQ.png\"></p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>在单独一行上使用3个<code>-</code>可插入分割线。</p>\n<pre class=\" language-markdown\"><code class=\"language-markdown\">水平线上\n\n<span class=\"token hr punctuation\">---</span>\n\n水平线下\n</code></pre>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p>使用如下形式，默认左对齐，<code>-</code>相当于<code>:-</code>表示左对齐，<code>-:</code>表示右对齐，<code>:-:</code>表示居中对齐。</p>\n<pre class=\" language-markdown\"><code class=\"language-markdown\">|表头|表头|\n|-|-|\n|单元格|单元格|\n|单元格|单元格|\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/eIzKbXZxtDlkp95.png\"></p>\n<blockquote>\n<p>参考资料：<a href=\"http://markdown.p2hp.com/index.html\">Markdown中文网</a>、<a href=\"https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/\">MPE插件简介</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>在文字前面加<code>#</code>表示标题，<code>#</code>的个数代表标题级数，一个<code>#</code>是一级标题，最多6个<code>#</code>。<br>例如：</p>\n<pre><code class=\"markdown\"># 一级标题\n## 二级标题\n### 三级标题\n···\n###### 六级标题\n</code></pre>\n<blockquote>\n<p>注意：#号后面需要一个空格才生效</p>\n</blockquote>\n<h3 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h3><p>现在大多数 markdown 编辑器都支持直接<code>按回车键</code>换行，例如Typora、Markdown Preview Enhanced插件等。若直接<code>按回车键</code>不能换行，需以<code>2个或多个空格</code>结束一行，然后再<code>按回车键</code>，则会另起一行。</p>\n<h3 id=\"分段\"><a href=\"#分段\" class=\"headerlink\" title=\"分段\"></a>分段</h3><p>使用<code>空白行</code>分隔一行或多行文本。</p>\n<pre><code class=\"markdown\">这是第一段\n这还是第一段\n\n这是第二段\n</code></pre>\n<h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><ul>\n<li>加粗：在需要加粗的地方前后添加<code>2个*号</code></li>\n<li>斜体：在需要斜体的地方前后添加<code>1个*号</code></li>\n<li>粗斜体：在需要粗斜体的地方前后添加<code>3个*号</code></li>\n<li>横线删除：在需要删除的地方前后添加<code>2个~号</code></li>\n</ul>\n<pre><code class=\"markdown\">**我是粗体**\n*我是斜体*\n***我是粗斜体***\n~~我会被横线删除~~\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/vq6LjFYyktcxh3w.png\"></p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>在需要引用的句子或段落前添加1个<code>&gt;空格</code>。</p>\n<ul>\n<li>块引用可以包含多个段落。在段落之间的空白行上添加一个<code>&gt;</code>。</li>\n<li>需要嵌套块引用时，在段落前面添加1个<code>&gt;&gt;空格</code>。</li>\n</ul>\n<pre><code class=\"markdown\">&gt; 第一段引用\n&gt; \n&gt; 第二段引用\n&gt;&gt; 第二段引用中的引用\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/Q1fCRdbAlXYvP6o.png\"></p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>无序列表：在条目前添加1个<code>-空格</code>。</li>\n<li>有序列表：在条目前添加<code>数字.空格</code>或<code>字母.空格</code>。</li>\n<li>嵌套列表，在条目前先添加<code>2个或多个空格</code>，再写列表。</li>\n</ul>\n<pre><code class=\"markdown\">- 条目\n- 条目\n  - 条目\n  - 条目\n1. 条目1\n2. 条目2\n  a. 条目2.1\n  b. 条目2.2\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/oHvPzs56uatRErQ.png\"></p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>用<code>[链接名](网址)</code>插入链接，如果需要连接名则使用<code>&lt;网址&gt;</code>的形式。若需要鼠标悬停在链接上时显示提示，则在网址后用引号<code>&#39; &#39;</code>添加提示信息。</p>\n<pre><code class=\"markdown\">[首页](https://cfxin.github.io)\n&lt;https://cfxin.github.io&gt;\n[首页](https://cfxin.github.io &#39;提示信息&#39;)\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/tcKyrPkY3E8IxOd.png\"></p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>用<code>![图片描述](图片路径或url)</code>插入图片, 若不需要图片描述，则方括号内空着即可。</p>\n<pre><code class=\"markdown\">![图1](https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png)\n![图2](/images/2.png)\n</code></pre>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>行内代码：用``括起来。</li>\n<li>代码块：用一对<code>```</code>围起来。<ul>\n<li>在第一个<code>```</code>后指定语言可语法高亮</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2021/12/28/KTmjZ9ilnR4GJpQ.png\"></p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>在单独一行上使用3个<code>-</code>可插入分割线。</p>\n<pre><code class=\"markdown\">水平线上\n\n---\n\n水平线下\n</code></pre>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p>使用如下形式，默认左对齐，<code>-</code>相当于<code>:-</code>表示左对齐，<code>-:</code>表示右对齐，<code>:-:</code>表示居中对齐。</p>\n<pre><code class=\"markdown\">|表头|表头|\n|-|-|\n|单元格|单元格|\n|单元格|单元格|\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/28/eIzKbXZxtDlkp95.png\"></p>\n<blockquote>\n<p>参考资料：<a href=\"http://markdown.p2hp.com/index.html\">Markdown中文网</a>、<a href=\"https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/\">MPE插件简介</a></p>\n</blockquote>\n"},{"title":"test","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-30T02:51:44.000Z","update":null,"img":null,"password":null,"summary":null,"_content":":kissing_heart:\n:rofl:\n:smile: :smile_cat:\n😀🤣🎅\n\n<!-- :fa-car:\n\n30^th^\n\nContent [^1]\n\n[^1]: Hi! This is a footnote\n\n==marked== -->","source":"_posts/test.md","raw":"---\ntitle: test\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-30 10:51:44\nupdate:\nimg:\npassword:\nsummary:\ntags:\ncategories:\n---\n:kissing_heart:\n:rofl:\n:smile: :smile_cat:\n😀🤣🎅\n\n<!-- :fa-car:\n\n30^th^\n\nContent [^1]\n\n[^1]: Hi! This is a footnote\n\n==marked== -->","slug":"test","published":1,"updated":"2021-12-30T08:57:23.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv3z000r8ou1d1q22bk5","content":"<p>:kissing_heart:<br>:rofl:<br>:smile: :smile_cat:<br>😀🤣🎅</p>\n<!-- :fa-car:\n\n30^th^\n\nContent [^1]\n\n[^1]: Hi! This is a footnote\n\n==marked== -->","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<p>:kissing_heart:<br>:rofl:<br>:smile: :smile_cat:<br>😀🤣🎅</p>\n<!-- :fa-car:\n\n30^th^\n\nContent [^1]\n\n[^1]: Hi! This is a footnote\n\n==marked== -->"},{"title":"vscode搭建一站式博客写作环境","top":true,"cover":true,"coverImg":"/medias/coverImg/coverImg2.jpg","toc":true,"mathjax":true,"date":"2021-12-28T05:37:50.000Z","update":null,"img":"https://s2.loli.net/2021/12/24/wUF2AJ4iYRTBkKO.png","password":null,"summary":null,"_content":"\n## 前言\n使用 Github page 和 Hexo 搭建的个人博客，每次写博客时需要在博客根目录下打开`Git Bash Here`，在命令窗口输入新建命令`hexo n`，然后去文件管理器找到新建的`md`文件，再用`markdown编辑器`进行书写，最后书写完需要回到命令窗口输入命令进行预览和部署。这一过程基本需要在三个界面来回切换，相当繁琐。为了更方便的书写，避免来回切换界面，我尝试了在 vscode 中配置一个完整的 Hexo 博客写作环境，即在 vscode 内完成上述所有操作。\n\n主要内容：\n- 安装`Markdown Preview Enhanced`插件\n- 在vscode终端里添加`Git Bash`终端\n- 安装`PicGo`插件\n- 开启markdown代码补全功能，通过代码补全快速插入博客文章的`Front matter`。\n\n## 配置markdown环境\nvscode 默认是支持 markdown 的，但语法支持以及扩展功能较少，因此需要安装插件来获得更好的书写体验，有两个插件：`Markdown All in One`和`Markdown Preview Enhanced`。\n\n### 1. 安装\n这里推荐安装`Markdown Preview Enhanced`插件，简称`MPE`。打开 vscode 编辑器，在插件页搜索 markdown-preview-enhanced，接着点击 Install 按钮。\n![](https://s2.loli.net/2021/12/27/rPTNOsdaRSi9nCU.png)\n\n### 2. 使用\nMPE 支持一边写一边实时渲染，markdown 基本语法可参考[markdown中文网](http://markdown.p2hp.com/)，MPE插件使用技巧可参考[MPE简介](https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/)，我这只简单介绍一下基本使用和更换主题。\n![](https://s2.loli.net/2021/12/27/SFjHtbvM4gXwPks.png)\n\n预览窗口上`右键-->Preview Theme`更换主题，推荐将主题更换为`vue.css`，因为这个主题的样式基本与Hexo博客渲染出来的效果一致，这样我们在书写时看到的效果就和发布到个人博客网站上看到的效果一样，基本可以省去使用`hexo s -g`进行本地部署预览。\n![](https://s2.loli.net/2021/12/27/zi62mBQS1MZnudO.png)\n\n## 配置Git Bash终端\nvscode 的终端默认不支持 Git bash，为了直接在 vscode 中打开 Git Bash 终端，需要做以下配置：\n\n### 1. 打开vscode\n`文件->首选项->设置`，打开设置，搜索`shell windows`\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211222111931.png)\n\n### 2. 添加配置\n打开`settings.json`，在最后一个花括号前输入代码：\n```json\n// 设置终端默认为git bash\n\"terminal.integrated.profiles.windows\": {\n  \"gitBash\": {\n    \"path\": \"D:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\",//这里是的的bash路径\n  }\n},\n\"terminal.integrated.defaultProfile.windows\": \"gitBash\"\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211222112158.png)\n\n### 3. 重启生效\n保存重启 vscode，按`ctrl+~`键打开终端，测试是否成功。\n![](https://s2.loli.net/2021/12/27/k3hVBpofNt5sugT.png)\n\n## 配置自动上传图床\n平时写博客插入图片时，需要切换到图床网站或 PicGo 上传图片，再拷贝连接回来，非常麻烦。而通过 PicGo 插件可以实现直接复制图片到 vscode 中，图片会自动上传到配置好的图床，并在文档内转换为图片链接地址。支持的图床有：`微博`，`七牛图床`，`腾讯云COS`，`又拍云`，`github`，`阿里云OSS`，`imgur`和`SM.MS`。\n\n### 安装PicGo插件\n![](https://s2.loli.net/2021/12/27/YP7KIoCWqDvcanx.png)\n\n### 配置Token\n我这里使用的是`SM.MS`图床，因此只需要配置 Token 就可以。如果使用的是其它的图床，需要添加对应的配置项。\n\n1. 在 PicGo 插件上`右键-->扩展设置`\n\n找到 `Smms：Token`，填入自己的 Token值。\n![](https://s2.loli.net/2021/12/27/tCLp2GoQ94jfbvI.png)\n\n2. 使用\n\n需要插入图片时，使用快捷键上传。\n![](https://s2.loli.net/2021/12/27/rDNomitYnh1CQIH.png)\n\n例如：我是windows系统，选中要插入的图片右键复制，在文档中按`ctrl+alt+u`自动上传，上传成功后文档中插入图片的地方返回图片链接。\n![](https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png)\n\n默认是`![图片名](图片地址)`的格式，并且会自动以上传时间命名图片。如果不想自动填入图片名称，可以将扩展设置里的`Custom Output Format`修改为如下：\n![](https://s2.loli.net/2021/12/27/d6wIPqSBOsjno1A.png)\n\n效果：\n![](https://s2.loli.net/2021/12/27/dmLuDsrZ1coPF3N.png)\n\n可以看到`[]`内不再自动填入上传时间。\n> 附：\n> [PicGo插件配置官方文档](https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)\n> [PicGo搭建图床](https://cfxin.github.io/picgo-pei-zhi-tu-chuang.html)\n\n## 配置博客文件模板\n我们知道用`hexo n`命令新建文档会自动根据模板文件插入`Front matter`的内容，而在vscode中直接通过右键新建文件是没有`Front matter`的，需要手动一项一项写书，比较麻烦。为了书写方便，我们可以自定义代码片段，然后利用代码补全功能实现快速插入`Front matter`内容。\n\n### 1. 打开设置\n选择左下角`设置 -->用户代码片段`\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105506.png)\n\n### 2. 打开配置文件\n搜索框输入`markdown`，打开`markdown.json`文件\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105922.png)\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227110412.png)\n> `Print to console`：表示代码片段名称；\n> `prefix`：表示呼出代码片段时的快捷方式；\n> `body`：代码块内容；换行使用\\r\\n；\n> `description`：说明内容，输入快捷方式时VSCode显示的内容；\n> `$1,$2,$0`：指定代码模块生成后，编辑光标出现位置; 使用Tab键进行切换(编辑光标按$1,$2,$3...$0的顺序跳转)，$0是光标最后可切换位置。\n\n### 3. 添加模板代码\n在文件内输入以下内容：\n```json\n\"Front matter\": {\n\t\t\"prefix\": \"frm\", //输入frm时会提示补全\n\t\t\"body\": [\n\t\t\t\"---\",\n\t\t\t\"title: $TM_FILENAME_BASE\", // 读取当前文件名，不带后缀\n\t\t\t\"top: false\",\n\t\t\t\"cover: false\",\n\t\t\t\"toc: true\",\n\t\t\t\"mathjax: true\",\n\t\t\t\"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND\",\n\t\t\t\"update: \",\n\t\t\t\"img: \",\n\t\t\t\"password: \",\n\t\t\t\"summary: \",\n\t\t\t\"categories: $1\", // 光标位置1，补全代码片段后光标会停留在这里\n\t\t\t\"tags: \",\n\t\t\t\"- $2\", // 光标位置2，按tab键光标会切换到这里\n\t\t\t\"---\",\n\t\t\t\"$0\", // 光标位置0，最后的位置\n\t\t],\n\t\t\"description\": \"插入文章的front mater\" // 用户输入后智能提示的内容\n\t}\n```\n> 内置参数\n> `$TM_FILENAME_BASE`：当前文件名，不带后缀\n> `$CURRENT_YEAR`：年\n> `$CURRENT_MONTH`：月\n> `$CURRENT_DATE`：日\n> `$CURRENT_HOUR`：时\n> `$CURRENT_MINUTE`：分\n> `$CURRENT_SECOND`：秒\n\n### 4. 开启markdown的提示功能\nvscode默认没有开启markdown的代码补全功能，开启方式：\n1. ​`ctrl+shifi+p`打开命令面板，搜索`settings.json`并打开。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120430.png)\n\n在最后的花括号前添加以下内容，注意在上一条语句后面加逗号`,`​\n```json\n\"[markdown]\": {\n            \"editor.quickSuggestions\": true\n}\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120914.png)\n\n2. 重启vscode进行测试\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121214.png)\n\n可以看到当输入`frm`后出现了代码补全提示，按下`tab或回车键`即可补全代码。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121933.png)\n\n此时，在`光标位置1`输入分类名，按`tab键`条到`光标位置2`输入标签名，再按`tab键`跳到`光标位置0`开始正文书写。\n\n## 整体效果\n至此，我们就可以只打开vscode完成博客写作，所有的操作在如下图一个界面内均可完成，不需要来回切换界面。\n![](https://s2.loli.net/2021/12/27/OIpJgvMnX6zikSL.png)\n\n第一次使用时的流程：打开vscode-->文件-->打开文件夹-->找到博客根目录-->ctrl+~打开终端。vscode会记住上次退出时的工作区，因此下次需要写博客文章时只需要打开vscode就可以了。如果打开后工作环境不是博客写作工作区，那只需要在`最近打开的文件`中切换一下就好。\n","source":"_posts/vscode搭建一站式博客写作环境.md","raw":"---\ntitle: vscode搭建一站式博客写作环境\ntop: true\ncover: true\ncoverImg: /medias/coverImg/coverImg2.jpg\ntoc: true\nmathjax: true\ndate: 2021-12-28 13:37:50\nupdate: \nimg: https://s2.loli.net/2021/12/24/wUF2AJ4iYRTBkKO.png\npassword: \nsummary: \ncategories: 软件与工具\ntags: \n- vscode\n- Hexo\n- PicGo\n- markdown\n---\n\n## 前言\n使用 Github page 和 Hexo 搭建的个人博客，每次写博客时需要在博客根目录下打开`Git Bash Here`，在命令窗口输入新建命令`hexo n`，然后去文件管理器找到新建的`md`文件，再用`markdown编辑器`进行书写，最后书写完需要回到命令窗口输入命令进行预览和部署。这一过程基本需要在三个界面来回切换，相当繁琐。为了更方便的书写，避免来回切换界面，我尝试了在 vscode 中配置一个完整的 Hexo 博客写作环境，即在 vscode 内完成上述所有操作。\n\n主要内容：\n- 安装`Markdown Preview Enhanced`插件\n- 在vscode终端里添加`Git Bash`终端\n- 安装`PicGo`插件\n- 开启markdown代码补全功能，通过代码补全快速插入博客文章的`Front matter`。\n\n## 配置markdown环境\nvscode 默认是支持 markdown 的，但语法支持以及扩展功能较少，因此需要安装插件来获得更好的书写体验，有两个插件：`Markdown All in One`和`Markdown Preview Enhanced`。\n\n### 1. 安装\n这里推荐安装`Markdown Preview Enhanced`插件，简称`MPE`。打开 vscode 编辑器，在插件页搜索 markdown-preview-enhanced，接着点击 Install 按钮。\n![](https://s2.loli.net/2021/12/27/rPTNOsdaRSi9nCU.png)\n\n### 2. 使用\nMPE 支持一边写一边实时渲染，markdown 基本语法可参考[markdown中文网](http://markdown.p2hp.com/)，MPE插件使用技巧可参考[MPE简介](https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/)，我这只简单介绍一下基本使用和更换主题。\n![](https://s2.loli.net/2021/12/27/SFjHtbvM4gXwPks.png)\n\n预览窗口上`右键-->Preview Theme`更换主题，推荐将主题更换为`vue.css`，因为这个主题的样式基本与Hexo博客渲染出来的效果一致，这样我们在书写时看到的效果就和发布到个人博客网站上看到的效果一样，基本可以省去使用`hexo s -g`进行本地部署预览。\n![](https://s2.loli.net/2021/12/27/zi62mBQS1MZnudO.png)\n\n## 配置Git Bash终端\nvscode 的终端默认不支持 Git bash，为了直接在 vscode 中打开 Git Bash 终端，需要做以下配置：\n\n### 1. 打开vscode\n`文件->首选项->设置`，打开设置，搜索`shell windows`\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211222111931.png)\n\n### 2. 添加配置\n打开`settings.json`，在最后一个花括号前输入代码：\n```json\n// 设置终端默认为git bash\n\"terminal.integrated.profiles.windows\": {\n  \"gitBash\": {\n    \"path\": \"D:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\",//这里是的的bash路径\n  }\n},\n\"terminal.integrated.defaultProfile.windows\": \"gitBash\"\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211222112158.png)\n\n### 3. 重启生效\n保存重启 vscode，按`ctrl+~`键打开终端，测试是否成功。\n![](https://s2.loli.net/2021/12/27/k3hVBpofNt5sugT.png)\n\n## 配置自动上传图床\n平时写博客插入图片时，需要切换到图床网站或 PicGo 上传图片，再拷贝连接回来，非常麻烦。而通过 PicGo 插件可以实现直接复制图片到 vscode 中，图片会自动上传到配置好的图床，并在文档内转换为图片链接地址。支持的图床有：`微博`，`七牛图床`，`腾讯云COS`，`又拍云`，`github`，`阿里云OSS`，`imgur`和`SM.MS`。\n\n### 安装PicGo插件\n![](https://s2.loli.net/2021/12/27/YP7KIoCWqDvcanx.png)\n\n### 配置Token\n我这里使用的是`SM.MS`图床，因此只需要配置 Token 就可以。如果使用的是其它的图床，需要添加对应的配置项。\n\n1. 在 PicGo 插件上`右键-->扩展设置`\n\n找到 `Smms：Token`，填入自己的 Token值。\n![](https://s2.loli.net/2021/12/27/tCLp2GoQ94jfbvI.png)\n\n2. 使用\n\n需要插入图片时，使用快捷键上传。\n![](https://s2.loli.net/2021/12/27/rDNomitYnh1CQIH.png)\n\n例如：我是windows系统，选中要插入的图片右键复制，在文档中按`ctrl+alt+u`自动上传，上传成功后文档中插入图片的地方返回图片链接。\n![](https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png)\n\n默认是`![图片名](图片地址)`的格式，并且会自动以上传时间命名图片。如果不想自动填入图片名称，可以将扩展设置里的`Custom Output Format`修改为如下：\n![](https://s2.loli.net/2021/12/27/d6wIPqSBOsjno1A.png)\n\n效果：\n![](https://s2.loli.net/2021/12/27/dmLuDsrZ1coPF3N.png)\n\n可以看到`[]`内不再自动填入上传时间。\n> 附：\n> [PicGo插件配置官方文档](https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)\n> [PicGo搭建图床](https://cfxin.github.io/picgo-pei-zhi-tu-chuang.html)\n\n## 配置博客文件模板\n我们知道用`hexo n`命令新建文档会自动根据模板文件插入`Front matter`的内容，而在vscode中直接通过右键新建文件是没有`Front matter`的，需要手动一项一项写书，比较麻烦。为了书写方便，我们可以自定义代码片段，然后利用代码补全功能实现快速插入`Front matter`内容。\n\n### 1. 打开设置\n选择左下角`设置 -->用户代码片段`\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105506.png)\n\n### 2. 打开配置文件\n搜索框输入`markdown`，打开`markdown.json`文件\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105922.png)\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227110412.png)\n> `Print to console`：表示代码片段名称；\n> `prefix`：表示呼出代码片段时的快捷方式；\n> `body`：代码块内容；换行使用\\r\\n；\n> `description`：说明内容，输入快捷方式时VSCode显示的内容；\n> `$1,$2,$0`：指定代码模块生成后，编辑光标出现位置; 使用Tab键进行切换(编辑光标按$1,$2,$3...$0的顺序跳转)，$0是光标最后可切换位置。\n\n### 3. 添加模板代码\n在文件内输入以下内容：\n```json\n\"Front matter\": {\n\t\t\"prefix\": \"frm\", //输入frm时会提示补全\n\t\t\"body\": [\n\t\t\t\"---\",\n\t\t\t\"title: $TM_FILENAME_BASE\", // 读取当前文件名，不带后缀\n\t\t\t\"top: false\",\n\t\t\t\"cover: false\",\n\t\t\t\"toc: true\",\n\t\t\t\"mathjax: true\",\n\t\t\t\"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND\",\n\t\t\t\"update: \",\n\t\t\t\"img: \",\n\t\t\t\"password: \",\n\t\t\t\"summary: \",\n\t\t\t\"categories: $1\", // 光标位置1，补全代码片段后光标会停留在这里\n\t\t\t\"tags: \",\n\t\t\t\"- $2\", // 光标位置2，按tab键光标会切换到这里\n\t\t\t\"---\",\n\t\t\t\"$0\", // 光标位置0，最后的位置\n\t\t],\n\t\t\"description\": \"插入文章的front mater\" // 用户输入后智能提示的内容\n\t}\n```\n> 内置参数\n> `$TM_FILENAME_BASE`：当前文件名，不带后缀\n> `$CURRENT_YEAR`：年\n> `$CURRENT_MONTH`：月\n> `$CURRENT_DATE`：日\n> `$CURRENT_HOUR`：时\n> `$CURRENT_MINUTE`：分\n> `$CURRENT_SECOND`：秒\n\n### 4. 开启markdown的提示功能\nvscode默认没有开启markdown的代码补全功能，开启方式：\n1. ​`ctrl+shifi+p`打开命令面板，搜索`settings.json`并打开。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120430.png)\n\n在最后的花括号前添加以下内容，注意在上一条语句后面加逗号`,`​\n```json\n\"[markdown]\": {\n            \"editor.quickSuggestions\": true\n}\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120914.png)\n\n2. 重启vscode进行测试\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121214.png)\n\n可以看到当输入`frm`后出现了代码补全提示，按下`tab或回车键`即可补全代码。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121933.png)\n\n此时，在`光标位置1`输入分类名，按`tab键`条到`光标位置2`输入标签名，再按`tab键`跳到`光标位置0`开始正文书写。\n\n## 整体效果\n至此，我们就可以只打开vscode完成博客写作，所有的操作在如下图一个界面内均可完成，不需要来回切换界面。\n![](https://s2.loli.net/2021/12/27/OIpJgvMnX6zikSL.png)\n\n第一次使用时的流程：打开vscode-->文件-->打开文件夹-->找到博客根目录-->ctrl+~打开终端。vscode会记住上次退出时的工作区，因此下次需要写博客文章时只需要打开vscode就可以了。如果打开后工作环境不是博客写作工作区，那只需要在`最近打开的文件`中切换一下就好。\n","slug":"vscode搭建一站式博客写作环境","published":1,"updated":"2021-12-30T08:57:23.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv40000s8ou19ercawi1","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用 Github page 和 Hexo 搭建的个人博客，每次写博客时需要在博客根目录下打开<code>Git Bash Here</code>，在命令窗口输入新建命令<code>hexo n</code>，然后去文件管理器找到新建的<code>md</code>文件，再用<code>markdown编辑器</code>进行书写，最后书写完需要回到命令窗口输入命令进行预览和部署。这一过程基本需要在三个界面来回切换，相当繁琐。为了更方便的书写，避免来回切换界面，我尝试了在 vscode 中配置一个完整的 Hexo 博客写作环境，即在 vscode 内完成上述所有操作。</p>\n<p>主要内容：</p>\n<ul>\n<li>安装<code>Markdown Preview Enhanced</code>插件</li>\n<li>在vscode终端里添加<code>Git Bash</code>终端</li>\n<li>安装<code>PicGo</code>插件</li>\n<li>开启markdown代码补全功能，通过代码补全快速插入博客文章的<code>Front matter</code>。</li>\n</ul>\n<h2 id=\"配置markdown环境\"><a href=\"#配置markdown环境\" class=\"headerlink\" title=\"配置markdown环境\"></a>配置markdown环境</h2><p>vscode 默认是支持 markdown 的，但语法支持以及扩展功能较少，因此需要安装插件来获得更好的书写体验，有两个插件：<code>Markdown All in One</code>和<code>Markdown Preview Enhanced</code>。</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>这里推荐安装<code>Markdown Preview Enhanced</code>插件，简称<code>MPE</code>。打开 vscode 编辑器，在插件页搜索 markdown-preview-enhanced，接着点击 Install 按钮。<br><img src=\"https://s2.loli.net/2021/12/27/rPTNOsdaRSi9nCU.png\"></p>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h3><p>MPE 支持一边写一边实时渲染，markdown 基本语法可参考<a href=\"http://markdown.p2hp.com/\">markdown中文网</a>，MPE插件使用技巧可参考<a href=\"https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/\">MPE简介</a>，我这只简单介绍一下基本使用和更换主题。<br><img src=\"https://s2.loli.net/2021/12/27/SFjHtbvM4gXwPks.png\"></p>\n<p>预览窗口上<code>右键--&gt;Preview Theme</code>更换主题，推荐将主题更换为<code>vue.css</code>，因为这个主题的样式基本与Hexo博客渲染出来的效果一致，这样我们在书写时看到的效果就和发布到个人博客网站上看到的效果一样，基本可以省去使用<code>hexo s -g</code>进行本地部署预览。<br><img src=\"https://s2.loli.net/2021/12/27/zi62mBQS1MZnudO.png\"></p>\n<h2 id=\"配置Git-Bash终端\"><a href=\"#配置Git-Bash终端\" class=\"headerlink\" title=\"配置Git Bash终端\"></a>配置Git Bash终端</h2><p>vscode 的终端默认不支持 Git bash，为了直接在 vscode 中打开 Git Bash 终端，需要做以下配置：</p>\n<h3 id=\"1-打开vscode\"><a href=\"#1-打开vscode\" class=\"headerlink\" title=\"1. 打开vscode\"></a>1. 打开vscode</h3><p><code>文件-&gt;首选项-&gt;设置</code>，打开设置，搜索<code>shell windows</code><br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211222111931.png\"></p>\n<h3 id=\"2-添加配置\"><a href=\"#2-添加配置\" class=\"headerlink\" title=\"2. 添加配置\"></a>2. 添加配置</h3><p>打开<code>settings.json</code>，在最后一个花括号前输入代码：</p>\n<pre class=\" language-json\"><code class=\"language-json\">// 设置终端默认为git bash\n<span class=\"token property\">\"terminal.integrated.profiles.windows\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"gitBash\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"D:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\"</span><span class=\"token punctuation\">,</span>//这里是的的bash路径\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"terminal.integrated.defaultProfile.windows\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gitBash\"</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211222112158.png\"></p>\n<h3 id=\"3-重启生效\"><a href=\"#3-重启生效\" class=\"headerlink\" title=\"3. 重启生效\"></a>3. 重启生效</h3><p>保存重启 vscode，按<code>ctrl+~</code>键打开终端，测试是否成功。<br><img src=\"https://s2.loli.net/2021/12/27/k3hVBpofNt5sugT.png\"></p>\n<h2 id=\"配置自动上传图床\"><a href=\"#配置自动上传图床\" class=\"headerlink\" title=\"配置自动上传图床\"></a>配置自动上传图床</h2><p>平时写博客插入图片时，需要切换到图床网站或 PicGo 上传图片，再拷贝连接回来，非常麻烦。而通过 PicGo 插件可以实现直接复制图片到 vscode 中，图片会自动上传到配置好的图床，并在文档内转换为图片链接地址。支持的图床有：<code>微博</code>，<code>七牛图床</code>，<code>腾讯云COS</code>，<code>又拍云</code>，<code>github</code>，<code>阿里云OSS</code>，<code>imgur</code>和<code>SM.MS</code>。</p>\n<h3 id=\"安装PicGo插件\"><a href=\"#安装PicGo插件\" class=\"headerlink\" title=\"安装PicGo插件\"></a>安装PicGo插件</h3><p><img src=\"https://s2.loli.net/2021/12/27/YP7KIoCWqDvcanx.png\"></p>\n<h3 id=\"配置Token\"><a href=\"#配置Token\" class=\"headerlink\" title=\"配置Token\"></a>配置Token</h3><p>我这里使用的是<code>SM.MS</code>图床，因此只需要配置 Token 就可以。如果使用的是其它的图床，需要添加对应的配置项。</p>\n<ol>\n<li>在 PicGo 插件上<code>右键--&gt;扩展设置</code></li>\n</ol>\n<p>找到 <code>Smms：Token</code>，填入自己的 Token值。<br><img src=\"https://s2.loli.net/2021/12/27/tCLp2GoQ94jfbvI.png\"></p>\n<ol start=\"2\">\n<li>使用</li>\n</ol>\n<p>需要插入图片时，使用快捷键上传。<br><img src=\"https://s2.loli.net/2021/12/27/rDNomitYnh1CQIH.png\"></p>\n<p>例如：我是windows系统，选中要插入的图片右键复制，在文档中按<code>ctrl+alt+u</code>自动上传，上传成功后文档中插入图片的地方返回图片链接。<br><img src=\"https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png\"></p>\n<p>默认是<code>![图片名](图片地址)</code>的格式，并且会自动以上传时间命名图片。如果不想自动填入图片名称，可以将扩展设置里的<code>Custom Output Format</code>修改为如下：<br><img src=\"https://s2.loli.net/2021/12/27/d6wIPqSBOsjno1A.png\"></p>\n<p>效果：<br><img src=\"https://s2.loli.net/2021/12/27/dmLuDsrZ1coPF3N.png\"></p>\n<p>可以看到<code>[]</code>内不再自动填入上传时间。</p>\n<blockquote>\n<p>附：<br><a href=\"https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">PicGo插件配置官方文档</a><br><a href=\"https://cfxin.github.io/picgo-pei-zhi-tu-chuang.html\">PicGo搭建图床</a></p>\n</blockquote>\n<h2 id=\"配置博客文件模板\"><a href=\"#配置博客文件模板\" class=\"headerlink\" title=\"配置博客文件模板\"></a>配置博客文件模板</h2><p>我们知道用<code>hexo n</code>命令新建文档会自动根据模板文件插入<code>Front matter</code>的内容，而在vscode中直接通过右键新建文件是没有<code>Front matter</code>的，需要手动一项一项写书，比较麻烦。为了书写方便，我们可以自定义代码片段，然后利用代码补全功能实现快速插入<code>Front matter</code>内容。</p>\n<h3 id=\"1-打开设置\"><a href=\"#1-打开设置\" class=\"headerlink\" title=\"1. 打开设置\"></a>1. 打开设置</h3><p>选择左下角<code>设置 --&gt;用户代码片段</code><br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105506.png\"></p>\n<h3 id=\"2-打开配置文件\"><a href=\"#2-打开配置文件\" class=\"headerlink\" title=\"2. 打开配置文件\"></a>2. 打开配置文件</h3><p>搜索框输入<code>markdown</code>，打开<code>markdown.json</code>文件<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105922.png\"><br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227110412.png\"></p>\n<blockquote>\n<p><code>Print to console</code>：表示代码片段名称；<br><code>prefix</code>：表示呼出代码片段时的快捷方式；<br><code>body</code>：代码块内容；换行使用\\r\\n；<br><code>description</code>：说明内容，输入快捷方式时VSCode显示的内容；<br><code>$1,$2,$0</code>：指定代码模块生成后，编辑光标出现位置; 使用Tab键进行切换(编辑光标按$1,$2,$3…$0的顺序跳转)，$0是光标最后可切换位置。</p>\n</blockquote>\n<h3 id=\"3-添加模板代码\"><a href=\"#3-添加模板代码\" class=\"headerlink\" title=\"3. 添加模板代码\"></a>3. 添加模板代码</h3><p>在文件内输入以下内容：</p>\n<pre class=\" language-json\"><code class=\"language-json\"><span class=\"token property\">\"Front matter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"prefix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"frm\"</span><span class=\"token punctuation\">,</span> //输入frm时会提示补全\n        <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"---\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"title: $TM_FILENAME_BASE\"</span><span class=\"token punctuation\">,</span> // 读取当前文件名，不带后缀\n            <span class=\"token string\">\"top: false\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"cover: false\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"toc: true\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"mathjax: true\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"update: \"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"img: \"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"password: \"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"summary: \"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"categories: $1\"</span><span class=\"token punctuation\">,</span> // 光标位置<span class=\"token number\">1</span>，补全代码片段后光标会停留在这里\n            <span class=\"token string\">\"tags: \"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"- $2\"</span><span class=\"token punctuation\">,</span> // 光标位置<span class=\"token number\">2</span>，按tab键光标会切换到这里\n            <span class=\"token string\">\"---\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"$0\"</span><span class=\"token punctuation\">,</span> // 光标位置<span class=\"token number\">0</span>，最后的位置\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"插入文章的front mater\"</span> // 用户输入后智能提示的内容\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>内置参数<br><code>$TM_FILENAME_BASE</code>：当前文件名，不带后缀<br><code>$CURRENT_YEAR</code>：年<br><code>$CURRENT_MONTH</code>：月<br><code>$CURRENT_DATE</code>：日<br><code>$CURRENT_HOUR</code>：时<br><code>$CURRENT_MINUTE</code>：分<br><code>$CURRENT_SECOND</code>：秒</p>\n</blockquote>\n<h3 id=\"4-开启markdown的提示功能\"><a href=\"#4-开启markdown的提示功能\" class=\"headerlink\" title=\"4. 开启markdown的提示功能\"></a>4. 开启markdown的提示功能</h3><p>vscode默认没有开启markdown的代码补全功能，开启方式：</p>\n<ol>\n<li>​<code>ctrl+shifi+p</code>打开命令面板，搜索<code>settings.json</code>并打开。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120430.png\"></li>\n</ol>\n<p>在最后的花括号前添加以下内容，注意在上一条语句后面加逗号<code>,</code>​</p>\n<pre class=\" language-json\"><code class=\"language-json\"><span class=\"token property\">\"[markdown]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"editor.quickSuggestions\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120914.png\"></p>\n<ol start=\"2\">\n<li>重启vscode进行测试<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121214.png\"></li>\n</ol>\n<p>可以看到当输入<code>frm</code>后出现了代码补全提示，按下<code>tab或回车键</code>即可补全代码。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121933.png\"></p>\n<p>此时，在<code>光标位置1</code>输入分类名，按<code>tab键</code>条到<code>光标位置2</code>输入标签名，再按<code>tab键</code>跳到<code>光标位置0</code>开始正文书写。</p>\n<h2 id=\"整体效果\"><a href=\"#整体效果\" class=\"headerlink\" title=\"整体效果\"></a>整体效果</h2><p>至此，我们就可以只打开vscode完成博客写作，所有的操作在如下图一个界面内均可完成，不需要来回切换界面。<br><img src=\"https://s2.loli.net/2021/12/27/OIpJgvMnX6zikSL.png\"></p>\n<p>第一次使用时的流程：打开vscode–&gt;文件–&gt;打开文件夹–&gt;找到博客根目录–&gt;ctrl+~打开终端。vscode会记住上次退出时的工作区，因此下次需要写博客文章时只需要打开vscode就可以了。如果打开后工作环境不是博客写作工作区，那只需要在<code>最近打开的文件</code>中切换一下就好。</p>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用 Github page 和 Hexo 搭建的个人博客，每次写博客时需要在博客根目录下打开<code>Git Bash Here</code>，在命令窗口输入新建命令<code>hexo n</code>，然后去文件管理器找到新建的<code>md</code>文件，再用<code>markdown编辑器</code>进行书写，最后书写完需要回到命令窗口输入命令进行预览和部署。这一过程基本需要在三个界面来回切换，相当繁琐。为了更方便的书写，避免来回切换界面，我尝试了在 vscode 中配置一个完整的 Hexo 博客写作环境，即在 vscode 内完成上述所有操作。</p>\n<p>主要内容：</p>\n<ul>\n<li>安装<code>Markdown Preview Enhanced</code>插件</li>\n<li>在vscode终端里添加<code>Git Bash</code>终端</li>\n<li>安装<code>PicGo</code>插件</li>\n<li>开启markdown代码补全功能，通过代码补全快速插入博客文章的<code>Front matter</code>。</li>\n</ul>\n<h2 id=\"配置markdown环境\"><a href=\"#配置markdown环境\" class=\"headerlink\" title=\"配置markdown环境\"></a>配置markdown环境</h2><p>vscode 默认是支持 markdown 的，但语法支持以及扩展功能较少，因此需要安装插件来获得更好的书写体验，有两个插件：<code>Markdown All in One</code>和<code>Markdown Preview Enhanced</code>。</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>这里推荐安装<code>Markdown Preview Enhanced</code>插件，简称<code>MPE</code>。打开 vscode 编辑器，在插件页搜索 markdown-preview-enhanced，接着点击 Install 按钮。<br><img src=\"https://s2.loli.net/2021/12/27/rPTNOsdaRSi9nCU.png\"></p>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h3><p>MPE 支持一边写一边实时渲染，markdown 基本语法可参考<a href=\"http://markdown.p2hp.com/\">markdown中文网</a>，MPE插件使用技巧可参考<a href=\"https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/\">MPE简介</a>，我这只简单介绍一下基本使用和更换主题。<br><img src=\"https://s2.loli.net/2021/12/27/SFjHtbvM4gXwPks.png\"></p>\n<p>预览窗口上<code>右键--&gt;Preview Theme</code>更换主题，推荐将主题更换为<code>vue.css</code>，因为这个主题的样式基本与Hexo博客渲染出来的效果一致，这样我们在书写时看到的效果就和发布到个人博客网站上看到的效果一样，基本可以省去使用<code>hexo s -g</code>进行本地部署预览。<br><img src=\"https://s2.loli.net/2021/12/27/zi62mBQS1MZnudO.png\"></p>\n<h2 id=\"配置Git-Bash终端\"><a href=\"#配置Git-Bash终端\" class=\"headerlink\" title=\"配置Git Bash终端\"></a>配置Git Bash终端</h2><p>vscode 的终端默认不支持 Git bash，为了直接在 vscode 中打开 Git Bash 终端，需要做以下配置：</p>\n<h3 id=\"1-打开vscode\"><a href=\"#1-打开vscode\" class=\"headerlink\" title=\"1. 打开vscode\"></a>1. 打开vscode</h3><p><code>文件-&gt;首选项-&gt;设置</code>，打开设置，搜索<code>shell windows</code><br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211222111931.png\"></p>\n<h3 id=\"2-添加配置\"><a href=\"#2-添加配置\" class=\"headerlink\" title=\"2. 添加配置\"></a>2. 添加配置</h3><p>打开<code>settings.json</code>，在最后一个花括号前输入代码：</p>\n<pre><code class=\"json\">// 设置终端默认为git bash\n&quot;terminal.integrated.profiles.windows&quot;: &#123;\n  &quot;gitBash&quot;: &#123;\n    &quot;path&quot;: &quot;D:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe&quot;,//这里是的的bash路径\n  &#125;\n&#125;,\n&quot;terminal.integrated.defaultProfile.windows&quot;: &quot;gitBash&quot;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211222112158.png\"></p>\n<h3 id=\"3-重启生效\"><a href=\"#3-重启生效\" class=\"headerlink\" title=\"3. 重启生效\"></a>3. 重启生效</h3><p>保存重启 vscode，按<code>ctrl+~</code>键打开终端，测试是否成功。<br><img src=\"https://s2.loli.net/2021/12/27/k3hVBpofNt5sugT.png\"></p>\n<h2 id=\"配置自动上传图床\"><a href=\"#配置自动上传图床\" class=\"headerlink\" title=\"配置自动上传图床\"></a>配置自动上传图床</h2><p>平时写博客插入图片时，需要切换到图床网站或 PicGo 上传图片，再拷贝连接回来，非常麻烦。而通过 PicGo 插件可以实现直接复制图片到 vscode 中，图片会自动上传到配置好的图床，并在文档内转换为图片链接地址。支持的图床有：<code>微博</code>，<code>七牛图床</code>，<code>腾讯云COS</code>，<code>又拍云</code>，<code>github</code>，<code>阿里云OSS</code>，<code>imgur</code>和<code>SM.MS</code>。</p>\n<h3 id=\"安装PicGo插件\"><a href=\"#安装PicGo插件\" class=\"headerlink\" title=\"安装PicGo插件\"></a>安装PicGo插件</h3><p><img src=\"https://s2.loli.net/2021/12/27/YP7KIoCWqDvcanx.png\"></p>\n<h3 id=\"配置Token\"><a href=\"#配置Token\" class=\"headerlink\" title=\"配置Token\"></a>配置Token</h3><p>我这里使用的是<code>SM.MS</code>图床，因此只需要配置 Token 就可以。如果使用的是其它的图床，需要添加对应的配置项。</p>\n<ol>\n<li>在 PicGo 插件上<code>右键--&gt;扩展设置</code></li>\n</ol>\n<p>找到 <code>Smms：Token</code>，填入自己的 Token值。<br><img src=\"https://s2.loli.net/2021/12/27/tCLp2GoQ94jfbvI.png\"></p>\n<ol start=\"2\">\n<li>使用</li>\n</ol>\n<p>需要插入图片时，使用快捷键上传。<br><img src=\"https://s2.loli.net/2021/12/27/rDNomitYnh1CQIH.png\"></p>\n<p>例如：我是windows系统，选中要插入的图片右键复制，在文档中按<code>ctrl+alt+u</code>自动上传，上传成功后文档中插入图片的地方返回图片链接。<br><img src=\"https://s2.loli.net/2021/12/27/HfcgTuaIApjMxQN.png\"></p>\n<p>默认是<code>![图片名](图片地址)</code>的格式，并且会自动以上传时间命名图片。如果不想自动填入图片名称，可以将扩展设置里的<code>Custom Output Format</code>修改为如下：<br><img src=\"https://s2.loli.net/2021/12/27/d6wIPqSBOsjno1A.png\"></p>\n<p>效果：<br><img src=\"https://s2.loli.net/2021/12/27/dmLuDsrZ1coPF3N.png\"></p>\n<p>可以看到<code>[]</code>内不再自动填入上传时间。</p>\n<blockquote>\n<p>附：<br><a href=\"https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">PicGo插件配置官方文档</a><br><a href=\"https://cfxin.github.io/picgo-pei-zhi-tu-chuang.html\">PicGo搭建图床</a></p>\n</blockquote>\n<h2 id=\"配置博客文件模板\"><a href=\"#配置博客文件模板\" class=\"headerlink\" title=\"配置博客文件模板\"></a>配置博客文件模板</h2><p>我们知道用<code>hexo n</code>命令新建文档会自动根据模板文件插入<code>Front matter</code>的内容，而在vscode中直接通过右键新建文件是没有<code>Front matter</code>的，需要手动一项一项写书，比较麻烦。为了书写方便，我们可以自定义代码片段，然后利用代码补全功能实现快速插入<code>Front matter</code>内容。</p>\n<h3 id=\"1-打开设置\"><a href=\"#1-打开设置\" class=\"headerlink\" title=\"1. 打开设置\"></a>1. 打开设置</h3><p>选择左下角<code>设置 --&gt;用户代码片段</code><br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105506.png\"></p>\n<h3 id=\"2-打开配置文件\"><a href=\"#2-打开配置文件\" class=\"headerlink\" title=\"2. 打开配置文件\"></a>2. 打开配置文件</h3><p>搜索框输入<code>markdown</code>，打开<code>markdown.json</code>文件<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227105922.png\"><br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227110412.png\"></p>\n<blockquote>\n<p><code>Print to console</code>：表示代码片段名称；<br><code>prefix</code>：表示呼出代码片段时的快捷方式；<br><code>body</code>：代码块内容；换行使用\\r\\n；<br><code>description</code>：说明内容，输入快捷方式时VSCode显示的内容；<br><code>$1,$2,$0</code>：指定代码模块生成后，编辑光标出现位置; 使用Tab键进行切换(编辑光标按$1,$2,$3…$0的顺序跳转)，$0是光标最后可切换位置。</p>\n</blockquote>\n<h3 id=\"3-添加模板代码\"><a href=\"#3-添加模板代码\" class=\"headerlink\" title=\"3. 添加模板代码\"></a>3. 添加模板代码</h3><p>在文件内输入以下内容：</p>\n<pre><code class=\"json\">&quot;Front matter&quot;: &#123;\n        &quot;prefix&quot;: &quot;frm&quot;, //输入frm时会提示补全\n        &quot;body&quot;: [\n            &quot;---&quot;,\n            &quot;title: $TM_FILENAME_BASE&quot;, // 读取当前文件名，不带后缀\n            &quot;top: false&quot;,\n            &quot;cover: false&quot;,\n            &quot;toc: true&quot;,\n            &quot;mathjax: true&quot;,\n            &quot;date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;,\n            &quot;update: &quot;,\n            &quot;img: &quot;,\n            &quot;password: &quot;,\n            &quot;summary: &quot;,\n            &quot;categories: $1&quot;, // 光标位置1，补全代码片段后光标会停留在这里\n            &quot;tags: &quot;,\n            &quot;- $2&quot;, // 光标位置2，按tab键光标会切换到这里\n            &quot;---&quot;,\n            &quot;$0&quot;, // 光标位置0，最后的位置\n        ],\n        &quot;description&quot;: &quot;插入文章的front mater&quot; // 用户输入后智能提示的内容\n    &#125;\n</code></pre>\n<blockquote>\n<p>内置参数<br><code>$TM_FILENAME_BASE</code>：当前文件名，不带后缀<br><code>$CURRENT_YEAR</code>：年<br><code>$CURRENT_MONTH</code>：月<br><code>$CURRENT_DATE</code>：日<br><code>$CURRENT_HOUR</code>：时<br><code>$CURRENT_MINUTE</code>：分<br><code>$CURRENT_SECOND</code>：秒</p>\n</blockquote>\n<h3 id=\"4-开启markdown的提示功能\"><a href=\"#4-开启markdown的提示功能\" class=\"headerlink\" title=\"4. 开启markdown的提示功能\"></a>4. 开启markdown的提示功能</h3><p>vscode默认没有开启markdown的代码补全功能，开启方式：</p>\n<ol>\n<li>​<code>ctrl+shifi+p</code>打开命令面板，搜索<code>settings.json</code>并打开。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120430.png\"></li>\n</ol>\n<p>在最后的花括号前添加以下内容，注意在上一条语句后面加逗号<code>,</code>​</p>\n<pre><code class=\"json\">&quot;[markdown]&quot;: &#123;\n            &quot;editor.quickSuggestions&quot;: true\n&#125;\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227120914.png\"></p>\n<ol start=\"2\">\n<li>重启vscode进行测试<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121214.png\"></li>\n</ol>\n<p>可以看到当输入<code>frm</code>后出现了代码补全提示，按下<code>tab或回车键</code>即可补全代码。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211227121933.png\"></p>\n<p>此时，在<code>光标位置1</code>输入分类名，按<code>tab键</code>条到<code>光标位置2</code>输入标签名，再按<code>tab键</code>跳到<code>光标位置0</code>开始正文书写。</p>\n<h2 id=\"整体效果\"><a href=\"#整体效果\" class=\"headerlink\" title=\"整体效果\"></a>整体效果</h2><p>至此，我们就可以只打开vscode完成博客写作，所有的操作在如下图一个界面内均可完成，不需要来回切换界面。<br><img src=\"https://s2.loli.net/2021/12/27/OIpJgvMnX6zikSL.png\"></p>\n<p>第一次使用时的流程：打开vscode–&gt;文件–&gt;打开文件夹–&gt;找到博客根目录–&gt;ctrl+~打开终端。vscode会记住上次退出时的工作区，因此下次需要写博客文章时只需要打开vscode就可以了。如果打开后工作环境不是博客写作工作区，那只需要在<code>最近打开的文件</code>中切换一下就好。</p>\n"},{"title":"wsl2(Ubuntu) + Miniconda3 + PyCharm配置","date":"2021-12-15T12:41:18.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"\n## WSL2安装\nWSL的安装之前已写过，按照这边文章操作即可。[win10下wsl2+golang+goland配置](https://www.yuque.com/chengbudong/coding/nwkmk3)\n## 安装Miniconda3\nMiniconda是一个免费的conda最小安装程序。它是Anaconda的一个小型版本，只包括conda、Python、它们所依赖的包，以及pip、zlib等少量其他有用的包。\n### 下载安装\n```bash\n# 下载\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n# 安装\nbash Miniconda3-latest-Linux-x86_64.sh \n```\n\n根据提示一步一步地安装。安装完成后，输入\n```bash\nsource ~/.bashrc  #重新激活环境变量\nconda -V          #检查conda是否安装成功\n```\n\n### 添加镜像\n```bash\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge\n```\n\n### 创建python环境\n创建自己需要的虚拟环境，也就是自己的工作区。基本命令需指定**环境名称**和**Python 版本**：\n```bash\n# 基本格式\nconda create -n [env_name] [python=version]\n# 例子\nconda create -n python_3.6 python=3.6\n```\n\n安装完毕后，进入 conda 环境：\n```bash\n# 进入\nconda active python_3.6\n# 退出\nconda deactivate\n```\n\n## pycharm配置\n使用 Pycharm 内置终端打开 WSL 运行 Python 代码\n```bash\nbask\t# 在pycharm终端里输入\nconda activate [env_name]\t# 激活环境\npython xxx.py # 运行.py文件\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215204103.png)\n\n### 附：Conda 的基本使用\n- 环境管理\n\nconda 常用操作可使用命令`conda -h`和`conda config -h`查看，这里列出几个常用命令：\n```bash\n# 创建\nconda create -n [env_name]\n# 删除\nconda env remove -n [env_name]\n# 参照配置文件更新\nconda env update --file [file.yml]\n# 环境列表\nconda env list\n# conda 信息\nconda info\n# 添加频道\nconda config --add channels [channel]\n# 删除频道\nconda config --remove channels [channel]\n```\n\n- 包管理\n\n```bash\n# 安装\nconda install [package_name]\n# 删除\nconda uninstall [package_name]\n# 更新\nconda update [package_name]\n# 更新所有包\nconda update --all\n# 搜索\nconda search [package_name]\n# 已安装列表\nconda list\n```\n\n- 配置文件：conda 会生成配置文件`.condarc`。其位置如下：\n- Windows：`C:\\Users\\username\\.condarc`\n- MacOS 和 Linux：`~/.condarc`\n\n其文件结构如下：\n```bash\n# 频道\nchannels:\n  - conda-forge\n  - defaults\n# 将 pip 作为 Python 的依赖\nadd_pip_as_python_dependency: true\n# 安装按照频道的顺序\nchannel_priority: false\n# 生成错误报告\nreport_errors: false\n# ssl 验证\nssl_verify: false\n# 显示频道具体链接\nshow_channel_urls: true\n# 错误回滚\nrollback_enabled: true\n# 重试\nremote_max_retries: 3\n```\n\n- 镜像：为了加快速度，国内往往需要使用镜像，修改`channels`如下\n\n```bash\nchannels:\n # 中科大镜像\n  - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/\n # 清华镜像\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - defaults\n```\n","source":"_posts/wsl2(Ubuntu) + Miniconda3 + PyCharm配置.md","raw":"---\ntitle: wsl2(Ubuntu) + Miniconda3 + PyCharm配置\ndate: 2021-12-15 20:41:18\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- Linux\n- wsl2\n- PyCharm\ncategories: \n- 软件与工具\n---\n\n## WSL2安装\nWSL的安装之前已写过，按照这边文章操作即可。[win10下wsl2+golang+goland配置](https://www.yuque.com/chengbudong/coding/nwkmk3)\n## 安装Miniconda3\nMiniconda是一个免费的conda最小安装程序。它是Anaconda的一个小型版本，只包括conda、Python、它们所依赖的包，以及pip、zlib等少量其他有用的包。\n### 下载安装\n```bash\n# 下载\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n# 安装\nbash Miniconda3-latest-Linux-x86_64.sh \n```\n\n根据提示一步一步地安装。安装完成后，输入\n```bash\nsource ~/.bashrc  #重新激活环境变量\nconda -V          #检查conda是否安装成功\n```\n\n### 添加镜像\n```bash\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge\n```\n\n### 创建python环境\n创建自己需要的虚拟环境，也就是自己的工作区。基本命令需指定**环境名称**和**Python 版本**：\n```bash\n# 基本格式\nconda create -n [env_name] [python=version]\n# 例子\nconda create -n python_3.6 python=3.6\n```\n\n安装完毕后，进入 conda 环境：\n```bash\n# 进入\nconda active python_3.6\n# 退出\nconda deactivate\n```\n\n## pycharm配置\n使用 Pycharm 内置终端打开 WSL 运行 Python 代码\n```bash\nbask\t# 在pycharm终端里输入\nconda activate [env_name]\t# 激活环境\npython xxx.py # 运行.py文件\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215204103.png)\n\n### 附：Conda 的基本使用\n- 环境管理\n\nconda 常用操作可使用命令`conda -h`和`conda config -h`查看，这里列出几个常用命令：\n```bash\n# 创建\nconda create -n [env_name]\n# 删除\nconda env remove -n [env_name]\n# 参照配置文件更新\nconda env update --file [file.yml]\n# 环境列表\nconda env list\n# conda 信息\nconda info\n# 添加频道\nconda config --add channels [channel]\n# 删除频道\nconda config --remove channels [channel]\n```\n\n- 包管理\n\n```bash\n# 安装\nconda install [package_name]\n# 删除\nconda uninstall [package_name]\n# 更新\nconda update [package_name]\n# 更新所有包\nconda update --all\n# 搜索\nconda search [package_name]\n# 已安装列表\nconda list\n```\n\n- 配置文件：conda 会生成配置文件`.condarc`。其位置如下：\n- Windows：`C:\\Users\\username\\.condarc`\n- MacOS 和 Linux：`~/.condarc`\n\n其文件结构如下：\n```bash\n# 频道\nchannels:\n  - conda-forge\n  - defaults\n# 将 pip 作为 Python 的依赖\nadd_pip_as_python_dependency: true\n# 安装按照频道的顺序\nchannel_priority: false\n# 生成错误报告\nreport_errors: false\n# ssl 验证\nssl_verify: false\n# 显示频道具体链接\nshow_channel_urls: true\n# 错误回滚\nrollback_enabled: true\n# 重试\nremote_max_retries: 3\n```\n\n- 镜像：为了加快速度，国内往往需要使用镜像，修改`channels`如下\n\n```bash\nchannels:\n # 中科大镜像\n  - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/\n # 清华镜像\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - defaults\n```\n","slug":"wsl2(Ubuntu) + Miniconda3 + PyCharm配置","published":1,"updated":"2021-12-30T08:57:23.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv41000w8ou19027gkor","content":"<h2 id=\"WSL2安装\"><a href=\"#WSL2安装\" class=\"headerlink\" title=\"WSL2安装\"></a>WSL2安装</h2><p>WSL的安装之前已写过，按照这边文章操作即可。<a href=\"https://www.yuque.com/chengbudong/coding/nwkmk3\">win10下wsl2+golang+goland配置</a></p>\n<h2 id=\"安装Miniconda3\"><a href=\"#安装Miniconda3\" class=\"headerlink\" title=\"安装Miniconda3\"></a>安装Miniconda3</h2><p>Miniconda是一个免费的conda最小安装程序。它是Anaconda的一个小型版本，只包括conda、Python、它们所依赖的包，以及pip、zlib等少量其他有用的包。</p>\n<h3 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h3><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 下载</span>\n<span class=\"token function\">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n<span class=\"token comment\" spellcheck=\"true\"># 安装</span>\n<span class=\"token function\">bash</span> Miniconda3-latest-Linux-x86_64.sh \n</code></pre>\n<p>根据提示一步一步地安装。安装完成后，输入</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">source</span> ~/.bashrc  <span class=\"token comment\" spellcheck=\"true\">#重新激活环境变量</span>\nconda -V          <span class=\"token comment\" spellcheck=\"true\">#检查conda是否安装成功</span>\n</code></pre>\n<h3 id=\"添加镜像\"><a href=\"#添加镜像\" class=\"headerlink\" title=\"添加镜像\"></a>添加镜像</h3><pre class=\" language-bash\"><code class=\"language-bash\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge\n</code></pre>\n<h3 id=\"创建python环境\"><a href=\"#创建python环境\" class=\"headerlink\" title=\"创建python环境\"></a>创建python环境</h3><p>创建自己需要的虚拟环境，也就是自己的工作区。基本命令需指定<strong>环境名称</strong>和<strong>Python 版本</strong>：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 基本格式</span>\nconda create -n <span class=\"token punctuation\">[</span>env_name<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>python<span class=\"token operator\">=</span>version<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 例子</span>\nconda create -n python_3.6 python<span class=\"token operator\">=</span>3.6\n</code></pre>\n<p>安装完毕后，进入 conda 环境：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 进入</span>\nconda active python_3.6\n<span class=\"token comment\" spellcheck=\"true\"># 退出</span>\nconda deactivate\n</code></pre>\n<h2 id=\"pycharm配置\"><a href=\"#pycharm配置\" class=\"headerlink\" title=\"pycharm配置\"></a>pycharm配置</h2><p>使用 Pycharm 内置终端打开 WSL 运行 Python 代码</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">bask    <span class=\"token comment\" spellcheck=\"true\"># 在pycharm终端里输入</span>\nconda activate <span class=\"token punctuation\">[</span>env_name<span class=\"token punctuation\">]</span>    <span class=\"token comment\" spellcheck=\"true\"># 激活环境</span>\npython xxx.py <span class=\"token comment\" spellcheck=\"true\"># 运行.py文件</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215204103.png\"></p>\n<h3 id=\"附：Conda-的基本使用\"><a href=\"#附：Conda-的基本使用\" class=\"headerlink\" title=\"附：Conda 的基本使用\"></a>附：Conda 的基本使用</h3><ul>\n<li>环境管理</li>\n</ul>\n<p>conda 常用操作可使用命令<code>conda -h</code>和<code>conda config -h</code>查看，这里列出几个常用命令：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 创建</span>\nconda create -n <span class=\"token punctuation\">[</span>env_name<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 删除</span>\nconda <span class=\"token function\">env</span> remove -n <span class=\"token punctuation\">[</span>env_name<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 参照配置文件更新</span>\nconda <span class=\"token function\">env</span> update --file <span class=\"token punctuation\">[</span>file.yml<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 环境列表</span>\nconda <span class=\"token function\">env</span> list\n<span class=\"token comment\" spellcheck=\"true\"># conda 信息</span>\nconda info\n<span class=\"token comment\" spellcheck=\"true\"># 添加频道</span>\nconda config --add channels <span class=\"token punctuation\">[</span>channel<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 删除频道</span>\nconda config --remove channels <span class=\"token punctuation\">[</span>channel<span class=\"token punctuation\">]</span>\n</code></pre>\n<ul>\n<li>包管理</li>\n</ul>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 安装</span>\nconda <span class=\"token function\">install</span> <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 删除</span>\nconda uninstall <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 更新</span>\nconda update <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 更新所有包</span>\nconda update --all\n<span class=\"token comment\" spellcheck=\"true\"># 搜索</span>\nconda search <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 已安装列表</span>\nconda list\n</code></pre>\n<ul>\n<li>配置文件：conda 会生成配置文件<code>.condarc</code>。其位置如下：</li>\n<li>Windows：<code>C:\\Users\\username\\.condarc</code></li>\n<li>MacOS 和 Linux：<code>~/.condarc</code></li>\n</ul>\n<p>其文件结构如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 频道</span>\nchannels:\n  - conda-forge\n  - defaults\n<span class=\"token comment\" spellcheck=\"true\"># 将 pip 作为 Python 的依赖</span>\nadd_pip_as_python_dependency: <span class=\"token boolean\">true</span>\n<span class=\"token comment\" spellcheck=\"true\"># 安装按照频道的顺序</span>\nchannel_priority: <span class=\"token boolean\">false</span>\n<span class=\"token comment\" spellcheck=\"true\"># 生成错误报告</span>\nreport_errors: <span class=\"token boolean\">false</span>\n<span class=\"token comment\" spellcheck=\"true\"># ssl 验证</span>\nssl_verify: <span class=\"token boolean\">false</span>\n<span class=\"token comment\" spellcheck=\"true\"># 显示频道具体链接</span>\nshow_channel_urls: <span class=\"token boolean\">true</span>\n<span class=\"token comment\" spellcheck=\"true\"># 错误回滚</span>\nrollback_enabled: <span class=\"token boolean\">true</span>\n<span class=\"token comment\" spellcheck=\"true\"># 重试</span>\nremote_max_retries: 3\n</code></pre>\n<ul>\n<li>镜像：为了加快速度，国内往往需要使用镜像，修改<code>channels</code>如下</li>\n</ul>\n<pre class=\" language-bash\"><code class=\"language-bash\">channels:\n <span class=\"token comment\" spellcheck=\"true\"># 中科大镜像</span>\n  - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/\n <span class=\"token comment\" spellcheck=\"true\"># 清华镜像</span>\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - defaults\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"WSL2安装\"><a href=\"#WSL2安装\" class=\"headerlink\" title=\"WSL2安装\"></a>WSL2安装</h2><p>WSL的安装之前已写过，按照这边文章操作即可。<a href=\"https://www.yuque.com/chengbudong/coding/nwkmk3\">win10下wsl2+golang+goland配置</a></p>\n<h2 id=\"安装Miniconda3\"><a href=\"#安装Miniconda3\" class=\"headerlink\" title=\"安装Miniconda3\"></a>安装Miniconda3</h2><p>Miniconda是一个免费的conda最小安装程序。它是Anaconda的一个小型版本，只包括conda、Python、它们所依赖的包，以及pip、zlib等少量其他有用的包。</p>\n<h3 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h3><pre><code class=\"bash\"># 下载\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n# 安装\nbash Miniconda3-latest-Linux-x86_64.sh \n</code></pre>\n<p>根据提示一步一步地安装。安装完成后，输入</p>\n<pre><code class=\"bash\">source ~/.bashrc  #重新激活环境变量\nconda -V          #检查conda是否安装成功\n</code></pre>\n<h3 id=\"添加镜像\"><a href=\"#添加镜像\" class=\"headerlink\" title=\"添加镜像\"></a>添加镜像</h3><pre><code class=\"bash\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge\n</code></pre>\n<h3 id=\"创建python环境\"><a href=\"#创建python环境\" class=\"headerlink\" title=\"创建python环境\"></a>创建python环境</h3><p>创建自己需要的虚拟环境，也就是自己的工作区。基本命令需指定<strong>环境名称</strong>和<strong>Python 版本</strong>：</p>\n<pre><code class=\"bash\"># 基本格式\nconda create -n [env_name] [python=version]\n# 例子\nconda create -n python_3.6 python=3.6\n</code></pre>\n<p>安装完毕后，进入 conda 环境：</p>\n<pre><code class=\"bash\"># 进入\nconda active python_3.6\n# 退出\nconda deactivate\n</code></pre>\n<h2 id=\"pycharm配置\"><a href=\"#pycharm配置\" class=\"headerlink\" title=\"pycharm配置\"></a>pycharm配置</h2><p>使用 Pycharm 内置终端打开 WSL 运行 Python 代码</p>\n<pre><code class=\"bash\">bask    # 在pycharm终端里输入\nconda activate [env_name]    # 激活环境\npython xxx.py # 运行.py文件\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215204103.png\"></p>\n<h3 id=\"附：Conda-的基本使用\"><a href=\"#附：Conda-的基本使用\" class=\"headerlink\" title=\"附：Conda 的基本使用\"></a>附：Conda 的基本使用</h3><ul>\n<li>环境管理</li>\n</ul>\n<p>conda 常用操作可使用命令<code>conda -h</code>和<code>conda config -h</code>查看，这里列出几个常用命令：</p>\n<pre><code class=\"bash\"># 创建\nconda create -n [env_name]\n# 删除\nconda env remove -n [env_name]\n# 参照配置文件更新\nconda env update --file [file.yml]\n# 环境列表\nconda env list\n# conda 信息\nconda info\n# 添加频道\nconda config --add channels [channel]\n# 删除频道\nconda config --remove channels [channel]\n</code></pre>\n<ul>\n<li>包管理</li>\n</ul>\n<pre><code class=\"bash\"># 安装\nconda install [package_name]\n# 删除\nconda uninstall [package_name]\n# 更新\nconda update [package_name]\n# 更新所有包\nconda update --all\n# 搜索\nconda search [package_name]\n# 已安装列表\nconda list\n</code></pre>\n<ul>\n<li>配置文件：conda 会生成配置文件<code>.condarc</code>。其位置如下：</li>\n<li>Windows：<code>C:\\Users\\username\\.condarc</code></li>\n<li>MacOS 和 Linux：<code>~/.condarc</code></li>\n</ul>\n<p>其文件结构如下：</p>\n<pre><code class=\"bash\"># 频道\nchannels:\n  - conda-forge\n  - defaults\n# 将 pip 作为 Python 的依赖\nadd_pip_as_python_dependency: true\n# 安装按照频道的顺序\nchannel_priority: false\n# 生成错误报告\nreport_errors: false\n# ssl 验证\nssl_verify: false\n# 显示频道具体链接\nshow_channel_urls: true\n# 错误回滚\nrollback_enabled: true\n# 重试\nremote_max_retries: 3\n</code></pre>\n<ul>\n<li>镜像：为了加快速度，国内往往需要使用镜像，修改<code>channels</code>如下</li>\n</ul>\n<pre><code class=\"bash\">channels:\n # 中科大镜像\n  - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/\n # 清华镜像\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - defaults\n</code></pre>\n"},{"title":"分支结构","date":"2021-12-08T05:31:18.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"\n## 应用场景\n\n迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。\n\n### if语句的使用\n在Python中，要构造分支结构可以使用`if`、`elif`和`else`关键字。所谓**关键字**就是有特殊含义的单词，像`if`和`else`就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名。下面的例子中演示了如何构造一个分支结构。\n```python\n\"\"\"\n用户身份验证\n\"\"\"\nusername = input('请输入用户名: ')\npassword = input('请输入口令: ')\n# 用户名是admin且密码是123456则身份验证成功否则身份验证失败\nif username == 'admin' and password == '123456':\n    print('身份验证成功!')\nelse:\n    print('身份验证失败!')\n```\n\n&nbsp;\n需要说明的是，不同于C++、Java等编程语言，Python中没有用花括号来构造代码块而是**使用了缩进的方式来表示代码的层次结构**，如果`if`条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说**连续的代码如果又保持了相同的缩进那么它们属于同一个代码块**，相当于是一个执行的整体。**缩进**可以使用任意数量的空格，但**通常使用4个空格**，强烈建议大家**不要使用制表键来缩进代码**，如果你已经习惯了这么做，可以**设置代码编辑工具将1个制表键自动变成4个空格**，很多的代码编辑工具都支持这项功能。\n\n> **提示**：`if`和`else`的最后面有一个`:`，它是用英文输入法输入的冒号；程序中输入的`'`、`\"`、`=`、`(`、`)`等特殊字符，都是在英文输入法状态下输入的。有很多初学者经常不注意这一点，结果运行代码的时候就会遇到很多莫名其妙的错误提示。**强烈建议**大家在写代码的时候都**打开英文输入法**（注意是英文输入法而不是中文输入法的英文输入模式），这样可以避免很多不必要的麻烦。\n\n&nbsp;\n当然如果要构造出更多的分支，可以使用`if...elif...else...`结构或者嵌套的`if...else...`结构，下面的代码演示了如何利用多分支结构实现分段函数求值。\n\n$$\nf(x)=\\begin{cases}\n3x-5 & (x>1) \\\\\\\\\nx+2 & (-1 \\leq x \\leq 1) \\\\\\\\\n5x+3 & (x<-1)\n\\end{cases}\n$$\n\n```python\n\"\"\"\n分段函数求值\n\"\"\"\nx = float(input('x = '))\nif x > 1:\n    y = 3 * x - 5\nelif x >= -1:\n    y = x + 2\nelse:\n    y = 5 * x + 3\nprint(f'f({x}) = {y}')\n```\n\n&nbsp;\n当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在`if`的内部构造出一个新的分支结构，同理`elif`和`else`中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。\n```python\n\"\"\"\n分段函数求值\n\"\"\"\nx = float(input('x = '))\nif x > 1:\n    y = 3 * x - 5\nelse:\n    if x >= -1:\n        y = x + 2\n    else:\n        y = 5 * x + 3\nprint(f'f({x}) = {y}')\n```\n\n> **说明：** 大家可以自己感受和评判一下这两种写法到底是哪一种更好。在[**Python之禅**](https://www.python.org/dev/peps/pep-0020/)中有这么一句话：“Flat is better than nested”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次如果很多，会严重的影响代码的可读性，所以能使用扁平化结构时就不要使用嵌套结构。**Python之禅翻译版**\n\n> 优美 > 丑陋\n> 明确 > 隐晦 \n> 简单 > 复杂\n> 复杂 > 繁复 \n> 扁平 > 嵌套\n> 稀疏 > 拥挤\n> 可读性很重要\n> 固然代码的实用性比洁癖更重要，\n> 所谓的“特例”也往往没有特殊到必须违背上述规则的程度\n> 除非必要，否则不要无故忽视异常\n> 如果遇到模棱两可的逻辑，请不要自作聪明地瞎猜。\n> 应该提供一种，且最好只提供一种，一目了然的途径\n> 当然这是没法一蹴而就的，除非你是荷兰人\n> 固然，立刻着手 好过 永远不做。\n> 然而，永远不做 也好过 闷头蛮干\n> 倘若你的实现很难解释，它一定不是个好主意\n> 倘若你的实现一目了然，它可能是个好主意\n> 命名空间大法好，同志们要多多搞！\n\n### 练习\n### 例子1：英制单位英寸与公制单位厘米互换。\n```python\n\"\"\"\n英制单位英寸和公制单位厘米互换\n\"\"\"\nvalue = float(input('请输入长度: '))\nunit = input('请输入单位: ')\nif unit == 'in' or unit == '英寸':\n    print('%f英寸 = %f厘米' % (value, value * 2.54))\nelif unit == 'cm' or unit == '厘米':\n    print('%f厘米 = %f英寸' % (value, value / 2.54))\nelse:\n    print('请输入有效的单位')\n```\n### 例子2：百分制成绩转换为等级制成绩。\n> **要求**：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。\n\n```python\n\"\"\"\n百分制成绩转换为等级制成绩\n\"\"\"\nscore = float(input('请输入成绩: '))\nif score >= 90:\n    grade = 'A'\nelif score >= 80:\n    grade = 'B'\nelif score >= 70:\n    grade = 'C'\nelif score >= 60:\n    grade = 'D'\nelse:\n    grade = 'E'\nprint('对应的等级是:', grade)\n```\n### 例子3：输入三条边长，如果能构成三角形就计算周长和面积。\n```python\n\"\"\"\n判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积\n\"\"\"\na = float(input('a = '))\nb = float(input('b = '))\nc = float(input('c = '))\nif a + b > c and a + c > b and b + c > a:\n    peri = a + b + c\n    print(f'周长: {peri}')\n    half = peri / 2\n    area = (half * (half - a) * (half - b) * (half - c)) ** 0.5\n    print(f'面积: {area}')\nelse:\n    print('不能构成三角形')\n```\n> **说明：** 上面通过边长计算三角形面积的公式叫做[海伦公式](https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-hans/%25E6%25B5%25B7%25E4%25BC%25A6%25E5%2585%25AC%25E5%25BC%258F)。\n\n","source":"_posts/分支结构.md","raw":"---\ntitle: 分支结构\ndate: 2021-12-08 13:31:18\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- Python\ncategories: \n- 编程语言\n---\n\n## 应用场景\n\n迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。\n\n### if语句的使用\n在Python中，要构造分支结构可以使用`if`、`elif`和`else`关键字。所谓**关键字**就是有特殊含义的单词，像`if`和`else`就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名。下面的例子中演示了如何构造一个分支结构。\n```python\n\"\"\"\n用户身份验证\n\"\"\"\nusername = input('请输入用户名: ')\npassword = input('请输入口令: ')\n# 用户名是admin且密码是123456则身份验证成功否则身份验证失败\nif username == 'admin' and password == '123456':\n    print('身份验证成功!')\nelse:\n    print('身份验证失败!')\n```\n\n&nbsp;\n需要说明的是，不同于C++、Java等编程语言，Python中没有用花括号来构造代码块而是**使用了缩进的方式来表示代码的层次结构**，如果`if`条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说**连续的代码如果又保持了相同的缩进那么它们属于同一个代码块**，相当于是一个执行的整体。**缩进**可以使用任意数量的空格，但**通常使用4个空格**，强烈建议大家**不要使用制表键来缩进代码**，如果你已经习惯了这么做，可以**设置代码编辑工具将1个制表键自动变成4个空格**，很多的代码编辑工具都支持这项功能。\n\n> **提示**：`if`和`else`的最后面有一个`:`，它是用英文输入法输入的冒号；程序中输入的`'`、`\"`、`=`、`(`、`)`等特殊字符，都是在英文输入法状态下输入的。有很多初学者经常不注意这一点，结果运行代码的时候就会遇到很多莫名其妙的错误提示。**强烈建议**大家在写代码的时候都**打开英文输入法**（注意是英文输入法而不是中文输入法的英文输入模式），这样可以避免很多不必要的麻烦。\n\n&nbsp;\n当然如果要构造出更多的分支，可以使用`if...elif...else...`结构或者嵌套的`if...else...`结构，下面的代码演示了如何利用多分支结构实现分段函数求值。\n\n$$\nf(x)=\\begin{cases}\n3x-5 & (x>1) \\\\\\\\\nx+2 & (-1 \\leq x \\leq 1) \\\\\\\\\n5x+3 & (x<-1)\n\\end{cases}\n$$\n\n```python\n\"\"\"\n分段函数求值\n\"\"\"\nx = float(input('x = '))\nif x > 1:\n    y = 3 * x - 5\nelif x >= -1:\n    y = x + 2\nelse:\n    y = 5 * x + 3\nprint(f'f({x}) = {y}')\n```\n\n&nbsp;\n当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在`if`的内部构造出一个新的分支结构，同理`elif`和`else`中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。\n```python\n\"\"\"\n分段函数求值\n\"\"\"\nx = float(input('x = '))\nif x > 1:\n    y = 3 * x - 5\nelse:\n    if x >= -1:\n        y = x + 2\n    else:\n        y = 5 * x + 3\nprint(f'f({x}) = {y}')\n```\n\n> **说明：** 大家可以自己感受和评判一下这两种写法到底是哪一种更好。在[**Python之禅**](https://www.python.org/dev/peps/pep-0020/)中有这么一句话：“Flat is better than nested”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次如果很多，会严重的影响代码的可读性，所以能使用扁平化结构时就不要使用嵌套结构。**Python之禅翻译版**\n\n> 优美 > 丑陋\n> 明确 > 隐晦 \n> 简单 > 复杂\n> 复杂 > 繁复 \n> 扁平 > 嵌套\n> 稀疏 > 拥挤\n> 可读性很重要\n> 固然代码的实用性比洁癖更重要，\n> 所谓的“特例”也往往没有特殊到必须违背上述规则的程度\n> 除非必要，否则不要无故忽视异常\n> 如果遇到模棱两可的逻辑，请不要自作聪明地瞎猜。\n> 应该提供一种，且最好只提供一种，一目了然的途径\n> 当然这是没法一蹴而就的，除非你是荷兰人\n> 固然，立刻着手 好过 永远不做。\n> 然而，永远不做 也好过 闷头蛮干\n> 倘若你的实现很难解释，它一定不是个好主意\n> 倘若你的实现一目了然，它可能是个好主意\n> 命名空间大法好，同志们要多多搞！\n\n### 练习\n### 例子1：英制单位英寸与公制单位厘米互换。\n```python\n\"\"\"\n英制单位英寸和公制单位厘米互换\n\"\"\"\nvalue = float(input('请输入长度: '))\nunit = input('请输入单位: ')\nif unit == 'in' or unit == '英寸':\n    print('%f英寸 = %f厘米' % (value, value * 2.54))\nelif unit == 'cm' or unit == '厘米':\n    print('%f厘米 = %f英寸' % (value, value / 2.54))\nelse:\n    print('请输入有效的单位')\n```\n### 例子2：百分制成绩转换为等级制成绩。\n> **要求**：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。\n\n```python\n\"\"\"\n百分制成绩转换为等级制成绩\n\"\"\"\nscore = float(input('请输入成绩: '))\nif score >= 90:\n    grade = 'A'\nelif score >= 80:\n    grade = 'B'\nelif score >= 70:\n    grade = 'C'\nelif score >= 60:\n    grade = 'D'\nelse:\n    grade = 'E'\nprint('对应的等级是:', grade)\n```\n### 例子3：输入三条边长，如果能构成三角形就计算周长和面积。\n```python\n\"\"\"\n判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积\n\"\"\"\na = float(input('a = '))\nb = float(input('b = '))\nc = float(input('c = '))\nif a + b > c and a + c > b and b + c > a:\n    peri = a + b + c\n    print(f'周长: {peri}')\n    half = peri / 2\n    area = (half * (half - a) * (half - b) * (half - c)) ** 0.5\n    print(f'面积: {area}')\nelse:\n    print('不能构成三角形')\n```\n> **说明：** 上面通过边长计算三角形面积的公式叫做[海伦公式](https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-hans/%25E6%25B5%25B7%25E4%25BC%25A6%25E5%2585%25AC%25E5%25BC%258F)。\n\n","slug":"分支结构","published":1,"updated":"2021-12-30T08:57:23.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv41000y8ou100mp68v5","content":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。</p>\n<h3 id=\"if语句的使用\"><a href=\"#if语句的使用\" class=\"headerlink\" title=\"if语句的使用\"></a>if语句的使用</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名。下面的例子中演示了如何构造一个分支结构。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n用户身份验证\n\"\"\"</span>\nusername <span class=\"token operator\">=</span> input<span class=\"token punctuation\">(</span><span class=\"token string\">'请输入用户名: '</span><span class=\"token punctuation\">)</span>\npassword <span class=\"token operator\">=</span> input<span class=\"token punctuation\">(</span><span class=\"token string\">'请输入口令: '</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 用户名是admin且密码是123456则身份验证成功否则身份验证失败</span>\n<span class=\"token keyword\">if</span> username <span class=\"token operator\">==</span> <span class=\"token string\">'admin'</span> <span class=\"token operator\">and</span> password <span class=\"token operator\">==</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'身份验证成功!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'身份验证失败!'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>&nbsp;<br>需要说明的是，不同于C++、Java等编程语言，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，强烈建议大家<strong>不要使用制表键来缩进代码</strong>，如果你已经习惯了这么做，可以<strong>设置代码编辑工具将1个制表键自动变成4个空格</strong>，很多的代码编辑工具都支持这项功能。</p>\n<blockquote>\n<p><strong>提示</strong>：<code>if</code>和<code>else</code>的最后面有一个<code>:</code>，它是用英文输入法输入的冒号；程序中输入的<code>&#39;</code>、<code>&quot;</code>、<code>=</code>、<code>(</code>、<code>)</code>等特殊字符，都是在英文输入法状态下输入的。有很多初学者经常不注意这一点，结果运行代码的时候就会遇到很多莫名其妙的错误提示。<strong>强烈建议</strong>大家在写代码的时候都<strong>打开英文输入法</strong>（注意是英文输入法而不是中文输入法的英文输入模式），这样可以避免很多不必要的麻烦。</p>\n</blockquote>\n<p>&nbsp;<br>当然如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p>\n<p>$$<br>f(x)=\\begin{cases}<br>3x-5 &amp; (x&gt;1) \\\\<br>x+2 &amp; (-1 \\leq x \\leq 1) \\\\<br>5x+3 &amp; (x&lt;-1)<br>\\end{cases}<br>$$</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n分段函数求值\n\"\"\"</span>\nx <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'x = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">-</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">elif</span> x <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    y <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">'f({x}) = {y}'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>&nbsp;<br>当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在<code>if</code>的内部构造出一个新的分支结构，同理<code>elif</code>和<code>else</code>中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n分段函数求值\n\"\"\"</span>\nx <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'x = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">-</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        y <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        y <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">'f({x}) = {y}'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p><strong>说明：</strong> 大家可以自己感受和评判一下这两种写法到底是哪一种更好。在<a href=\"https://www.python.org/dev/peps/pep-0020/\"><strong>Python之禅</strong></a>中有这么一句话：“Flat is better than nested”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次如果很多，会严重的影响代码的可读性，所以能使用扁平化结构时就不要使用嵌套结构。<strong>Python之禅翻译版</strong></p>\n</blockquote>\n<blockquote>\n<p>优美 &gt; 丑陋<br>明确 &gt; 隐晦<br>简单 &gt; 复杂<br>复杂 &gt; 繁复<br>扁平 &gt; 嵌套<br>稀疏 &gt; 拥挤<br>可读性很重要<br>固然代码的实用性比洁癖更重要，<br>所谓的“特例”也往往没有特殊到必须违背上述规则的程度<br>除非必要，否则不要无故忽视异常<br>如果遇到模棱两可的逻辑，请不要自作聪明地瞎猜。<br>应该提供一种，且最好只提供一种，一目了然的途径<br>当然这是没法一蹴而就的，除非你是荷兰人<br>固然，立刻着手 好过 永远不做。<br>然而，永远不做 也好过 闷头蛮干<br>倘若你的实现很难解释，它一定不是个好主意<br>倘若你的实现一目了然，它可能是个好主意<br>命名空间大法好，同志们要多多搞！</p>\n</blockquote>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h3 id=\"例子1：英制单位英寸与公制单位厘米互换。\"><a href=\"#例子1：英制单位英寸与公制单位厘米互换。\" class=\"headerlink\" title=\"例子1：英制单位英寸与公制单位厘米互换。\"></a>例子1：英制单位英寸与公制单位厘米互换。</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n英制单位英寸和公制单位厘米互换\n\"\"\"</span>\nvalue <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'请输入长度: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nunit <span class=\"token operator\">=</span> input<span class=\"token punctuation\">(</span><span class=\"token string\">'请输入单位: '</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> unit <span class=\"token operator\">==</span> <span class=\"token string\">'in'</span> <span class=\"token operator\">or</span> unit <span class=\"token operator\">==</span> <span class=\"token string\">'英寸'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%f英寸 = %f厘米'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2.54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> unit <span class=\"token operator\">==</span> <span class=\"token string\">'cm'</span> <span class=\"token operator\">or</span> unit <span class=\"token operator\">==</span> <span class=\"token string\">'厘米'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%f厘米 = %f英寸'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> value <span class=\"token operator\">/</span> <span class=\"token number\">2.54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入有效的单位'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"例子2：百分制成绩转换为等级制成绩。\"><a href=\"#例子2：百分制成绩转换为等级制成绩。\" class=\"headerlink\" title=\"例子2：百分制成绩转换为等级制成绩。\"></a>例子2：百分制成绩转换为等级制成绩。</h3><blockquote>\n<p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p>\n</blockquote>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n百分制成绩转换为等级制成绩\n\"\"\"</span>\nscore <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'请输入成绩: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span>\n    grade <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span>\n<span class=\"token keyword\">elif</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">:</span>\n    grade <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span>\n<span class=\"token keyword\">elif</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">:</span>\n    grade <span class=\"token operator\">=</span> <span class=\"token string\">'C'</span>\n<span class=\"token keyword\">elif</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span>\n    grade <span class=\"token operator\">=</span> <span class=\"token string\">'D'</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    grade <span class=\"token operator\">=</span> <span class=\"token string\">'E'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'对应的等级是:'</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"例子3：输入三条边长，如果能构成三角形就计算周长和面积。\"><a href=\"#例子3：输入三条边长，如果能构成三角形就计算周长和面积。\" class=\"headerlink\" title=\"例子3：输入三条边长，如果能构成三角形就计算周长和面积。\"></a>例子3：输入三条边长，如果能构成三角形就计算周长和面积。</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积\n\"\"\"</span>\na <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'a = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'b = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'c = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">></span> c <span class=\"token operator\">and</span> a <span class=\"token operator\">+</span> c <span class=\"token operator\">></span> b <span class=\"token operator\">and</span> b <span class=\"token operator\">+</span> c <span class=\"token operator\">></span> a<span class=\"token punctuation\">:</span>\n    peri <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">'周长: {peri}'</span><span class=\"token punctuation\">)</span>\n    half <span class=\"token operator\">=</span> peri <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n    area <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>half <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>half <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>half <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>half <span class=\"token operator\">-</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">0.5</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">'面积: {area}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不能构成三角形'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p><strong>说明：</strong> 上面通过边长计算三角形面积的公式叫做<a href=\"https://link.zhihu.com/?target=https://zh.wikipedia.org/zh-hans/%25E6%25B5%25B7%25E4%25BC%25A6%25E5%2585%25AC%25E5%25BC%258F\">海伦公式</a>。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。</p>\n<h3 id=\"if语句的使用\"><a href=\"#if语句的使用\" class=\"headerlink\" title=\"if语句的使用\"></a>if语句的使用</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名。下面的例子中演示了如何构造一个分支结构。</p>\n<pre><code class=\"python\">&quot;&quot;&quot;\n用户身份验证\n&quot;&quot;&quot;\nusername = input(&#39;请输入用户名: &#39;)\npassword = input(&#39;请输入口令: &#39;)\n# 用户名是admin且密码是123456则身份验证成功否则身份验证失败\nif username == &#39;admin&#39; and password == &#39;123456&#39;:\n    print(&#39;身份验证成功!&#39;)\nelse:\n    print(&#39;身份验证失败!&#39;)\n</code></pre>\n<p>&nbsp;<br>需要说明的是，不同于C++、Java等编程语言，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，强烈建议大家<strong>不要使用制表键来缩进代码</strong>，如果你已经习惯了这么做，可以<strong>设置代码编辑工具将1个制表键自动变成4个空格</strong>，很多的代码编辑工具都支持这项功能。</p>\n<blockquote>\n<p><strong>提示</strong>：<code>if</code>和<code>else</code>的最后面有一个<code>:</code>，它是用英文输入法输入的冒号；程序中输入的<code>&#39;</code>、<code>&quot;</code>、<code>=</code>、<code>(</code>、<code>)</code>等特殊字符，都是在英文输入法状态下输入的。有很多初学者经常不注意这一点，结果运行代码的时候就会遇到很多莫名其妙的错误提示。<strong>强烈建议</strong>大家在写代码的时候都<strong>打开英文输入法</strong>（注意是英文输入法而不是中文输入法的英文输入模式），这样可以避免很多不必要的麻烦。</p>\n</blockquote>\n<p>&nbsp;<br>当然如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p>\n<p>$$<br>f(x)=\\begin{cases}<br>3x-5 &amp; (x&gt;1) \\\\<br>x+2 &amp; (-1 \\leq x \\leq 1) \\\\<br>5x+3 &amp; (x&lt;-1)<br>\\end{cases}<br>$$</p>\n<pre><code class=\"python\">&quot;&quot;&quot;\n分段函数求值\n&quot;&quot;&quot;\nx = float(input(&#39;x = &#39;))\nif x &gt; 1:\n    y = 3 * x - 5\nelif x &gt;= -1:\n    y = x + 2\nelse:\n    y = 5 * x + 3\nprint(f&#39;f(&#123;x&#125;) = &#123;y&#125;&#39;)\n</code></pre>\n<p>&nbsp;<br>当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在<code>if</code>的内部构造出一个新的分支结构，同理<code>elif</code>和<code>else</code>中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。</p>\n<pre><code class=\"python\">&quot;&quot;&quot;\n分段函数求值\n&quot;&quot;&quot;\nx = float(input(&#39;x = &#39;))\nif x &gt; 1:\n    y = 3 * x - 5\nelse:\n    if x &gt;= -1:\n        y = x + 2\n    else:\n        y = 5 * x + 3\nprint(f&#39;f(&#123;x&#125;) = &#123;y&#125;&#39;)\n</code></pre>\n<blockquote>\n<p><strong>说明：</strong> 大家可以自己感受和评判一下这两种写法到底是哪一种更好。在<a href=\"https://www.python.org/dev/peps/pep-0020/\"><strong>Python之禅</strong></a>中有这么一句话：“Flat is better than nested”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次如果很多，会严重的影响代码的可读性，所以能使用扁平化结构时就不要使用嵌套结构。<strong>Python之禅翻译版</strong></p>\n</blockquote>\n<blockquote>\n<p>优美 &gt; 丑陋<br>明确 &gt; 隐晦<br>简单 &gt; 复杂<br>复杂 &gt; 繁复<br>扁平 &gt; 嵌套<br>稀疏 &gt; 拥挤<br>可读性很重要<br>固然代码的实用性比洁癖更重要，<br>所谓的“特例”也往往没有特殊到必须违背上述规则的程度<br>除非必要，否则不要无故忽视异常<br>如果遇到模棱两可的逻辑，请不要自作聪明地瞎猜。<br>应该提供一种，且最好只提供一种，一目了然的途径<br>当然这是没法一蹴而就的，除非你是荷兰人<br>固然，立刻着手 好过 永远不做。<br>然而，永远不做 也好过 闷头蛮干<br>倘若你的实现很难解释，它一定不是个好主意<br>倘若你的实现一目了然，它可能是个好主意<br>命名空间大法好，同志们要多多搞！</p>\n</blockquote>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h3 id=\"例子1：英制单位英寸与公制单位厘米互换。\"><a href=\"#例子1：英制单位英寸与公制单位厘米互换。\" class=\"headerlink\" title=\"例子1：英制单位英寸与公制单位厘米互换。\"></a>例子1：英制单位英寸与公制单位厘米互换。</h3><pre><code class=\"python\">&quot;&quot;&quot;\n英制单位英寸和公制单位厘米互换\n&quot;&quot;&quot;\nvalue = float(input(&#39;请输入长度: &#39;))\nunit = input(&#39;请输入单位: &#39;)\nif unit == &#39;in&#39; or unit == &#39;英寸&#39;:\n    print(&#39;%f英寸 = %f厘米&#39; % (value, value * 2.54))\nelif unit == &#39;cm&#39; or unit == &#39;厘米&#39;:\n    print(&#39;%f厘米 = %f英寸&#39; % (value, value / 2.54))\nelse:\n    print(&#39;请输入有效的单位&#39;)\n</code></pre>\n<h3 id=\"例子2：百分制成绩转换为等级制成绩。\"><a href=\"#例子2：百分制成绩转换为等级制成绩。\" class=\"headerlink\" title=\"例子2：百分制成绩转换为等级制成绩。\"></a>例子2：百分制成绩转换为等级制成绩。</h3><blockquote>\n<p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p>\n</blockquote>\n<pre><code class=\"python\">&quot;&quot;&quot;\n百分制成绩转换为等级制成绩\n&quot;&quot;&quot;\nscore = float(input(&#39;请输入成绩: &#39;))\nif score &gt;= 90:\n    grade = &#39;A&#39;\nelif score &gt;= 80:\n    grade = &#39;B&#39;\nelif score &gt;= 70:\n    grade = &#39;C&#39;\nelif score &gt;= 60:\n    grade = &#39;D&#39;\nelse:\n    grade = &#39;E&#39;\nprint(&#39;对应的等级是:&#39;, grade)\n</code></pre>\n<h3 id=\"例子3：输入三条边长，如果能构成三角形就计算周长和面积。\"><a href=\"#例子3：输入三条边长，如果能构成三角形就计算周长和面积。\" class=\"headerlink\" title=\"例子3：输入三条边长，如果能构成三角形就计算周长和面积。\"></a>例子3：输入三条边长，如果能构成三角形就计算周长和面积。</h3><pre><code class=\"python\">&quot;&quot;&quot;\n判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积\n&quot;&quot;&quot;\na = float(input(&#39;a = &#39;))\nb = float(input(&#39;b = &#39;))\nc = float(input(&#39;c = &#39;))\nif a + b &gt; c and a + c &gt; b and b + c &gt; a:\n    peri = a + b + c\n    print(f&#39;周长: &#123;peri&#125;&#39;)\n    half = peri / 2\n    area = (half * (half - a) * (half - b) * (half - c)) ** 0.5\n    print(f&#39;面积: &#123;area&#125;&#39;)\nelse:\n    print(&#39;不能构成三角形&#39;)\n</code></pre>\n<blockquote>\n<p><strong>说明：</strong> 上面通过边长计算三角形面积的公式叫做<a href=\"https://link.zhihu.com/?target=https://zh.wikipedia.org/zh-hans/%25E6%25B5%25B7%25E4%25BC%25A6%25E5%2585%25AC%25E5%25BC%258F\">海伦公式</a>。</p>\n</blockquote>\n"},{"title":"Python语言元素","date":"2021-12-08T05:24:18.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"\n作为一个程序员，可能经常会被外行人问到两个问题，其一是“什么是（计算机）程序”，其二是“写（计算机）程序能做什么”，这里我们先对两个问题做一个回答。**程序是指令的集合**，**写程序就是用指令控制计算机做我们想让它做的事情**。那么，为什么要用Python语言来写程序呢？因为**Python语言简单优雅**，相比C、C++、Java这样的编程语言，**Python对初学者更加友好**，当然这并不是说Python不像其他语言那样强大，**Python几乎是无所不能的**，在第一节课的时候，我们就说到了Python可以用于服务器程序开发、云平台开发、数据分析、机器学习等各个领域。当然，Python语言还可以用来粘合其他语言开发的系统，所以也经常被戏称为“**胶水语言**”。\n\n---\n\n## 一些计算机常识\n在开始系统的学习编程之前，我们先来科普一些计算机的基础知识。计算机的硬件系统通常由五大部件构成，包括：**运算器**、**控制器**、**存储器**、**输入设备**和**输出设备**。其中，运算器和控制器放在一起就是我们常说的**中央处理器**，它的功能是执行各种运算和控制指令。刚才我们提到过程序是指令的集合，写程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。目前，我们使用的计算机基本都是“冯·诺依曼体系结构”的计算机，这种计算机有两个关键点：一是要将**存储设备与中央处理器分开**；二是将**数据以二进制方式编码**。\n\n&nbsp;\n二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法本质是一样的。人类因为有十根手指所以使用了十进制，因为在计数时十根手指用完之后就只能用进位的方式来表示更大的数值。当然凡事都有例外，玛雅人可能是因为长年光着脚的原因，把脚趾头也都用上了，于是他们使用了二十进制的计数法。在这种计数法的指导下，玛雅人的历法就与我们平常使用的历法并不相同。按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“的荒诞说法。今天很多人都在猜测，玛雅文明之所以发展缓慢跟使用了二十进制是有关系的。对于计算机来说，二进制在物理器件上最容易实现的，因为可以用高电压表示1，用低电压表示0。不是所有写程序的人都需要知道十进制与二进制如何转换，大多数时候我们即便不了解这些知识也能写出程序，但是我们必须要知道**计算机是使用二进制计数的**，不管什么**数据到了计算机内存中都是以二进制形式存在的**。\n\n## 变量和类型\n要想在计算机内存中保存数据，首先就得说一说变量这个概念。在编程语言中，**变量是数据的载体**，简单的说就是一块用来保存数据的内存空间，**变量的值可以被读取和修改**，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，最常见的就是数值，除了数值之外还有文本、图形、音频、视频等各种各样的数据。虽然数据在计算机中都是以二进制形态存在的，但是我们可以用不同类型的变量来表示数据类型的差异。**Python中的数据类型很多**，而且也**允许我们自定义新的数据类型**（这一点在后面会讲到），这里我们需要先了解几种常用的数据类型。\n\n- **整型（int）**：Python中可以处理任意大小的整数，而且支持二进制（如`0b100`，换算成十进制是4）、八进制（如`0o100`，换算成十进制是64）、十进制（`100`）和十六进制（`0x100`，换算成十进制是256）的表示法。\n- **浮点型（float）**：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如`123.456`）之外还支持科学计数法（如`1.23456e2`）。\n- **字符串型（str）**：字符串是以单引号或双引号括起来的任意文本，比如`'hello'`和`\"hello\"`。\n- **布尔型（bool）**：布尔值只有`True`、`False`两种值，要么是`True`，要么是`False`。\n- **复数型**：形如`3+5j`，跟数学上的复数表示一样，唯一不同的是虚部的`i`换成了`j`。实际上，这个类型并不常用，大家了解一下就可以了。\n\n### 变量命名\n对于每个变量我们需要给它取一个名字，就如同我们每个人都有自己的名字一样。在Python中，变量命名需要遵循以下这些规则，这些规则又分为必须遵守的硬性规则和建议遵守的非硬性规则。\n\n&nbsp;\n硬性规则：\n\n1. 变量名由**字母**、数字和**下划线**构成，数字不能开头。需要说明的是，这里说的字母指的是Unicode字符，Unicode称为万国码，囊括了世界上大部分的文字系统，这也就意味着中文、日文、希腊字母等都可以作为变量名中的字符，但是像`!`、`@`、`#`这些特殊字符是不能出现在变量名中的，而且我们强烈建议大家**尽可能使用英文字母**。\n2. **大小写敏感**，简单的说就是大写的`A`和小写的`a`是两个不同的变量。\n3. 变量名**不要跟Python语言的关键字**（有特殊含义的单词，后面会讲到）和**保留字**（如函数、模块等的名字）**发生重名的冲突**。\n\n&nbsp;\n非硬性规则：\n\n1. 变量名通常使用小写英文字母，多个单词用下划线进行连接。\n2. 受保护的变量用单个下划线开头（后面会讲到）。\n3. 私有的变量用两个下划线开头（后面会讲到）。\n\n当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到**见名知意**也非常重要。\n\n\n### 变量的使用\n下面通过几个例子来说明变量的类型和变量使用。\n```python\n\"\"\"\n使用变量保存数据并进行加减乘除运算\n\"\"\"\na = 45          # 变量a保存了45\nb = 12          # 变量b保存了12\nprint(a + b)    # 57\nprint(a - b)    # 33\nprint(a * b)    # 540\nprint(a / b)    # 3.75\n```\n\n在Python中可以使用`type`函数对变量的类型进行检查。\n```python\n\"\"\"\n使用type()检查变量的类型\n\"\"\"\na = 100\nb = 12.345\nc = 'hello, world'\nd = True\nprint(type(a))    # <class 'int'>\nprint(type(b))    # <class 'float'>\nprint(type(c))    # <class 'str'>\nprint(type(d))    # <class 'bool'>\n```\n\n不同类型的变量可以相互转换，这一点可以通过Python的内置函数来实现。\n\n- `int()`：将一个数值或字符串转换成整数，可以指定进制。\n- `float()`：将一个字符串转换成浮点数。\n- `str()`：将指定的对象转换成字符串形式，可以指定编码。\n- `chr()`：将整数转换成该编码对应的字符串（一个字符）。\n- `ord()`：将字符串（一个字符）转换成对应的编码（整数）。\n\n下面的例子为大家演示了Python中的类型转换。\n```python\n\"\"\"\nPython中的类型转换\n\"\"\"\na = 100\nb = 12.345\nc = 'hello, world'\nd = True\n# 整数转成浮点数\nprint(float(a))    # 100.0\n# 浮点型转成字符串 (输出字符串时不会看到引号哟)\nprint(str(b))      # 12.345\n# 字符串转成布尔型 (有内容的字符串都会变成True)\nprint(bool(c))     # True\n# 布尔型转成整数 (True会转成1，False会转成0)\nprint(int(d))      # 1\n# 将整数变成对应的字符 (97刚好对应字符表中的字母a)\nprint(chr(97))     # a\n# 将字符转成整数 (Python中字符和字符串表示法相同)\nprint(ord('a'))    # 97\n```\n\n## 运算符\nPython支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/python_yunsuanfu.png)\n\n> **说明：** 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。\n\n\n### 算术运算符\nPython中的算术运算符非常丰富，除了大家最为熟悉的加减乘除之外，还有整除运算符、求模（求余数）运算符和求幂运算符。下面的例子为大家展示了算术运算符的使用。\n```python\n\"\"\"\n算术运算符\n\"\"\"\nprint(321 + 123)     # 加法运算 444\nprint(321 - 123)     # 减法运算 198\nprint(321 * 123)     # 乘法运算 39483\nprint(321 / 123)     # 除法运算 2.6097560975609757\nprint(321 % 123)     # 求模运算 75\nprint(321 // 123)    # 整除运算 2\nprint(321 ** 2)      # 求幂运算 103041\n```\n\n### 赋值运算符\n赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。\n```python\n\"\"\"\n赋值运算符和复合赋值运算符\n\"\"\"\na = 10\nb = 3\na += b        # 相当于：a = a + b 13\na *= a + 2    # 相当于：a = a * (a + 2) 13*(13+2)\nprint(a)      # 算一下这里会输出什么 \n```\n\n\n### 比较运算符和逻辑运算符\n比较运算符有的地方也称为关系运算符，包括`==`、`!=`、`<`、`>`、`<=`、`>=`，我相信没有什么好解释的，大家一看就能懂，需要提醒的是比较相等用的是`==`，请注意这里是两个等号，因为`=`是赋值运算符，我们在上面刚刚讲到过，`==`才是比较相等的运算符；比较不相等用的是`!=`，这不同于数学上的不等号，Python 2中曾经使用过`<>`来表示不等关系，大家知道就可以了。比较运算符会产生布尔值，要么是`True`要么是`False`。\n\n&nbsp;\n逻辑运算符有三个，分别是`and`、`or`和`not`。\n\n`and`字面意思是“而且”，所以`and`运算符会连接两个布尔值，如果两个布尔值都是`True`，那么运算的结果就是`True`；左右两边的布尔值有一个是`False`，最终的运算结果就是`False`。相信大家已经想到了，如果`and`左边的布尔值是`False`，不管右边的布尔值是什么，最终的结果都是`False`，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在`and`运算符左边为`False`的情况下，右边的表达式根本不会执行。\n\n&nbsp;\n`or`字面意思是“或者”，所以`or`运算符也会连接两个布尔值，如果两个布尔值有任意一个是`True`，那么最终的结果就是`True`。当然，`or`运算符也是有短路功能的，在它左边的布尔值为`True`的情况下，右边的表达式根本不会执行。\n\n&nbsp;\n`not`运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，`not`后面的布尔值如果是`True`，运算结果就是`False`；而`not`后面的布尔值如果是`False`，运算结果就是`True`。\n```python\n\"\"\"\n比较运算符和逻辑运算符的使用\n\"\"\"\nflag0 = 1 == 1\nflag1 = 3 > 2\nflag2 = 2 < 1\nflag3 = flag1 and flag2\nflag4 = flag1 or flag2\nflag5 = not (1 != 2)\nprint('flag0 =', flag0)    # flag0 = True\nprint('flag1 =', flag1)    # flag1 = True\nprint('flag2 =', flag2)    # flag2 = False\nprint('flag3 =', flag3)    # flag3 = False\nprint('flag4 =', flag4)    # flag4 = True\nprint('flag5 =', flag5)    # flag5 = False\n```\n\n> **说明**：比较运算符的优先级高于赋值运算符，所以`flag0 = 1 == 1`\n> 先做`1 == 1`，产生布尔值`True`，再将这个值赋值给变量`flag0`。`print`函数可以输出多个值，多个值之间可以用`,`进行分隔，输出的内容之间默认以空格分开。\n\n### 例子1：华氏温度转换为摄氏温度\n> **提示**：华氏温度到摄氏温度的转换公式为：$C=(F-32)/18$。\n\n```python\n\"\"\"\n将华氏温度转换为摄氏温度\n\"\"\"\nf = float(input('请输入华氏温度: '))\nc = (f - 32) / 1.8\nprint('%.1f华氏度 = %.1f摄氏度' % (f, c))\n```\n\n> **说明**：在使用`print`函数输出时，也可以对字符串内容进行格式化处理，上面`print`函数中的字符串`%.1f`是一个占位符，稍后会由一个`float`类型的变量值替换掉它。同理，如果字符串中有`%d`，后面可以用一个`int`类型的变量值替换掉它，而`%s`会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中`{f:.1f}`和`{c:.1f}`可以先看成是`{f}`和`{c}`，表示输出时会用变量`f`和变量`c`的值替换掉这两个占位符，后面的`:.1f`表示这是一个浮点数，小数点后保留1位有效数字。\n\n```python\nprint(f'{f:.1f}华氏度 = {c:.1f}摄氏度')\n```\n\n### 例子2：输入圆的半径计算周长和面积\n```python\n\"\"\"\n输入半径计算圆的周长和面积\n\"\"\"\nradius = float(input('请输入圆的半径: '))\nperimeter = 2 * 3.1416 * radius\narea = 3.1416 * radius * radius\nprint('周长: %.2f' % perimeter)\nprint('面积: %.2f' % area)\n```\n\n### 例子3：输入年份判断是不是闰年。\n```python\n\"\"\"\n输入年份 如果是闰年输出True 否则输出False\n\"\"\"\nyear = int(input('请输入年份: '))\nis_leap = year % 4 == 0 and year % 100 != 0 or year % 400 == 0\nprint(is_leap)\n```\n\n> **说明**：比较运算符会产生布尔值，而逻辑运算符`and`和`or`会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出`True`，平年输出`False`。\n\n\n\n","source":"_posts/Python语言元素.md","raw":"---\ntitle: Python语言元素\ndate: 2021-12-08 13:24:18\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- Python\ncategories: \n- 编程语言\n---\n\n作为一个程序员，可能经常会被外行人问到两个问题，其一是“什么是（计算机）程序”，其二是“写（计算机）程序能做什么”，这里我们先对两个问题做一个回答。**程序是指令的集合**，**写程序就是用指令控制计算机做我们想让它做的事情**。那么，为什么要用Python语言来写程序呢？因为**Python语言简单优雅**，相比C、C++、Java这样的编程语言，**Python对初学者更加友好**，当然这并不是说Python不像其他语言那样强大，**Python几乎是无所不能的**，在第一节课的时候，我们就说到了Python可以用于服务器程序开发、云平台开发、数据分析、机器学习等各个领域。当然，Python语言还可以用来粘合其他语言开发的系统，所以也经常被戏称为“**胶水语言**”。\n\n---\n\n## 一些计算机常识\n在开始系统的学习编程之前，我们先来科普一些计算机的基础知识。计算机的硬件系统通常由五大部件构成，包括：**运算器**、**控制器**、**存储器**、**输入设备**和**输出设备**。其中，运算器和控制器放在一起就是我们常说的**中央处理器**，它的功能是执行各种运算和控制指令。刚才我们提到过程序是指令的集合，写程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。目前，我们使用的计算机基本都是“冯·诺依曼体系结构”的计算机，这种计算机有两个关键点：一是要将**存储设备与中央处理器分开**；二是将**数据以二进制方式编码**。\n\n&nbsp;\n二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法本质是一样的。人类因为有十根手指所以使用了十进制，因为在计数时十根手指用完之后就只能用进位的方式来表示更大的数值。当然凡事都有例外，玛雅人可能是因为长年光着脚的原因，把脚趾头也都用上了，于是他们使用了二十进制的计数法。在这种计数法的指导下，玛雅人的历法就与我们平常使用的历法并不相同。按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“的荒诞说法。今天很多人都在猜测，玛雅文明之所以发展缓慢跟使用了二十进制是有关系的。对于计算机来说，二进制在物理器件上最容易实现的，因为可以用高电压表示1，用低电压表示0。不是所有写程序的人都需要知道十进制与二进制如何转换，大多数时候我们即便不了解这些知识也能写出程序，但是我们必须要知道**计算机是使用二进制计数的**，不管什么**数据到了计算机内存中都是以二进制形式存在的**。\n\n## 变量和类型\n要想在计算机内存中保存数据，首先就得说一说变量这个概念。在编程语言中，**变量是数据的载体**，简单的说就是一块用来保存数据的内存空间，**变量的值可以被读取和修改**，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，最常见的就是数值，除了数值之外还有文本、图形、音频、视频等各种各样的数据。虽然数据在计算机中都是以二进制形态存在的，但是我们可以用不同类型的变量来表示数据类型的差异。**Python中的数据类型很多**，而且也**允许我们自定义新的数据类型**（这一点在后面会讲到），这里我们需要先了解几种常用的数据类型。\n\n- **整型（int）**：Python中可以处理任意大小的整数，而且支持二进制（如`0b100`，换算成十进制是4）、八进制（如`0o100`，换算成十进制是64）、十进制（`100`）和十六进制（`0x100`，换算成十进制是256）的表示法。\n- **浮点型（float）**：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如`123.456`）之外还支持科学计数法（如`1.23456e2`）。\n- **字符串型（str）**：字符串是以单引号或双引号括起来的任意文本，比如`'hello'`和`\"hello\"`。\n- **布尔型（bool）**：布尔值只有`True`、`False`两种值，要么是`True`，要么是`False`。\n- **复数型**：形如`3+5j`，跟数学上的复数表示一样，唯一不同的是虚部的`i`换成了`j`。实际上，这个类型并不常用，大家了解一下就可以了。\n\n### 变量命名\n对于每个变量我们需要给它取一个名字，就如同我们每个人都有自己的名字一样。在Python中，变量命名需要遵循以下这些规则，这些规则又分为必须遵守的硬性规则和建议遵守的非硬性规则。\n\n&nbsp;\n硬性规则：\n\n1. 变量名由**字母**、数字和**下划线**构成，数字不能开头。需要说明的是，这里说的字母指的是Unicode字符，Unicode称为万国码，囊括了世界上大部分的文字系统，这也就意味着中文、日文、希腊字母等都可以作为变量名中的字符，但是像`!`、`@`、`#`这些特殊字符是不能出现在变量名中的，而且我们强烈建议大家**尽可能使用英文字母**。\n2. **大小写敏感**，简单的说就是大写的`A`和小写的`a`是两个不同的变量。\n3. 变量名**不要跟Python语言的关键字**（有特殊含义的单词，后面会讲到）和**保留字**（如函数、模块等的名字）**发生重名的冲突**。\n\n&nbsp;\n非硬性规则：\n\n1. 变量名通常使用小写英文字母，多个单词用下划线进行连接。\n2. 受保护的变量用单个下划线开头（后面会讲到）。\n3. 私有的变量用两个下划线开头（后面会讲到）。\n\n当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到**见名知意**也非常重要。\n\n\n### 变量的使用\n下面通过几个例子来说明变量的类型和变量使用。\n```python\n\"\"\"\n使用变量保存数据并进行加减乘除运算\n\"\"\"\na = 45          # 变量a保存了45\nb = 12          # 变量b保存了12\nprint(a + b)    # 57\nprint(a - b)    # 33\nprint(a * b)    # 540\nprint(a / b)    # 3.75\n```\n\n在Python中可以使用`type`函数对变量的类型进行检查。\n```python\n\"\"\"\n使用type()检查变量的类型\n\"\"\"\na = 100\nb = 12.345\nc = 'hello, world'\nd = True\nprint(type(a))    # <class 'int'>\nprint(type(b))    # <class 'float'>\nprint(type(c))    # <class 'str'>\nprint(type(d))    # <class 'bool'>\n```\n\n不同类型的变量可以相互转换，这一点可以通过Python的内置函数来实现。\n\n- `int()`：将一个数值或字符串转换成整数，可以指定进制。\n- `float()`：将一个字符串转换成浮点数。\n- `str()`：将指定的对象转换成字符串形式，可以指定编码。\n- `chr()`：将整数转换成该编码对应的字符串（一个字符）。\n- `ord()`：将字符串（一个字符）转换成对应的编码（整数）。\n\n下面的例子为大家演示了Python中的类型转换。\n```python\n\"\"\"\nPython中的类型转换\n\"\"\"\na = 100\nb = 12.345\nc = 'hello, world'\nd = True\n# 整数转成浮点数\nprint(float(a))    # 100.0\n# 浮点型转成字符串 (输出字符串时不会看到引号哟)\nprint(str(b))      # 12.345\n# 字符串转成布尔型 (有内容的字符串都会变成True)\nprint(bool(c))     # True\n# 布尔型转成整数 (True会转成1，False会转成0)\nprint(int(d))      # 1\n# 将整数变成对应的字符 (97刚好对应字符表中的字母a)\nprint(chr(97))     # a\n# 将字符转成整数 (Python中字符和字符串表示法相同)\nprint(ord('a'))    # 97\n```\n\n## 运算符\nPython支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/python_yunsuanfu.png)\n\n> **说明：** 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。\n\n\n### 算术运算符\nPython中的算术运算符非常丰富，除了大家最为熟悉的加减乘除之外，还有整除运算符、求模（求余数）运算符和求幂运算符。下面的例子为大家展示了算术运算符的使用。\n```python\n\"\"\"\n算术运算符\n\"\"\"\nprint(321 + 123)     # 加法运算 444\nprint(321 - 123)     # 减法运算 198\nprint(321 * 123)     # 乘法运算 39483\nprint(321 / 123)     # 除法运算 2.6097560975609757\nprint(321 % 123)     # 求模运算 75\nprint(321 // 123)    # 整除运算 2\nprint(321 ** 2)      # 求幂运算 103041\n```\n\n### 赋值运算符\n赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。\n```python\n\"\"\"\n赋值运算符和复合赋值运算符\n\"\"\"\na = 10\nb = 3\na += b        # 相当于：a = a + b 13\na *= a + 2    # 相当于：a = a * (a + 2) 13*(13+2)\nprint(a)      # 算一下这里会输出什么 \n```\n\n\n### 比较运算符和逻辑运算符\n比较运算符有的地方也称为关系运算符，包括`==`、`!=`、`<`、`>`、`<=`、`>=`，我相信没有什么好解释的，大家一看就能懂，需要提醒的是比较相等用的是`==`，请注意这里是两个等号，因为`=`是赋值运算符，我们在上面刚刚讲到过，`==`才是比较相等的运算符；比较不相等用的是`!=`，这不同于数学上的不等号，Python 2中曾经使用过`<>`来表示不等关系，大家知道就可以了。比较运算符会产生布尔值，要么是`True`要么是`False`。\n\n&nbsp;\n逻辑运算符有三个，分别是`and`、`or`和`not`。\n\n`and`字面意思是“而且”，所以`and`运算符会连接两个布尔值，如果两个布尔值都是`True`，那么运算的结果就是`True`；左右两边的布尔值有一个是`False`，最终的运算结果就是`False`。相信大家已经想到了，如果`and`左边的布尔值是`False`，不管右边的布尔值是什么，最终的结果都是`False`，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在`and`运算符左边为`False`的情况下，右边的表达式根本不会执行。\n\n&nbsp;\n`or`字面意思是“或者”，所以`or`运算符也会连接两个布尔值，如果两个布尔值有任意一个是`True`，那么最终的结果就是`True`。当然，`or`运算符也是有短路功能的，在它左边的布尔值为`True`的情况下，右边的表达式根本不会执行。\n\n&nbsp;\n`not`运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，`not`后面的布尔值如果是`True`，运算结果就是`False`；而`not`后面的布尔值如果是`False`，运算结果就是`True`。\n```python\n\"\"\"\n比较运算符和逻辑运算符的使用\n\"\"\"\nflag0 = 1 == 1\nflag1 = 3 > 2\nflag2 = 2 < 1\nflag3 = flag1 and flag2\nflag4 = flag1 or flag2\nflag5 = not (1 != 2)\nprint('flag0 =', flag0)    # flag0 = True\nprint('flag1 =', flag1)    # flag1 = True\nprint('flag2 =', flag2)    # flag2 = False\nprint('flag3 =', flag3)    # flag3 = False\nprint('flag4 =', flag4)    # flag4 = True\nprint('flag5 =', flag5)    # flag5 = False\n```\n\n> **说明**：比较运算符的优先级高于赋值运算符，所以`flag0 = 1 == 1`\n> 先做`1 == 1`，产生布尔值`True`，再将这个值赋值给变量`flag0`。`print`函数可以输出多个值，多个值之间可以用`,`进行分隔，输出的内容之间默认以空格分开。\n\n### 例子1：华氏温度转换为摄氏温度\n> **提示**：华氏温度到摄氏温度的转换公式为：$C=(F-32)/18$。\n\n```python\n\"\"\"\n将华氏温度转换为摄氏温度\n\"\"\"\nf = float(input('请输入华氏温度: '))\nc = (f - 32) / 1.8\nprint('%.1f华氏度 = %.1f摄氏度' % (f, c))\n```\n\n> **说明**：在使用`print`函数输出时，也可以对字符串内容进行格式化处理，上面`print`函数中的字符串`%.1f`是一个占位符，稍后会由一个`float`类型的变量值替换掉它。同理，如果字符串中有`%d`，后面可以用一个`int`类型的变量值替换掉它，而`%s`会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中`{f:.1f}`和`{c:.1f}`可以先看成是`{f}`和`{c}`，表示输出时会用变量`f`和变量`c`的值替换掉这两个占位符，后面的`:.1f`表示这是一个浮点数，小数点后保留1位有效数字。\n\n```python\nprint(f'{f:.1f}华氏度 = {c:.1f}摄氏度')\n```\n\n### 例子2：输入圆的半径计算周长和面积\n```python\n\"\"\"\n输入半径计算圆的周长和面积\n\"\"\"\nradius = float(input('请输入圆的半径: '))\nperimeter = 2 * 3.1416 * radius\narea = 3.1416 * radius * radius\nprint('周长: %.2f' % perimeter)\nprint('面积: %.2f' % area)\n```\n\n### 例子3：输入年份判断是不是闰年。\n```python\n\"\"\"\n输入年份 如果是闰年输出True 否则输出False\n\"\"\"\nyear = int(input('请输入年份: '))\nis_leap = year % 4 == 0 and year % 100 != 0 or year % 400 == 0\nprint(is_leap)\n```\n\n> **说明**：比较运算符会产生布尔值，而逻辑运算符`and`和`or`会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出`True`，平年输出`False`。\n\n\n\n","slug":"Python语言元素","published":1,"updated":"2021-12-30T08:57:23.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv4200118ou14wxj673x","content":"<p>作为一个程序员，可能经常会被外行人问到两个问题，其一是“什么是（计算机）程序”，其二是“写（计算机）程序能做什么”，这里我们先对两个问题做一个回答。<strong>程序是指令的集合</strong>，<strong>写程序就是用指令控制计算机做我们想让它做的事情</strong>。那么，为什么要用Python语言来写程序呢？因为<strong>Python语言简单优雅</strong>，相比C、C++、Java这样的编程语言，<strong>Python对初学者更加友好</strong>，当然这并不是说Python不像其他语言那样强大，<strong>Python几乎是无所不能的</strong>，在第一节课的时候，我们就说到了Python可以用于服务器程序开发、云平台开发、数据分析、机器学习等各个领域。当然，Python语言还可以用来粘合其他语言开发的系统，所以也经常被戏称为“<strong>胶水语言</strong>”。</p>\n<hr>\n<h2 id=\"一些计算机常识\"><a href=\"#一些计算机常识\" class=\"headerlink\" title=\"一些计算机常识\"></a>一些计算机常识</h2><p>在开始系统的学习编程之前，我们先来科普一些计算机的基础知识。计算机的硬件系统通常由五大部件构成，包括：<strong>运算器</strong>、<strong>控制器</strong>、<strong>存储器</strong>、<strong>输入设备</strong>和<strong>输出设备</strong>。其中，运算器和控制器放在一起就是我们常说的<strong>中央处理器</strong>，它的功能是执行各种运算和控制指令。刚才我们提到过程序是指令的集合，写程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。目前，我们使用的计算机基本都是“冯·诺依曼体系结构”的计算机，这种计算机有两个关键点：一是要将<strong>存储设备与中央处理器分开</strong>；二是将<strong>数据以二进制方式编码</strong>。</p>\n<p>&nbsp;<br>二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法本质是一样的。人类因为有十根手指所以使用了十进制，因为在计数时十根手指用完之后就只能用进位的方式来表示更大的数值。当然凡事都有例外，玛雅人可能是因为长年光着脚的原因，把脚趾头也都用上了，于是他们使用了二十进制的计数法。在这种计数法的指导下，玛雅人的历法就与我们平常使用的历法并不相同。按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“的荒诞说法。今天很多人都在猜测，玛雅文明之所以发展缓慢跟使用了二十进制是有关系的。对于计算机来说，二进制在物理器件上最容易实现的，因为可以用高电压表示1，用低电压表示0。不是所有写程序的人都需要知道十进制与二进制如何转换，大多数时候我们即便不了解这些知识也能写出程序，但是我们必须要知道<strong>计算机是使用二进制计数的</strong>，不管什么<strong>数据到了计算机内存中都是以二进制形式存在的</strong>。</p>\n<h2 id=\"变量和类型\"><a href=\"#变量和类型\" class=\"headerlink\" title=\"变量和类型\"></a>变量和类型</h2><p>要想在计算机内存中保存数据，首先就得说一说变量这个概念。在编程语言中，<strong>变量是数据的载体</strong>，简单的说就是一块用来保存数据的内存空间，<strong>变量的值可以被读取和修改</strong>，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，最常见的就是数值，除了数值之外还有文本、图形、音频、视频等各种各样的数据。虽然数据在计算机中都是以二进制形态存在的，但是我们可以用不同类型的变量来表示数据类型的差异。<strong>Python中的数据类型很多</strong>，而且也<strong>允许我们自定义新的数据类型</strong>（这一点在后面会讲到），这里我们需要先了解几种常用的数据类型。</p>\n<ul>\n<li><strong>整型（int）</strong>：Python中可以处理任意大小的整数，而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li>\n<li><strong>浮点型（float）</strong>：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li>\n<li><strong>字符串型（str）</strong>：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>。</li>\n<li><strong>布尔型（bool）</strong>：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。</li>\n<li><strong>复数型</strong>：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li>\n</ul>\n<h3 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h3><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有自己的名字一样。在Python中，变量命名需要遵循以下这些规则，这些规则又分为必须遵守的硬性规则和建议遵守的非硬性规则。</p>\n<p>&nbsp;<br>硬性规则：</p>\n<ol>\n<li>变量名由<strong>字母</strong>、数字和<strong>下划线</strong>构成，数字不能开头。需要说明的是，这里说的字母指的是Unicode字符，Unicode称为万国码，囊括了世界上大部分的文字系统，这也就意味着中文、日文、希腊字母等都可以作为变量名中的字符，但是像<code>!</code>、<code>@</code>、<code>#</code>这些特殊字符是不能出现在变量名中的，而且我们强烈建议大家<strong>尽可能使用英文字母</strong>。</li>\n<li><strong>大小写敏感</strong>，简单的说就是大写的<code>A</code>和小写的<code>a</code>是两个不同的变量。</li>\n<li>变量名<strong>不要跟Python语言的关键字</strong>（有特殊含义的单词，后面会讲到）和<strong>保留字</strong>（如函数、模块等的名字）<strong>发生重名的冲突</strong>。</li>\n</ol>\n<p>&nbsp;<br>非硬性规则：</p>\n<ol>\n<li>变量名通常使用小写英文字母，多个单词用下划线进行连接。</li>\n<li>受保护的变量用单个下划线开头（后面会讲到）。</li>\n<li>私有的变量用两个下划线开头（后面会讲到）。</li>\n</ol>\n<p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到<strong>见名知意</strong>也非常重要。</p>\n<h3 id=\"变量的使用\"><a href=\"#变量的使用\" class=\"headerlink\" title=\"变量的使用\"></a>变量的使用</h3><p>下面通过几个例子来说明变量的类型和变量使用。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n使用变量保存数据并进行加减乘除运算\n\"\"\"</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">45</span>          <span class=\"token comment\" spellcheck=\"true\"># 变量a保存了45</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">12</span>          <span class=\"token comment\" spellcheck=\"true\"># 变量b保存了12</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># 57</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># 33</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># 540</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># 3.75</span>\n</code></pre>\n<p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n使用type()检查变量的类型\n\"\"\"</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">12.345</span>\nc <span class=\"token operator\">=</span> <span class=\"token string\">'hello, world'</span>\nd <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># &lt;class 'int'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># &lt;class 'float'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># &lt;class 'str'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># &lt;class 'bool'></span>\n</code></pre>\n<p>不同类型的变量可以相互转换，这一点可以通过Python的内置函数来实现。</p>\n<ul>\n<li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li>\n<li><code>float()</code>：将一个字符串转换成浮点数。</li>\n<li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li>\n<li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li>\n<li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li>\n</ul>\n<p>下面的例子为大家演示了Python中的类型转换。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nPython中的类型转换\n\"\"\"</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">12.345</span>\nc <span class=\"token operator\">=</span> <span class=\"token string\">'hello, world'</span>\nd <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token comment\" spellcheck=\"true\"># 整数转成浮点数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>float<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># 100.0</span>\n<span class=\"token comment\" spellcheck=\"true\"># 浮点型转成字符串 (输出字符串时不会看到引号哟)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\" spellcheck=\"true\"># 12.345</span>\n<span class=\"token comment\" spellcheck=\"true\"># 字符串转成布尔型 (有内容的字符串都会变成True)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bool<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># True</span>\n<span class=\"token comment\" spellcheck=\"true\"># 布尔型转成整数 (True会转成1，False会转成0)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\" spellcheck=\"true\"># 1</span>\n<span class=\"token comment\" spellcheck=\"true\"># 将整数变成对应的字符 (97刚好对应字符表中的字母a)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chr<span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># a</span>\n<span class=\"token comment\" spellcheck=\"true\"># 将字符转成整数 (Python中字符和字符串表示法相同)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ord<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># 97</span>\n</code></pre>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/python_yunsuanfu.png\"></p>\n<blockquote>\n<p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p>\n</blockquote>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>Python中的算术运算符非常丰富，除了大家最为熟悉的加减乘除之外，还有整除运算符、求模（求余数）运算符和求幂运算符。下面的例子为大家展示了算术运算符的使用。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n算术运算符\n\"\"\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span> <span class=\"token operator\">+</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># 加法运算 444</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span> <span class=\"token operator\">-</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># 减法运算 198</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span> <span class=\"token operator\">*</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># 乘法运算 39483</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span> <span class=\"token operator\">/</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># 除法运算 2.6097560975609757</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span> <span class=\"token operator\">%</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># 求模运算 75</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span> <span class=\"token operator\">//</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># 整除运算 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\" spellcheck=\"true\"># 求幂运算 103041</span>\n</code></pre>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n赋值运算符和复合赋值运算符\n\"\"\"</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\na <span class=\"token operator\">+=</span> b        <span class=\"token comment\" spellcheck=\"true\"># 相当于：a = a + b 13</span>\na <span class=\"token operator\">*=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">2</span>    <span class=\"token comment\" spellcheck=\"true\"># 相当于：a = a * (a + 2) 13*(13+2)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>      <span class=\"token comment\" spellcheck=\"true\"># 算一下这里会输出什么 </span>\n</code></pre>\n<h3 id=\"比较运算符和逻辑运算符\"><a href=\"#比较运算符和逻辑运算符\" class=\"headerlink\" title=\"比较运算符和逻辑运算符\"></a>比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，需要提醒的是比较相等用的是<code>==</code>，请注意这里是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的运算符；比较不相等用的是<code>!=</code>，这不同于数学上的不等号，Python 2中曾经使用过<code>&lt;&gt;</code>来表示不等关系，大家知道就可以了。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p>\n<p>&nbsp;<br>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。</p>\n<p><code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。</p>\n<p>&nbsp;<br><code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。</p>\n<p>&nbsp;<br><code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，<code>not</code>后面的布尔值如果是<code>True</code>，运算结果就是<code>False</code>；而<code>not</code>后面的布尔值如果是<code>False</code>，运算结果就是<code>True</code>。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n比较运算符和逻辑运算符的使用\n\"\"\"</span>\nflag0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\nflag1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span>\nflag2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\nflag3 <span class=\"token operator\">=</span> flag1 <span class=\"token operator\">and</span> flag2\nflag4 <span class=\"token operator\">=</span> flag1 <span class=\"token operator\">or</span> flag2\nflag5 <span class=\"token operator\">=</span> <span class=\"token operator\">not</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag0 ='</span><span class=\"token punctuation\">,</span> flag0<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># flag0 = True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag1 ='</span><span class=\"token punctuation\">,</span> flag1<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># flag1 = True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag2 ='</span><span class=\"token punctuation\">,</span> flag2<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># flag2 = False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag3 ='</span><span class=\"token punctuation\">,</span> flag3<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># flag3 = False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag4 ='</span><span class=\"token punctuation\">,</span> flag4<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># flag4 = True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag5 ='</span><span class=\"token punctuation\">,</span> flag5<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># flag5 = False</span>\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code><br>先做<code>1 == 1</code>，产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p>\n</blockquote>\n<h3 id=\"例子1：华氏温度转换为摄氏温度\"><a href=\"#例子1：华氏温度转换为摄氏温度\" class=\"headerlink\" title=\"例子1：华氏温度转换为摄氏温度\"></a>例子1：华氏温度转换为摄氏温度</h3><blockquote>\n<p><strong>提示</strong>：华氏温度到摄氏温度的转换公式为：$C=(F-32)/18$。</p>\n</blockquote>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n将华氏温度转换为摄氏温度\n\"\"\"</span>\nf <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'请输入华氏温度: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1.8</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.1f华氏度 = %.1f摄氏度'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：在使用<code>print</code>函数输出时，也可以对字符串内容进行格式化处理，上面<code>print</code>函数中的字符串<code>%.1f</code>是一个占位符，稍后会由一个<code>float</code>类型的变量值替换掉它。同理，如果字符串中有<code>%d</code>，后面可以用一个<code>int</code>类型的变量值替换掉它，而<code>%s</code>会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中<code>&#123;f:.1f&#125;</code>和<code>&#123;c:.1f&#125;</code>可以先看成是<code>&#123;f&#125;</code>和<code>&#123;c&#125;</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p>\n</blockquote>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">'{f:.1f}华氏度 = {c:.1f}摄氏度'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"例子2：输入圆的半径计算周长和面积\"><a href=\"#例子2：输入圆的半径计算周长和面积\" class=\"headerlink\" title=\"例子2：输入圆的半径计算周长和面积\"></a>例子2：输入圆的半径计算周长和面积</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n输入半径计算圆的周长和面积\n\"\"\"</span>\nradius <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'请输入圆的半径: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nperimeter <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.1416</span> <span class=\"token operator\">*</span> radius\narea <span class=\"token operator\">=</span> <span class=\"token number\">3.1416</span> <span class=\"token operator\">*</span> radius <span class=\"token operator\">*</span> radius\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'周长: %.2f'</span> <span class=\"token operator\">%</span> perimeter<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'面积: %.2f'</span> <span class=\"token operator\">%</span> area<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"例子3：输入年份判断是不是闰年。\"><a href=\"#例子3：输入年份判断是不是闰年。\" class=\"headerlink\" title=\"例子3：输入年份判断是不是闰年。\"></a>例子3：输入年份判断是不是闰年。</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n输入年份 如果是闰年输出True 否则输出False\n\"\"\"</span>\nyear <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'请输入年份: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nis_leap <span class=\"token operator\">=</span> year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>is_leap<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<p>作为一个程序员，可能经常会被外行人问到两个问题，其一是“什么是（计算机）程序”，其二是“写（计算机）程序能做什么”，这里我们先对两个问题做一个回答。<strong>程序是指令的集合</strong>，<strong>写程序就是用指令控制计算机做我们想让它做的事情</strong>。那么，为什么要用Python语言来写程序呢？因为<strong>Python语言简单优雅</strong>，相比C、C++、Java这样的编程语言，<strong>Python对初学者更加友好</strong>，当然这并不是说Python不像其他语言那样强大，<strong>Python几乎是无所不能的</strong>，在第一节课的时候，我们就说到了Python可以用于服务器程序开发、云平台开发、数据分析、机器学习等各个领域。当然，Python语言还可以用来粘合其他语言开发的系统，所以也经常被戏称为“<strong>胶水语言</strong>”。</p>\n<hr>\n<h2 id=\"一些计算机常识\"><a href=\"#一些计算机常识\" class=\"headerlink\" title=\"一些计算机常识\"></a>一些计算机常识</h2><p>在开始系统的学习编程之前，我们先来科普一些计算机的基础知识。计算机的硬件系统通常由五大部件构成，包括：<strong>运算器</strong>、<strong>控制器</strong>、<strong>存储器</strong>、<strong>输入设备</strong>和<strong>输出设备</strong>。其中，运算器和控制器放在一起就是我们常说的<strong>中央处理器</strong>，它的功能是执行各种运算和控制指令。刚才我们提到过程序是指令的集合，写程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。目前，我们使用的计算机基本都是“冯·诺依曼体系结构”的计算机，这种计算机有两个关键点：一是要将<strong>存储设备与中央处理器分开</strong>；二是将<strong>数据以二进制方式编码</strong>。</p>\n<p>&nbsp;<br>二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法本质是一样的。人类因为有十根手指所以使用了十进制，因为在计数时十根手指用完之后就只能用进位的方式来表示更大的数值。当然凡事都有例外，玛雅人可能是因为长年光着脚的原因，把脚趾头也都用上了，于是他们使用了二十进制的计数法。在这种计数法的指导下，玛雅人的历法就与我们平常使用的历法并不相同。按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“的荒诞说法。今天很多人都在猜测，玛雅文明之所以发展缓慢跟使用了二十进制是有关系的。对于计算机来说，二进制在物理器件上最容易实现的，因为可以用高电压表示1，用低电压表示0。不是所有写程序的人都需要知道十进制与二进制如何转换，大多数时候我们即便不了解这些知识也能写出程序，但是我们必须要知道<strong>计算机是使用二进制计数的</strong>，不管什么<strong>数据到了计算机内存中都是以二进制形式存在的</strong>。</p>\n<h2 id=\"变量和类型\"><a href=\"#变量和类型\" class=\"headerlink\" title=\"变量和类型\"></a>变量和类型</h2><p>要想在计算机内存中保存数据，首先就得说一说变量这个概念。在编程语言中，<strong>变量是数据的载体</strong>，简单的说就是一块用来保存数据的内存空间，<strong>变量的值可以被读取和修改</strong>，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，最常见的就是数值，除了数值之外还有文本、图形、音频、视频等各种各样的数据。虽然数据在计算机中都是以二进制形态存在的，但是我们可以用不同类型的变量来表示数据类型的差异。<strong>Python中的数据类型很多</strong>，而且也<strong>允许我们自定义新的数据类型</strong>（这一点在后面会讲到），这里我们需要先了解几种常用的数据类型。</p>\n<ul>\n<li><strong>整型（int）</strong>：Python中可以处理任意大小的整数，而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li>\n<li><strong>浮点型（float）</strong>：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li>\n<li><strong>字符串型（str）</strong>：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>。</li>\n<li><strong>布尔型（bool）</strong>：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。</li>\n<li><strong>复数型</strong>：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li>\n</ul>\n<h3 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h3><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有自己的名字一样。在Python中，变量命名需要遵循以下这些规则，这些规则又分为必须遵守的硬性规则和建议遵守的非硬性规则。</p>\n<p>&nbsp;<br>硬性规则：</p>\n<ol>\n<li>变量名由<strong>字母</strong>、数字和<strong>下划线</strong>构成，数字不能开头。需要说明的是，这里说的字母指的是Unicode字符，Unicode称为万国码，囊括了世界上大部分的文字系统，这也就意味着中文、日文、希腊字母等都可以作为变量名中的字符，但是像<code>!</code>、<code>@</code>、<code>#</code>这些特殊字符是不能出现在变量名中的，而且我们强烈建议大家<strong>尽可能使用英文字母</strong>。</li>\n<li><strong>大小写敏感</strong>，简单的说就是大写的<code>A</code>和小写的<code>a</code>是两个不同的变量。</li>\n<li>变量名<strong>不要跟Python语言的关键字</strong>（有特殊含义的单词，后面会讲到）和<strong>保留字</strong>（如函数、模块等的名字）<strong>发生重名的冲突</strong>。</li>\n</ol>\n<p>&nbsp;<br>非硬性规则：</p>\n<ol>\n<li>变量名通常使用小写英文字母，多个单词用下划线进行连接。</li>\n<li>受保护的变量用单个下划线开头（后面会讲到）。</li>\n<li>私有的变量用两个下划线开头（后面会讲到）。</li>\n</ol>\n<p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到<strong>见名知意</strong>也非常重要。</p>\n<h3 id=\"变量的使用\"><a href=\"#变量的使用\" class=\"headerlink\" title=\"变量的使用\"></a>变量的使用</h3><p>下面通过几个例子来说明变量的类型和变量使用。</p>\n<pre><code class=\"python\">&quot;&quot;&quot;\n使用变量保存数据并进行加减乘除运算\n&quot;&quot;&quot;\na = 45          # 变量a保存了45\nb = 12          # 变量b保存了12\nprint(a + b)    # 57\nprint(a - b)    # 33\nprint(a * b)    # 540\nprint(a / b)    # 3.75\n</code></pre>\n<p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。</p>\n<pre><code class=\"python\">&quot;&quot;&quot;\n使用type()检查变量的类型\n&quot;&quot;&quot;\na = 100\nb = 12.345\nc = &#39;hello, world&#39;\nd = True\nprint(type(a))    # &lt;class &#39;int&#39;&gt;\nprint(type(b))    # &lt;class &#39;float&#39;&gt;\nprint(type(c))    # &lt;class &#39;str&#39;&gt;\nprint(type(d))    # &lt;class &#39;bool&#39;&gt;\n</code></pre>\n<p>不同类型的变量可以相互转换，这一点可以通过Python的内置函数来实现。</p>\n<ul>\n<li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li>\n<li><code>float()</code>：将一个字符串转换成浮点数。</li>\n<li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li>\n<li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li>\n<li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li>\n</ul>\n<p>下面的例子为大家演示了Python中的类型转换。</p>\n<pre><code class=\"python\">&quot;&quot;&quot;\nPython中的类型转换\n&quot;&quot;&quot;\na = 100\nb = 12.345\nc = &#39;hello, world&#39;\nd = True\n# 整数转成浮点数\nprint(float(a))    # 100.0\n# 浮点型转成字符串 (输出字符串时不会看到引号哟)\nprint(str(b))      # 12.345\n# 字符串转成布尔型 (有内容的字符串都会变成True)\nprint(bool(c))     # True\n# 布尔型转成整数 (True会转成1，False会转成0)\nprint(int(d))      # 1\n# 将整数变成对应的字符 (97刚好对应字符表中的字母a)\nprint(chr(97))     # a\n# 将字符转成整数 (Python中字符和字符串表示法相同)\nprint(ord(&#39;a&#39;))    # 97\n</code></pre>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/python_yunsuanfu.png\"></p>\n<blockquote>\n<p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p>\n</blockquote>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>Python中的算术运算符非常丰富，除了大家最为熟悉的加减乘除之外，还有整除运算符、求模（求余数）运算符和求幂运算符。下面的例子为大家展示了算术运算符的使用。</p>\n<pre><code class=\"python\">&quot;&quot;&quot;\n算术运算符\n&quot;&quot;&quot;\nprint(321 + 123)     # 加法运算 444\nprint(321 - 123)     # 减法运算 198\nprint(321 * 123)     # 乘法运算 39483\nprint(321 / 123)     # 除法运算 2.6097560975609757\nprint(321 % 123)     # 求模运算 75\nprint(321 // 123)    # 整除运算 2\nprint(321 ** 2)      # 求幂运算 103041\n</code></pre>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p>\n<pre><code class=\"python\">&quot;&quot;&quot;\n赋值运算符和复合赋值运算符\n&quot;&quot;&quot;\na = 10\nb = 3\na += b        # 相当于：a = a + b 13\na *= a + 2    # 相当于：a = a * (a + 2) 13*(13+2)\nprint(a)      # 算一下这里会输出什么 \n</code></pre>\n<h3 id=\"比较运算符和逻辑运算符\"><a href=\"#比较运算符和逻辑运算符\" class=\"headerlink\" title=\"比较运算符和逻辑运算符\"></a>比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，需要提醒的是比较相等用的是<code>==</code>，请注意这里是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的运算符；比较不相等用的是<code>!=</code>，这不同于数学上的不等号，Python 2中曾经使用过<code>&lt;&gt;</code>来表示不等关系，大家知道就可以了。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p>\n<p>&nbsp;<br>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。</p>\n<p><code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。</p>\n<p>&nbsp;<br><code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。</p>\n<p>&nbsp;<br><code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，<code>not</code>后面的布尔值如果是<code>True</code>，运算结果就是<code>False</code>；而<code>not</code>后面的布尔值如果是<code>False</code>，运算结果就是<code>True</code>。</p>\n<pre><code class=\"python\">&quot;&quot;&quot;\n比较运算符和逻辑运算符的使用\n&quot;&quot;&quot;\nflag0 = 1 == 1\nflag1 = 3 &gt; 2\nflag2 = 2 &lt; 1\nflag3 = flag1 and flag2\nflag4 = flag1 or flag2\nflag5 = not (1 != 2)\nprint(&#39;flag0 =&#39;, flag0)    # flag0 = True\nprint(&#39;flag1 =&#39;, flag1)    # flag1 = True\nprint(&#39;flag2 =&#39;, flag2)    # flag2 = False\nprint(&#39;flag3 =&#39;, flag3)    # flag3 = False\nprint(&#39;flag4 =&#39;, flag4)    # flag4 = True\nprint(&#39;flag5 =&#39;, flag5)    # flag5 = False\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code><br>先做<code>1 == 1</code>，产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p>\n</blockquote>\n<h3 id=\"例子1：华氏温度转换为摄氏温度\"><a href=\"#例子1：华氏温度转换为摄氏温度\" class=\"headerlink\" title=\"例子1：华氏温度转换为摄氏温度\"></a>例子1：华氏温度转换为摄氏温度</h3><blockquote>\n<p><strong>提示</strong>：华氏温度到摄氏温度的转换公式为：$C=(F-32)/18$。</p>\n</blockquote>\n<pre><code class=\"python\">&quot;&quot;&quot;\n将华氏温度转换为摄氏温度\n&quot;&quot;&quot;\nf = float(input(&#39;请输入华氏温度: &#39;))\nc = (f - 32) / 1.8\nprint(&#39;%.1f华氏度 = %.1f摄氏度&#39; % (f, c))\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：在使用<code>print</code>函数输出时，也可以对字符串内容进行格式化处理，上面<code>print</code>函数中的字符串<code>%.1f</code>是一个占位符，稍后会由一个<code>float</code>类型的变量值替换掉它。同理，如果字符串中有<code>%d</code>，后面可以用一个<code>int</code>类型的变量值替换掉它，而<code>%s</code>会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中<code>&#123;f:.1f&#125;</code>和<code>&#123;c:.1f&#125;</code>可以先看成是<code>&#123;f&#125;</code>和<code>&#123;c&#125;</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p>\n</blockquote>\n<pre><code class=\"python\">print(f&#39;&#123;f:.1f&#125;华氏度 = &#123;c:.1f&#125;摄氏度&#39;)\n</code></pre>\n<h3 id=\"例子2：输入圆的半径计算周长和面积\"><a href=\"#例子2：输入圆的半径计算周长和面积\" class=\"headerlink\" title=\"例子2：输入圆的半径计算周长和面积\"></a>例子2：输入圆的半径计算周长和面积</h3><pre><code class=\"python\">&quot;&quot;&quot;\n输入半径计算圆的周长和面积\n&quot;&quot;&quot;\nradius = float(input(&#39;请输入圆的半径: &#39;))\nperimeter = 2 * 3.1416 * radius\narea = 3.1416 * radius * radius\nprint(&#39;周长: %.2f&#39; % perimeter)\nprint(&#39;面积: %.2f&#39; % area)\n</code></pre>\n<h3 id=\"例子3：输入年份判断是不是闰年。\"><a href=\"#例子3：输入年份判断是不是闰年。\" class=\"headerlink\" title=\"例子3：输入年份判断是不是闰年。\"></a>例子3：输入年份判断是不是闰年。</h3><pre><code class=\"python\">&quot;&quot;&quot;\n输入年份 如果是闰年输出True 否则输出False\n&quot;&quot;&quot;\nyear = int(input(&#39;请输入年份: &#39;))\nis_leap = year % 4 == 0 and year % 100 != 0 or year % 400 == 0\nprint(is_leap)\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p>\n</blockquote>\n"},{"title":"共用体","date":"2021-12-08T13:51:18.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"## 什么是共用体\n- 和结构体不同的是，结构体的每个成员都是占用一块独立的存储空间，而共用体**所有的成员都占用同一块存储空间**。\n- 和结构体一样，共用体在使用之前必须先定义共用体类型，再定义共用体变量。\n\n\n## 定义共用体类型\n```c\nunion 共用体名{\n    数据类型 属性名称;\n    数据类型 属性名称;\n\t\t......\n};\n```\n\n>  **特点**: 由于所有属性共享同一块内存空间，所以只要其中一个属性发生了改变，其它的属性都会受到影响 \n\n\n## 定义共用体类型变量\n```c\nunion 共用体名 共用体变量名称;\n```\n\n## 示例\n```c\n#include <stdio.h>\nunion Person {\n    char ch;\n    int age;\n};\n\nint main() {\n    union Person p1;\n    printf(\"sizeof = %i\\n\", sizeof(p1)); // 4\n    p1.age = 25;\n    printf(\"p1.age = %i\\n\", p1.age); // 25\n    p1.ch = 'a';\n    printf(\"p1.ch = %c\\n\", p1.ch);   // a\n    printf(\"p1.age = %i\\n\", p1.age); // 97\n    return 0;\n}\n```\n\n## 应用场景\n- 通信中的数据包会用到共用体，因为不知道对方会发送什么样的数据包过来，用共用体定义几种格式的包，收到包之后就可以根据包的格式取出数据。\n- 节约内存。如果有2个很长的数据结构，但不会同时使用，比如一个表示老师，一个表示学生，要统计老师和学生的情况，用结构体就比较浪费内存，这时就可以考虑用共用体来设计。\n- 某些应用需要大量的临时变量，这些变量类型不同，而且会随时更换。而你的堆栈空间有限，不能同时分配那么多临时变量。这时可以使用共用体让这些变量共享同一个内存空间，这些临时变量不用长期保存，用完即丢，和寄存器差不多，不用维护。\n","source":"_posts/共用体.md","raw":"---\ntitle: 共用体\ndate: 2021-12-08 21:51:18\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- C语言\ncategories: \n- 编程语言\n---\n## 什么是共用体\n- 和结构体不同的是，结构体的每个成员都是占用一块独立的存储空间，而共用体**所有的成员都占用同一块存储空间**。\n- 和结构体一样，共用体在使用之前必须先定义共用体类型，再定义共用体变量。\n\n\n## 定义共用体类型\n```c\nunion 共用体名{\n    数据类型 属性名称;\n    数据类型 属性名称;\n\t\t......\n};\n```\n\n>  **特点**: 由于所有属性共享同一块内存空间，所以只要其中一个属性发生了改变，其它的属性都会受到影响 \n\n\n## 定义共用体类型变量\n```c\nunion 共用体名 共用体变量名称;\n```\n\n## 示例\n```c\n#include <stdio.h>\nunion Person {\n    char ch;\n    int age;\n};\n\nint main() {\n    union Person p1;\n    printf(\"sizeof = %i\\n\", sizeof(p1)); // 4\n    p1.age = 25;\n    printf(\"p1.age = %i\\n\", p1.age); // 25\n    p1.ch = 'a';\n    printf(\"p1.ch = %c\\n\", p1.ch);   // a\n    printf(\"p1.age = %i\\n\", p1.age); // 97\n    return 0;\n}\n```\n\n## 应用场景\n- 通信中的数据包会用到共用体，因为不知道对方会发送什么样的数据包过来，用共用体定义几种格式的包，收到包之后就可以根据包的格式取出数据。\n- 节约内存。如果有2个很长的数据结构，但不会同时使用，比如一个表示老师，一个表示学生，要统计老师和学生的情况，用结构体就比较浪费内存，这时就可以考虑用共用体来设计。\n- 某些应用需要大量的临时变量，这些变量类型不同，而且会随时更换。而你的堆栈空间有限，不能同时分配那么多临时变量。这时可以使用共用体让这些变量共享同一个内存空间，这些临时变量不用长期保存，用完即丢，和寄存器差不多，不用维护。\n","slug":"共用体","published":1,"updated":"2021-12-30T08:57:23.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv4500158ou1e4nqajba","content":"<h2 id=\"什么是共用体\"><a href=\"#什么是共用体\" class=\"headerlink\" title=\"什么是共用体\"></a>什么是共用体</h2><ul>\n<li>和结构体不同的是，结构体的每个成员都是占用一块独立的存储空间，而共用体<strong>所有的成员都占用同一块存储空间</strong>。</li>\n<li>和结构体一样，共用体在使用之前必须先定义共用体类型，再定义共用体变量。</li>\n</ul>\n<h2 id=\"定义共用体类型\"><a href=\"#定义共用体类型\" class=\"headerlink\" title=\"定义共用体类型\"></a>定义共用体类型</h2><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">union</span> 共用体名<span class=\"token punctuation\">{</span>\n    数据类型 属性名称<span class=\"token punctuation\">;</span>\n    数据类型 属性名称<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p> <strong>特点</strong>: 由于所有属性共享同一块内存空间，所以只要其中一个属性发生了改变，其它的属性都会受到影响 </p>\n</blockquote>\n<h2 id=\"定义共用体类型变量\"><a href=\"#定义共用体类型变量\" class=\"headerlink\" title=\"定义共用体类型变量\"></a>定义共用体类型变量</h2><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">union</span> 共用体名 共用体变量名称<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">union</span> Person <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">union</span> Person p1<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 4</span>\n    p1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1.age = %i\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 25</span>\n    p1<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1.ch = %c\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// a</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1.age = %i\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 97</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>通信中的数据包会用到共用体，因为不知道对方会发送什么样的数据包过来，用共用体定义几种格式的包，收到包之后就可以根据包的格式取出数据。</li>\n<li>节约内存。如果有2个很长的数据结构，但不会同时使用，比如一个表示老师，一个表示学生，要统计老师和学生的情况，用结构体就比较浪费内存，这时就可以考虑用共用体来设计。</li>\n<li>某些应用需要大量的临时变量，这些变量类型不同，而且会随时更换。而你的堆栈空间有限，不能同时分配那么多临时变量。这时可以使用共用体让这些变量共享同一个内存空间，这些临时变量不用长期保存，用完即丢，和寄存器差不多，不用维护。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"什么是共用体\"><a href=\"#什么是共用体\" class=\"headerlink\" title=\"什么是共用体\"></a>什么是共用体</h2><ul>\n<li>和结构体不同的是，结构体的每个成员都是占用一块独立的存储空间，而共用体<strong>所有的成员都占用同一块存储空间</strong>。</li>\n<li>和结构体一样，共用体在使用之前必须先定义共用体类型，再定义共用体变量。</li>\n</ul>\n<h2 id=\"定义共用体类型\"><a href=\"#定义共用体类型\" class=\"headerlink\" title=\"定义共用体类型\"></a>定义共用体类型</h2><pre><code class=\"c\">union 共用体名&#123;\n    数据类型 属性名称;\n    数据类型 属性名称;\n        ......\n&#125;;\n</code></pre>\n<blockquote>\n<p> <strong>特点</strong>: 由于所有属性共享同一块内存空间，所以只要其中一个属性发生了改变，其它的属性都会受到影响 </p>\n</blockquote>\n<h2 id=\"定义共用体类型变量\"><a href=\"#定义共用体类型变量\" class=\"headerlink\" title=\"定义共用体类型变量\"></a>定义共用体类型变量</h2><pre><code class=\"c\">union 共用体名 共用体变量名称;\n</code></pre>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><pre><code class=\"c\">#include &lt;stdio.h&gt;\nunion Person &#123;\n    char ch;\n    int age;\n&#125;;\n\nint main() &#123;\n    union Person p1;\n    printf(&quot;sizeof = %i\\n&quot;, sizeof(p1)); // 4\n    p1.age = 25;\n    printf(&quot;p1.age = %i\\n&quot;, p1.age); // 25\n    p1.ch = &#39;a&#39;;\n    printf(&quot;p1.ch = %c\\n&quot;, p1.ch);   // a\n    printf(&quot;p1.age = %i\\n&quot;, p1.age); // 97\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>通信中的数据包会用到共用体，因为不知道对方会发送什么样的数据包过来，用共用体定义几种格式的包，收到包之后就可以根据包的格式取出数据。</li>\n<li>节约内存。如果有2个很长的数据结构，但不会同时使用，比如一个表示老师，一个表示学生，要统计老师和学生的情况，用结构体就比较浪费内存，这时就可以考虑用共用体来设计。</li>\n<li>某些应用需要大量的临时变量，这些变量类型不同，而且会随时更换。而你的堆栈空间有限，不能同时分配那么多临时变量。这时可以使用共用体让这些变量共享同一个内存空间，这些临时变量不用长期保存，用完即丢，和寄存器差不多，不用维护。</li>\n</ul>\n"},{"title":"初识Python","date":"2021-12-07T13:54:18.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"\n## Python简介\n\nPython是由荷兰人吉多·范罗苏姆（Guido von Rossum，后面都称呼他为Guido）发明的一种编程语言。\n\n### Python的历史\n1989年圣诞节：Guido开始写Python语言的编译器。\n1991年2月：第一个Python解释器诞生，它是用C语言实现的，可以调用C语言的库函数。\n1994年1月：Python 1.0正式发布。\n2000年10月：Python 2.0发布，Python的整个开发过程更加透明，生态圈开始慢慢形成。\n2008年12月：Python 3.0发布，引入了诸多现代编程语言的新特性，但并不完全兼容之前的Python代码。\n> **说明**：大多数软件的版本号一般分为三段，形如A.B.C，其中A表示大版本号，当软件整体重写升级或出现不向后兼容的改变时，才会增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。\n\n### Python的优缺点\nPython的优点很多，简单的可以总结为以下几点。\n\n1. 简单明了，学习曲线低，比很多编程语言都容易上手。\n2. 开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。\n3. 解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。\n4. 对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。\n5. 代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。\n\n\n\nPython的缺点主要集中在以下几点。\n\n1. 执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。\n2. 代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。\n3. 在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。\n\n### Python的应用领域\n目前Python在**Web服务器应用开发**、云基础设施开发、**网络数据采集**（爬虫）、**数据分析**、量化交易、**机器学习**、**自动化测试**、**自动化运维**等领域都有用武之地。\n\n### 安装Python环境\n想要开始你的Python编程之旅，首先得在计算机上安装Python环境，简单的说就是得安装运行Python程序的工具，通常也称之为Python解释器。我们强烈建议大家安装Python 3的环境，很明显它是目前更好的选择。\n\n#### Windows环境\n可以在[Python官方网站](https://www.python.org/)找到[下载链接](https://www.python.org/downloads/)并下载Python 3的安装程序。对于Windows操作系统，可以下载“executable installer”。\n\n&nbsp;\n双击运行刚才下载的安装程序，会打开Python环境的安装向导。在执行安装向导的时候，记得勾选“Add Python 3.x to PATH”选项，这个选项会帮助我们将Python的解释器添加到PATH环境变量中（不理解没关系，照做就行）。安装完成后可以打开Windows的“命令行提示符”工具并输入下面的命令来检查Python解释器是否安装成功。\n```bash\npython --version\n```\n执行上面的命令如果看了Python解释器对应的版本号（如：Python 3.7.6），说明你的安装已经成功了。\n\n#### macOS环境\nmacOS自带了Python 2，可以通过[Python官方网站](https://www.python.org/)提供的下载链接找到适合macOS的“macOS installer”来安装Python 3，安装过程基本不需要做任何勾选，直接点击“下一步”即可。安装完成后，可以通过在“终端”工具中输入`python3`命令来调用Python 3解释器，因为如果直接输入`python`，将会调用Python 2的解释器。\n\n### Python开发工具\n\n#### 交互式环境\n我们打开Windows的“命令行提示符”工具，输入命令`python`然后回车就可以进入到Python的交互式环境中。所谓交互式环境，就是我们输入一行代码回车，代码马上会被执行，如果代码有产出结果，那么结果会被显示在窗口中。例如：\n```bash\nPython 3.7.6\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> 2 * 3\n6\n>>> 2 + 3\n5\n```\n\n> **温馨提示**：使用macOS系统的用户需要打开“终端”工具，输入`python3`\n> 进入交互式环境。\n\n如果希望退出交互式环境，可以在交互式环境中输入`quit()`，如下所示。\n```bash\n>>> quit()\n```\n\n#### 文本编辑器 - Visual Studio Code\nVisual Studio Code（通常简称为VS Code）是一个由微软开发能够在Windows、 Linux和macOS等操作系统上运行的代码编辑神器。它支持语法高亮、自动补全、多点编辑、运行调试等一系列便捷功能，而且能够支持多种编程语言。\n\n#### 集成开发环境 - PyCharm\n如果用Python开发商业项目，我们推荐大家使用专业的工具PyCharm。PyCharm是捷克的JetBrains公司开发的用于Python开发的集成开发环境（IDE)，所谓集成开发环境是说这个工具中提供了代码编写、代码运行和调试、代码分析、代码版本控制等各种功能，因此特别适合商业项目的开发。在[JetBrains的官方网站](https://www.jetbrains.com/)上提供了PyCharm的[下载链接](https://www.jetbrains.com/pycharm/download/#section=windows)，其中社区版（Community）是免费的但功能相对弱小，专业版（Professional）功能非常强大，但需要按年或月付费使用，新用户可以试用30天时间。关于如何使用PyCharm来进行Python开发，在后续的课程中进行讲解。\n\n### hello, world\n按照行业惯例，我们学习任何一门编程语言写的第一个程序都是输出`hello, world`，因为这段代码是伟大的丹尼斯·里奇（C语言之父，和肯·汤普森一起开发了Unix操作系统）和布莱恩·柯尼汉（awk语言的发明者）在他们的不朽著作_The C Programming Language_中写的第一段代码。\n```python\nprint('hello, world')\n```\n\n#### 运行程序\n我们将上面的代码命名为`hello.py`。如果你使用的是Windows操作系统，接下来可以在你保存代码的目录下先按住键盘上的`shift`键再点击鼠标右键，这时候鼠标右键菜单中会出现“命令行提示符”选项，点击该选项就可以打开“命令行提示符”工具，我们输入下面的命令。\n```bash\npython hello.py\n```\n\n> **提醒**：我们也可以在任意位置打开“命令行提示符”或“终端”工具，然后将需要执行的Python代码通过拖拽的方式拖入到“命令行提示符”或“终端”中，这样相当于指定了文件的绝对路径来运行该文件中的Python代码。再次提醒，macOS系统要通过`python3`命令来运行该程序。\n\n你可以尝试将上面程序单引号中的`hello, world`换成其他内容；你也可以尝试着多写几个这样的语句，看看会运行出怎样的结果。需要提醒大家，上面代码中的`print('hello, world')`就是一条完整的语句，我们用Python写程序，最好**每一行代码中只有一条语句**。虽然使用`;`分隔符可以将多个语句写在一行代码中，但是最好不要这样做，因为代码会变得非常难看。\n\n### 注释你的代码\n注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。简单的说，**注释会让代码更容易看懂但不会影响程序的执行结果**。\n\n&nbsp;\nPython中有两种形式的注释：\n1. 单行注释：以#和空格开头，可以注释掉从`#`开始后面一整行的内容。\n2. 多行注释：三个引号开头，三个引号结尾，通常用于添加多行说明性内容。\n\n```python\n\"\"\"\n第一个Python程序 - hello, world\nVersion: 0.1\nAuthor: chengbudong\n\"\"\"\n# print('hello, world')\nprint(\"你好，世界！\")\n```\n","source":"_posts/初识Python.md","raw":"---\ntitle: 初识Python\ndate: 2021-12-07 21:54:18\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- Python\ncategories: \n- 编程语言\n---\n\n## Python简介\n\nPython是由荷兰人吉多·范罗苏姆（Guido von Rossum，后面都称呼他为Guido）发明的一种编程语言。\n\n### Python的历史\n1989年圣诞节：Guido开始写Python语言的编译器。\n1991年2月：第一个Python解释器诞生，它是用C语言实现的，可以调用C语言的库函数。\n1994年1月：Python 1.0正式发布。\n2000年10月：Python 2.0发布，Python的整个开发过程更加透明，生态圈开始慢慢形成。\n2008年12月：Python 3.0发布，引入了诸多现代编程语言的新特性，但并不完全兼容之前的Python代码。\n> **说明**：大多数软件的版本号一般分为三段，形如A.B.C，其中A表示大版本号，当软件整体重写升级或出现不向后兼容的改变时，才会增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。\n\n### Python的优缺点\nPython的优点很多，简单的可以总结为以下几点。\n\n1. 简单明了，学习曲线低，比很多编程语言都容易上手。\n2. 开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。\n3. 解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。\n4. 对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。\n5. 代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。\n\n\n\nPython的缺点主要集中在以下几点。\n\n1. 执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。\n2. 代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。\n3. 在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。\n\n### Python的应用领域\n目前Python在**Web服务器应用开发**、云基础设施开发、**网络数据采集**（爬虫）、**数据分析**、量化交易、**机器学习**、**自动化测试**、**自动化运维**等领域都有用武之地。\n\n### 安装Python环境\n想要开始你的Python编程之旅，首先得在计算机上安装Python环境，简单的说就是得安装运行Python程序的工具，通常也称之为Python解释器。我们强烈建议大家安装Python 3的环境，很明显它是目前更好的选择。\n\n#### Windows环境\n可以在[Python官方网站](https://www.python.org/)找到[下载链接](https://www.python.org/downloads/)并下载Python 3的安装程序。对于Windows操作系统，可以下载“executable installer”。\n\n&nbsp;\n双击运行刚才下载的安装程序，会打开Python环境的安装向导。在执行安装向导的时候，记得勾选“Add Python 3.x to PATH”选项，这个选项会帮助我们将Python的解释器添加到PATH环境变量中（不理解没关系，照做就行）。安装完成后可以打开Windows的“命令行提示符”工具并输入下面的命令来检查Python解释器是否安装成功。\n```bash\npython --version\n```\n执行上面的命令如果看了Python解释器对应的版本号（如：Python 3.7.6），说明你的安装已经成功了。\n\n#### macOS环境\nmacOS自带了Python 2，可以通过[Python官方网站](https://www.python.org/)提供的下载链接找到适合macOS的“macOS installer”来安装Python 3，安装过程基本不需要做任何勾选，直接点击“下一步”即可。安装完成后，可以通过在“终端”工具中输入`python3`命令来调用Python 3解释器，因为如果直接输入`python`，将会调用Python 2的解释器。\n\n### Python开发工具\n\n#### 交互式环境\n我们打开Windows的“命令行提示符”工具，输入命令`python`然后回车就可以进入到Python的交互式环境中。所谓交互式环境，就是我们输入一行代码回车，代码马上会被执行，如果代码有产出结果，那么结果会被显示在窗口中。例如：\n```bash\nPython 3.7.6\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> 2 * 3\n6\n>>> 2 + 3\n5\n```\n\n> **温馨提示**：使用macOS系统的用户需要打开“终端”工具，输入`python3`\n> 进入交互式环境。\n\n如果希望退出交互式环境，可以在交互式环境中输入`quit()`，如下所示。\n```bash\n>>> quit()\n```\n\n#### 文本编辑器 - Visual Studio Code\nVisual Studio Code（通常简称为VS Code）是一个由微软开发能够在Windows、 Linux和macOS等操作系统上运行的代码编辑神器。它支持语法高亮、自动补全、多点编辑、运行调试等一系列便捷功能，而且能够支持多种编程语言。\n\n#### 集成开发环境 - PyCharm\n如果用Python开发商业项目，我们推荐大家使用专业的工具PyCharm。PyCharm是捷克的JetBrains公司开发的用于Python开发的集成开发环境（IDE)，所谓集成开发环境是说这个工具中提供了代码编写、代码运行和调试、代码分析、代码版本控制等各种功能，因此特别适合商业项目的开发。在[JetBrains的官方网站](https://www.jetbrains.com/)上提供了PyCharm的[下载链接](https://www.jetbrains.com/pycharm/download/#section=windows)，其中社区版（Community）是免费的但功能相对弱小，专业版（Professional）功能非常强大，但需要按年或月付费使用，新用户可以试用30天时间。关于如何使用PyCharm来进行Python开发，在后续的课程中进行讲解。\n\n### hello, world\n按照行业惯例，我们学习任何一门编程语言写的第一个程序都是输出`hello, world`，因为这段代码是伟大的丹尼斯·里奇（C语言之父，和肯·汤普森一起开发了Unix操作系统）和布莱恩·柯尼汉（awk语言的发明者）在他们的不朽著作_The C Programming Language_中写的第一段代码。\n```python\nprint('hello, world')\n```\n\n#### 运行程序\n我们将上面的代码命名为`hello.py`。如果你使用的是Windows操作系统，接下来可以在你保存代码的目录下先按住键盘上的`shift`键再点击鼠标右键，这时候鼠标右键菜单中会出现“命令行提示符”选项，点击该选项就可以打开“命令行提示符”工具，我们输入下面的命令。\n```bash\npython hello.py\n```\n\n> **提醒**：我们也可以在任意位置打开“命令行提示符”或“终端”工具，然后将需要执行的Python代码通过拖拽的方式拖入到“命令行提示符”或“终端”中，这样相当于指定了文件的绝对路径来运行该文件中的Python代码。再次提醒，macOS系统要通过`python3`命令来运行该程序。\n\n你可以尝试将上面程序单引号中的`hello, world`换成其他内容；你也可以尝试着多写几个这样的语句，看看会运行出怎样的结果。需要提醒大家，上面代码中的`print('hello, world')`就是一条完整的语句，我们用Python写程序，最好**每一行代码中只有一条语句**。虽然使用`;`分隔符可以将多个语句写在一行代码中，但是最好不要这样做，因为代码会变得非常难看。\n\n### 注释你的代码\n注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。简单的说，**注释会让代码更容易看懂但不会影响程序的执行结果**。\n\n&nbsp;\nPython中有两种形式的注释：\n1. 单行注释：以#和空格开头，可以注释掉从`#`开始后面一整行的内容。\n2. 多行注释：三个引号开头，三个引号结尾，通常用于添加多行说明性内容。\n\n```python\n\"\"\"\n第一个Python程序 - hello, world\nVersion: 0.1\nAuthor: chengbudong\n\"\"\"\n# print('hello, world')\nprint(\"你好，世界！\")\n```\n","slug":"初识Python","published":1,"updated":"2021-12-30T08:57:23.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv4600198ou17w9b7muk","content":"<h2 id=\"Python简介\"><a href=\"#Python简介\" class=\"headerlink\" title=\"Python简介\"></a>Python简介</h2><p>Python是由荷兰人吉多·范罗苏姆（Guido von Rossum，后面都称呼他为Guido）发明的一种编程语言。</p>\n<h3 id=\"Python的历史\"><a href=\"#Python的历史\" class=\"headerlink\" title=\"Python的历史\"></a>Python的历史</h3><p>1989年圣诞节：Guido开始写Python语言的编译器。<br>1991年2月：第一个Python解释器诞生，它是用C语言实现的，可以调用C语言的库函数。<br>1994年1月：Python 1.0正式发布。<br>2000年10月：Python 2.0发布，Python的整个开发过程更加透明，生态圈开始慢慢形成。<br>2008年12月：Python 3.0发布，引入了诸多现代编程语言的新特性，但并不完全兼容之前的Python代码。</p>\n<blockquote>\n<p><strong>说明</strong>：大多数软件的版本号一般分为三段，形如A.B.C，其中A表示大版本号，当软件整体重写升级或出现不向后兼容的改变时，才会增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。</p>\n</blockquote>\n<h3 id=\"Python的优缺点\"><a href=\"#Python的优缺点\" class=\"headerlink\" title=\"Python的优缺点\"></a>Python的优缺点</h3><p>Python的优点很多，简单的可以总结为以下几点。</p>\n<ol>\n<li>简单明了，学习曲线低，比很多编程语言都容易上手。</li>\n<li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li>\n<li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li>\n<li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li>\n<li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li>\n</ol>\n<p>Python的缺点主要集中在以下几点。</p>\n<ol>\n<li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li>\n<li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li>\n<li>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。</li>\n</ol>\n<h3 id=\"Python的应用领域\"><a href=\"#Python的应用领域\" class=\"headerlink\" title=\"Python的应用领域\"></a>Python的应用领域</h3><p>目前Python在<strong>Web服务器应用开发</strong>、云基础设施开发、<strong>网络数据采集</strong>（爬虫）、<strong>数据分析</strong>、量化交易、<strong>机器学习</strong>、<strong>自动化测试</strong>、<strong>自动化运维</strong>等领域都有用武之地。</p>\n<h3 id=\"安装Python环境\"><a href=\"#安装Python环境\" class=\"headerlink\" title=\"安装Python环境\"></a>安装Python环境</h3><p>想要开始你的Python编程之旅，首先得在计算机上安装Python环境，简单的说就是得安装运行Python程序的工具，通常也称之为Python解释器。我们强烈建议大家安装Python 3的环境，很明显它是目前更好的选择。</p>\n<h4 id=\"Windows环境\"><a href=\"#Windows环境\" class=\"headerlink\" title=\"Windows环境\"></a>Windows环境</h4><p>可以在<a href=\"https://www.python.org/\">Python官方网站</a>找到<a href=\"https://www.python.org/downloads/\">下载链接</a>并下载Python 3的安装程序。对于Windows操作系统，可以下载“executable installer”。</p>\n<p>&nbsp;<br>双击运行刚才下载的安装程序，会打开Python环境的安装向导。在执行安装向导的时候，记得勾选“Add Python 3.x to PATH”选项，这个选项会帮助我们将Python的解释器添加到PATH环境变量中（不理解没关系，照做就行）。安装完成后可以打开Windows的“命令行提示符”工具并输入下面的命令来检查Python解释器是否安装成功。</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">python --version\n</code></pre>\n<p>执行上面的命令如果看了Python解释器对应的版本号（如：Python 3.7.6），说明你的安装已经成功了。</p>\n<h4 id=\"macOS环境\"><a href=\"#macOS环境\" class=\"headerlink\" title=\"macOS环境\"></a>macOS环境</h4><p>macOS自带了Python 2，可以通过<a href=\"https://www.python.org/\">Python官方网站</a>提供的下载链接找到适合macOS的“macOS installer”来安装Python 3，安装过程基本不需要做任何勾选，直接点击“下一步”即可。安装完成后，可以通过在“终端”工具中输入<code>python3</code>命令来调用Python 3解释器，因为如果直接输入<code>python</code>，将会调用Python 2的解释器。</p>\n<h3 id=\"Python开发工具\"><a href=\"#Python开发工具\" class=\"headerlink\" title=\"Python开发工具\"></a>Python开发工具</h3><h4 id=\"交互式环境\"><a href=\"#交互式环境\" class=\"headerlink\" title=\"交互式环境\"></a>交互式环境</h4><p>我们打开Windows的“命令行提示符”工具，输入命令<code>python</code>然后回车就可以进入到Python的交互式环境中。所谓交互式环境，就是我们输入一行代码回车，代码马上会被执行，如果代码有产出结果，那么结果会被显示在窗口中。例如：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">Python 3.7.6\nType <span class=\"token string\">\"help\"</span>, <span class=\"token string\">\"copyright\"</span>, <span class=\"token string\">\"credits\"</span> or <span class=\"token string\">\"license\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> 2 * 3\n6\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> 2 + 3\n5\n</code></pre>\n<blockquote>\n<p><strong>温馨提示</strong>：使用macOS系统的用户需要打开“终端”工具，输入<code>python3</code><br>进入交互式环境。</p>\n</blockquote>\n<p>如果希望退出交互式环境，可以在交互式环境中输入<code>quit()</code>，如下所示。</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"文本编辑器-Visual-Studio-Code\"><a href=\"#文本编辑器-Visual-Studio-Code\" class=\"headerlink\" title=\"文本编辑器 - Visual Studio Code\"></a>文本编辑器 - Visual Studio Code</h4><p>Visual Studio Code（通常简称为VS Code）是一个由微软开发能够在Windows、 Linux和macOS等操作系统上运行的代码编辑神器。它支持语法高亮、自动补全、多点编辑、运行调试等一系列便捷功能，而且能够支持多种编程语言。</p>\n<h4 id=\"集成开发环境-PyCharm\"><a href=\"#集成开发环境-PyCharm\" class=\"headerlink\" title=\"集成开发环境 - PyCharm\"></a>集成开发环境 - PyCharm</h4><p>如果用Python开发商业项目，我们推荐大家使用专业的工具PyCharm。PyCharm是捷克的JetBrains公司开发的用于Python开发的集成开发环境（IDE)，所谓集成开发环境是说这个工具中提供了代码编写、代码运行和调试、代码分析、代码版本控制等各种功能，因此特别适合商业项目的开发。在<a href=\"https://www.jetbrains.com/\">JetBrains的官方网站</a>上提供了PyCharm的<a href=\"https://www.jetbrains.com/pycharm/download/#section=windows\">下载链接</a>，其中社区版（Community）是免费的但功能相对弱小，专业版（Professional）功能非常强大，但需要按年或月付费使用，新用户可以试用30天时间。关于如何使用PyCharm来进行Python开发，在后续的课程中进行讲解。</p>\n<h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello, world\"></a>hello, world</h3><p>按照行业惯例，我们学习任何一门编程语言写的第一个程序都是输出<code>hello, world</code>，因为这段代码是伟大的丹尼斯·里奇（C语言之父，和肯·汤普森一起开发了Unix操作系统）和布莱恩·柯尼汉（awk语言的发明者）在他们的不朽著作_The C Programming Language_中写的第一段代码。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, world'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h4><p>我们将上面的代码命名为<code>hello.py</code>。如果你使用的是Windows操作系统，接下来可以在你保存代码的目录下先按住键盘上的<code>shift</code>键再点击鼠标右键，这时候鼠标右键菜单中会出现“命令行提示符”选项，点击该选项就可以打开“命令行提示符”工具，我们输入下面的命令。</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">python hello.py\n</code></pre>\n<blockquote>\n<p><strong>提醒</strong>：我们也可以在任意位置打开“命令行提示符”或“终端”工具，然后将需要执行的Python代码通过拖拽的方式拖入到“命令行提示符”或“终端”中，这样相当于指定了文件的绝对路径来运行该文件中的Python代码。再次提醒，macOS系统要通过<code>python3</code>命令来运行该程序。</p>\n</blockquote>\n<p>你可以尝试将上面程序单引号中的<code>hello, world</code>换成其他内容；你也可以尝试着多写几个这样的语句，看看会运行出怎样的结果。需要提醒大家，上面代码中的<code>print(&#39;hello, world&#39;)</code>就是一条完整的语句，我们用Python写程序，最好<strong>每一行代码中只有一条语句</strong>。虽然使用<code>;</code>分隔符可以将多个语句写在一行代码中，但是最好不要这样做，因为代码会变得非常难看。</p>\n<h3 id=\"注释你的代码\"><a href=\"#注释你的代码\" class=\"headerlink\" title=\"注释你的代码\"></a>注释你的代码</h3><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。简单的说，<strong>注释会让代码更容易看懂但不会影响程序的执行结果</strong>。</p>\n<p>&nbsp;<br>Python中有两种形式的注释：</p>\n<ol>\n<li>单行注释：以#和空格开头，可以注释掉从<code>#</code>开始后面一整行的内容。</li>\n<li>多行注释：三个引号开头，三个引号结尾，通常用于添加多行说明性内容。</li>\n</ol>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n第一个Python程序 - hello, world\nVersion: 0.1\nAuthor: chengbudong\n\"\"\"</span>\n<span class=\"token comment\" spellcheck=\"true\"># print('hello, world')</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，世界！\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Python简介\"><a href=\"#Python简介\" class=\"headerlink\" title=\"Python简介\"></a>Python简介</h2><p>Python是由荷兰人吉多·范罗苏姆（Guido von Rossum，后面都称呼他为Guido）发明的一种编程语言。</p>\n<h3 id=\"Python的历史\"><a href=\"#Python的历史\" class=\"headerlink\" title=\"Python的历史\"></a>Python的历史</h3><p>1989年圣诞节：Guido开始写Python语言的编译器。<br>1991年2月：第一个Python解释器诞生，它是用C语言实现的，可以调用C语言的库函数。<br>1994年1月：Python 1.0正式发布。<br>2000年10月：Python 2.0发布，Python的整个开发过程更加透明，生态圈开始慢慢形成。<br>2008年12月：Python 3.0发布，引入了诸多现代编程语言的新特性，但并不完全兼容之前的Python代码。</p>\n<blockquote>\n<p><strong>说明</strong>：大多数软件的版本号一般分为三段，形如A.B.C，其中A表示大版本号，当软件整体重写升级或出现不向后兼容的改变时，才会增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。</p>\n</blockquote>\n<h3 id=\"Python的优缺点\"><a href=\"#Python的优缺点\" class=\"headerlink\" title=\"Python的优缺点\"></a>Python的优缺点</h3><p>Python的优点很多，简单的可以总结为以下几点。</p>\n<ol>\n<li>简单明了，学习曲线低，比很多编程语言都容易上手。</li>\n<li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li>\n<li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li>\n<li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li>\n<li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li>\n</ol>\n<p>Python的缺点主要集中在以下几点。</p>\n<ol>\n<li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li>\n<li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li>\n<li>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。</li>\n</ol>\n<h3 id=\"Python的应用领域\"><a href=\"#Python的应用领域\" class=\"headerlink\" title=\"Python的应用领域\"></a>Python的应用领域</h3><p>目前Python在<strong>Web服务器应用开发</strong>、云基础设施开发、<strong>网络数据采集</strong>（爬虫）、<strong>数据分析</strong>、量化交易、<strong>机器学习</strong>、<strong>自动化测试</strong>、<strong>自动化运维</strong>等领域都有用武之地。</p>\n<h3 id=\"安装Python环境\"><a href=\"#安装Python环境\" class=\"headerlink\" title=\"安装Python环境\"></a>安装Python环境</h3><p>想要开始你的Python编程之旅，首先得在计算机上安装Python环境，简单的说就是得安装运行Python程序的工具，通常也称之为Python解释器。我们强烈建议大家安装Python 3的环境，很明显它是目前更好的选择。</p>\n<h4 id=\"Windows环境\"><a href=\"#Windows环境\" class=\"headerlink\" title=\"Windows环境\"></a>Windows环境</h4><p>可以在<a href=\"https://www.python.org/\">Python官方网站</a>找到<a href=\"https://www.python.org/downloads/\">下载链接</a>并下载Python 3的安装程序。对于Windows操作系统，可以下载“executable installer”。</p>\n<p>&nbsp;<br>双击运行刚才下载的安装程序，会打开Python环境的安装向导。在执行安装向导的时候，记得勾选“Add Python 3.x to PATH”选项，这个选项会帮助我们将Python的解释器添加到PATH环境变量中（不理解没关系，照做就行）。安装完成后可以打开Windows的“命令行提示符”工具并输入下面的命令来检查Python解释器是否安装成功。</p>\n<pre><code class=\"bash\">python --version\n</code></pre>\n<p>执行上面的命令如果看了Python解释器对应的版本号（如：Python 3.7.6），说明你的安装已经成功了。</p>\n<h4 id=\"macOS环境\"><a href=\"#macOS环境\" class=\"headerlink\" title=\"macOS环境\"></a>macOS环境</h4><p>macOS自带了Python 2，可以通过<a href=\"https://www.python.org/\">Python官方网站</a>提供的下载链接找到适合macOS的“macOS installer”来安装Python 3，安装过程基本不需要做任何勾选，直接点击“下一步”即可。安装完成后，可以通过在“终端”工具中输入<code>python3</code>命令来调用Python 3解释器，因为如果直接输入<code>python</code>，将会调用Python 2的解释器。</p>\n<h3 id=\"Python开发工具\"><a href=\"#Python开发工具\" class=\"headerlink\" title=\"Python开发工具\"></a>Python开发工具</h3><h4 id=\"交互式环境\"><a href=\"#交互式环境\" class=\"headerlink\" title=\"交互式环境\"></a>交互式环境</h4><p>我们打开Windows的“命令行提示符”工具，输入命令<code>python</code>然后回车就可以进入到Python的交互式环境中。所谓交互式环境，就是我们输入一行代码回车，代码马上会被执行，如果代码有产出结果，那么结果会被显示在窗口中。例如：</p>\n<pre><code class=\"bash\">Python 3.7.6\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; 2 * 3\n6\n&gt;&gt;&gt; 2 + 3\n5\n</code></pre>\n<blockquote>\n<p><strong>温馨提示</strong>：使用macOS系统的用户需要打开“终端”工具，输入<code>python3</code><br>进入交互式环境。</p>\n</blockquote>\n<p>如果希望退出交互式环境，可以在交互式环境中输入<code>quit()</code>，如下所示。</p>\n<pre><code class=\"bash\">&gt;&gt;&gt; quit()\n</code></pre>\n<h4 id=\"文本编辑器-Visual-Studio-Code\"><a href=\"#文本编辑器-Visual-Studio-Code\" class=\"headerlink\" title=\"文本编辑器 - Visual Studio Code\"></a>文本编辑器 - Visual Studio Code</h4><p>Visual Studio Code（通常简称为VS Code）是一个由微软开发能够在Windows、 Linux和macOS等操作系统上运行的代码编辑神器。它支持语法高亮、自动补全、多点编辑、运行调试等一系列便捷功能，而且能够支持多种编程语言。</p>\n<h4 id=\"集成开发环境-PyCharm\"><a href=\"#集成开发环境-PyCharm\" class=\"headerlink\" title=\"集成开发环境 - PyCharm\"></a>集成开发环境 - PyCharm</h4><p>如果用Python开发商业项目，我们推荐大家使用专业的工具PyCharm。PyCharm是捷克的JetBrains公司开发的用于Python开发的集成开发环境（IDE)，所谓集成开发环境是说这个工具中提供了代码编写、代码运行和调试、代码分析、代码版本控制等各种功能，因此特别适合商业项目的开发。在<a href=\"https://www.jetbrains.com/\">JetBrains的官方网站</a>上提供了PyCharm的<a href=\"https://www.jetbrains.com/pycharm/download/#section=windows\">下载链接</a>，其中社区版（Community）是免费的但功能相对弱小，专业版（Professional）功能非常强大，但需要按年或月付费使用，新用户可以试用30天时间。关于如何使用PyCharm来进行Python开发，在后续的课程中进行讲解。</p>\n<h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello, world\"></a>hello, world</h3><p>按照行业惯例，我们学习任何一门编程语言写的第一个程序都是输出<code>hello, world</code>，因为这段代码是伟大的丹尼斯·里奇（C语言之父，和肯·汤普森一起开发了Unix操作系统）和布莱恩·柯尼汉（awk语言的发明者）在他们的不朽著作_The C Programming Language_中写的第一段代码。</p>\n<pre><code class=\"python\">print(&#39;hello, world&#39;)\n</code></pre>\n<h4 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h4><p>我们将上面的代码命名为<code>hello.py</code>。如果你使用的是Windows操作系统，接下来可以在你保存代码的目录下先按住键盘上的<code>shift</code>键再点击鼠标右键，这时候鼠标右键菜单中会出现“命令行提示符”选项，点击该选项就可以打开“命令行提示符”工具，我们输入下面的命令。</p>\n<pre><code class=\"bash\">python hello.py\n</code></pre>\n<blockquote>\n<p><strong>提醒</strong>：我们也可以在任意位置打开“命令行提示符”或“终端”工具，然后将需要执行的Python代码通过拖拽的方式拖入到“命令行提示符”或“终端”中，这样相当于指定了文件的绝对路径来运行该文件中的Python代码。再次提醒，macOS系统要通过<code>python3</code>命令来运行该程序。</p>\n</blockquote>\n<p>你可以尝试将上面程序单引号中的<code>hello, world</code>换成其他内容；你也可以尝试着多写几个这样的语句，看看会运行出怎样的结果。需要提醒大家，上面代码中的<code>print(&#39;hello, world&#39;)</code>就是一条完整的语句，我们用Python写程序，最好<strong>每一行代码中只有一条语句</strong>。虽然使用<code>;</code>分隔符可以将多个语句写在一行代码中，但是最好不要这样做，因为代码会变得非常难看。</p>\n<h3 id=\"注释你的代码\"><a href=\"#注释你的代码\" class=\"headerlink\" title=\"注释你的代码\"></a>注释你的代码</h3><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。简单的说，<strong>注释会让代码更容易看懂但不会影响程序的执行结果</strong>。</p>\n<p>&nbsp;<br>Python中有两种形式的注释：</p>\n<ol>\n<li>单行注释：以#和空格开头，可以注释掉从<code>#</code>开始后面一整行的内容。</li>\n<li>多行注释：三个引号开头，三个引号结尾，通常用于添加多行说明性内容。</li>\n</ol>\n<pre><code class=\"python\">&quot;&quot;&quot;\n第一个Python程序 - hello, world\nVersion: 0.1\nAuthor: chengbudong\n&quot;&quot;&quot;\n# print(&#39;hello, world&#39;)\nprint(&quot;你好，世界！&quot;)\n</code></pre>\n"},{"title":"C语言：结构体","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-08T05:56:31.000Z","img":"https://gitee.com/chengbudong/noteimg/raw/master/image/p2623891164.webp","password":null,"summary":null,"_content":"\n## 什么是结构体\n结构体是一种构造类型，允许用户自定义，用于保存一组不同类型的数据。例如，书籍信息，书的编号应为整型；书名应为字符型。显然这组数据不能用数组来存放, 为了解决这个问题，C语言中给出了一种构造数据类型——“结构(structure)”或叫“结构体”。\n\n## 定义结构体类型\n通过定义结构体类型来告诉编译器，我们的结构体中需要存储哪些类型的数据。\n```c\nstruct 结构体名 {\n    类型名1 成员名1;\n    类型名2 成员名2;\n    ......\n    类型名n 成员名n;\n};\n```\n\n示例：\n```c\nstruct Books\n{\n    int book_id;\n    char  *title;\n};\n```\n> 注意不要丢掉末尾的分号\n\n## 定义结构体变量\n定义好结构体类型后，我们就可以利用定义的结构体类型来定义结构体变量。\n\n&nbsp;\n格式：`struct 结构体名 结构体变量名`; \n\n- 先定义结构体类型，再定义变量\n\n```c\nstruct Books book1;\n```\n\n- 定义结构体类型的同时定义变量\n\n```c\nstruct Books {\n    int book_id;\n    char *title;\n} book2;\n```\n\n- 匿名结构体定义结构体变量 (这种方法可以省略结构体类型名，但不能复用)\n\n```c\nstruct {\n    int book_id;\n    char *title;\n} book3;\n```\n\n## 访问结构体成员\n使用成员访问运算符`.`来访问结构体成员，形式为：`结构体变量名.成员名`。\n```c\nstruct Books {\n    int book_id;\n    char *title;\n};\nstruct Books book1;\nboo1.book_id = 1000;\nbook1.title = \"C语言\";\nprintf(\"%d : %s\", book1.book_id, book1.title);\n```\n\n## 结构体变量的初始化\n- 定义的同时按顺序初始化\n\n```c\nstruct Books book1 = {1, \"C语言\"};\n```\n\n- 定义的同时不按顺序初始化\n\n```c\nstruct Books book2 = {.title = \"C++\", .book_id = 2};\n```\n\n- 先定义再逐个初始化\n\n```c\nstruct Books book3;\nbook3.book_id = 3;\nbook3.title = \"Python\";\n```\n\n- 先定义再一次性初始化\n\n```c\nstruct Books book4;\nbook4 = (struct Books) {4, \"Java\"};\n```\n\n## 结构体类型作用域\n- 结构体类型定义在函数内部的作用域与局部变量的作用域是相同的\n\t- 从定义的那一行开始，直到遇到return或者大括号结束为止\n- 结构体类型定义在函数外部的作用域与全局变量的作用域是相同的\n\t- 从定义的那一行开始，直到本文结束为止\n\n```c\nstruct Books {\n    int book_id;\n    char *title;\n};\nstruct Books book1 = {1, \"C语言\"};\nint main() {\n    //定义一个同名的局部结构体，会屏蔽掉全局结构体\n    struct Books {\n        int book_id;\n        char *author;\n    };\n    struct Books book1;\n    book1.book_id = 3;\n    // book1.title = \"Python\"; // 由于屏蔽掉了全局结构体，此处会报错\n    book1.author = \"Brian\";\n    printf(\"%d : %s\\n\", book1.book_id, book1.author);\n    f();\n    return 0; \n} //局部结构体作用域到这结束\nvoid f() {\n    //此处使用的是全局的结构体\n    printf(\"%d : %s\\n\", book1.book_id, book1.title);\n} \n```\n\n## 结构体数组\n结构体数组与数据值型数组不同之处在于每个数组元素都一个结构体类型的数据，它们分别包括各个成员项。\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211219134658.png)\n\n&nbsp;\n格式：`struct 结构体类型名称 数组名称[元素个数]`\n\n```c\nstruct Books book[3];\n```\n\n### 初始化\n- 定义的同时做初始化\n\n```c\nstruct Books book[3] = {{1, \"C\"}, {2, \"C++\"}}; // 初始化了前两个\n```\n\n- 先定义在初始化\n\n```c\nbook[2].book_id = 3;\nbook[2].title = \"Python\";\n```\n\n## 结构体指针\n指向结构体变量的指针。\n\n&nbsp;\n格式：`struct 结构体类型名 *结构体指针变量名;`\n\n通过结构体指针访问结构体成员的两种方式：\n- `(*结构体指针变量名).成员名`\n- `结构体指针变量名->成员名`\n\n```c\nstruct Books {\n    int book_id;\n    char *title;\n};\nstruct Books book1 = {1, \"C\"};\n\nint main() {\n    struct Books *p;\n    p = &book1;\n    printf(\"%d : %s\\n\", (*p).book_id, (*p).title);\n    printf(\"%d : %s\\n\", p->book_id, p->title);\n    return 0; \n}\n```\n> (*结构体指针变量名)的 ( ) 不能省略，因为成员符`.`的优先级高于`*`。 \n\n## 结构体内存分析\n- 给结构体变量开辟存储空间和给普通开辟存储空间一样, 会从内存地址大的位置开始开辟\n- 给结构体成员开辟存储空间和给数组元素开辟存储空间一样, 会从所占用内存地址小的位置开始开辟\n- 结构体变量占用的内存空间是其最大成员的大小的倍数(对齐问题)\n\n> 计算机系统对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的起始地址的值是某个数 k 的倍数，这就是所谓的内存对齐，而这个 k 则被称为该数据类型的对齐模数(alignment modulus)。\n> 对齐的优点：\n> - 简化了处理器与内存之间传输系统的设计\n> - 可以提升读取数据的速度。\n> 比如：处理器每次读写内存的时候都从某个8倍数的地址开始，一次读出或写入8个字节的数据，假如软件能保证double类型的数据都从8倍数地址开始，那么读或写一个double类型数据就只需要一次内存操作。否则，我们就可能需要两次内存操作才能完成这个动作，因为数据或许恰好横跨在两个符合对齐要求的8字节内存块上。\n\n### 对齐规则\n1. 结构体变量的首地址能够被其最大基本类型成员的大小所整除。\n\n> **备注**：编译器在给结构体开辟空间时，首先找到结构体中最宽的基本数据类型，然后寻找内存地址能被该基本数据类型所整除的位置，作为结构体的首地址。将这个最宽的基本数据类型的大小作为上面介绍的对齐模数。\n\n2. 结构体每个成员相对于结构体首地址的偏移量是当前成员大小的整数倍。\n\n> **备注**：为结构体的一个成员开辟空间之前，编译器首先检查预开辟空间的首地址相对于结构体首地址的偏移是否是该成员的整数倍，若是，则存放该成员，反之，则在该成员和上一个成员之间填充一定的字节，以达到整数倍的要求，也就是将预开辟空间的首地址后移几个字节。\n> - 在GCC中，对齐模数最大只能是4，也就是说，即使结构体中有double类型，对齐模数还是4。\n> - 除了平台差异外，还有预编译指令`#pragma pack(n)`手动设置，n--只能填1 2 4 8 16\n\n3. 结构体的总大小为其最大基本类型成员大小的整数倍。\n\n> **备注**：结构体总大小是包括填充字节，最后一个成员满足上面两条以外，还必须满足第三条，否则就必须在最后填充几个字节以达到本条要求。\n\n```c\n// 基本数据类型大小, win 64位。\nsizeof(char)   // 1\nsizeof(short)  // 2\nsizeof(int)    // 4\nsizeof(long)   // 4\nsizeof(float)  // 4\nsizeof(double) // 8\n```\n\n### 示例\n```c\nstruct Str1 {\t\t\t\t\t\t\t\t\t\t\n\tchar a;\t\n\tchar b;\t\t\n}str1;\nsizeof(Str1)  = 2\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211207161618.png)\n\n```c\nstruct Str2 {\n\tchar a; \n\tchar b; \n\tint  c; \n}str2;\nsizeof(Str2)  = 8\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size2.png)\n\n```c\nstruct Str3 {\n\tchar a;\n\tint  c;\n\tchar b;\n}str3;\nsizeof(Str3)  = 12\t\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size3.png)\n\n```c\nstruct Str4 {\n\tchar a;\n\tchar b;\n\tint  c;\n\tdouble d;\n}str4;\nsizeof(Str4)  = 16\t\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size4.png)\n\n```c\nstruct str5 {\n    char a;\n    short b;\n    int c;\n    double d;\n    char e[3];\n}str5;\nsizeof(Str4)  = 24 \n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size5.png)\n\n## 结构体嵌套定义\n成员也可以又是一个结构，即构成了嵌套的结构 。\n\n例如：在Books中嵌套Date结构\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_struct.png)\n\n```c\nstruct Date {\n    int year;\n    int month;\n    int day;\n};\nstruct Books {\n    int book_id;\n    char *title;\n    struct Date publication_time;\n};\n```\n\n连续使用成员运算符`.`来访问嵌套结构体的成员\n```c\nbook1.publication_time.year = 2021;\nbook1.publication_time.month = 12;\nbook1.publication_time.day = 6;\n```\n\n## 结构作为函数参数\n- 结构体虽然是构造类型，但是结构体之间的赋值是值拷贝，而不是地址传递。\n- 结构体变量作为函数参数形参时也是值传递，在函数内修改形参，不会影响外界实参。\n\n```c\n#include <stdio.h>\nstruct Books {\n    int book_id;\n    char *title;\n};\nvoid f(struct Books book);\nint main() {\n    struct Books book1 = {1, \"C\"};\n    struct Books book2;\n    book2 = book1;\n    book2.title = \"C++\";\n    printf(\"%d : %s\\n\", book1.book_id, book1.title); // 1 C\n    printf(\"%d : %s\\n\", book2.book_id, book2.title); // 1 C++\n    f(book1); // 1 Python\n    printf(\"%d : %s\\n\", book1.book_id, book1.title); // 1 C\n    return 0; \n} \nvoid f(struct Books book) {\n    book.title = \"Python\";\n    printf(\"%d : %s\\n\", book.book_id, book.title);\n}\n```\n\n","source":"_posts/结构体.md","raw":"---\ntitle: C语言：结构体\ntop: false \ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-08 13:56:31\nimg: https://gitee.com/chengbudong/noteimg/raw/master/image/p2623891164.webp\npassword: \nsummary: \ntags:\n- C语言\ncategories:\n- 编程语言\n---\n\n## 什么是结构体\n结构体是一种构造类型，允许用户自定义，用于保存一组不同类型的数据。例如，书籍信息，书的编号应为整型；书名应为字符型。显然这组数据不能用数组来存放, 为了解决这个问题，C语言中给出了一种构造数据类型——“结构(structure)”或叫“结构体”。\n\n## 定义结构体类型\n通过定义结构体类型来告诉编译器，我们的结构体中需要存储哪些类型的数据。\n```c\nstruct 结构体名 {\n    类型名1 成员名1;\n    类型名2 成员名2;\n    ......\n    类型名n 成员名n;\n};\n```\n\n示例：\n```c\nstruct Books\n{\n    int book_id;\n    char  *title;\n};\n```\n> 注意不要丢掉末尾的分号\n\n## 定义结构体变量\n定义好结构体类型后，我们就可以利用定义的结构体类型来定义结构体变量。\n\n&nbsp;\n格式：`struct 结构体名 结构体变量名`; \n\n- 先定义结构体类型，再定义变量\n\n```c\nstruct Books book1;\n```\n\n- 定义结构体类型的同时定义变量\n\n```c\nstruct Books {\n    int book_id;\n    char *title;\n} book2;\n```\n\n- 匿名结构体定义结构体变量 (这种方法可以省略结构体类型名，但不能复用)\n\n```c\nstruct {\n    int book_id;\n    char *title;\n} book3;\n```\n\n## 访问结构体成员\n使用成员访问运算符`.`来访问结构体成员，形式为：`结构体变量名.成员名`。\n```c\nstruct Books {\n    int book_id;\n    char *title;\n};\nstruct Books book1;\nboo1.book_id = 1000;\nbook1.title = \"C语言\";\nprintf(\"%d : %s\", book1.book_id, book1.title);\n```\n\n## 结构体变量的初始化\n- 定义的同时按顺序初始化\n\n```c\nstruct Books book1 = {1, \"C语言\"};\n```\n\n- 定义的同时不按顺序初始化\n\n```c\nstruct Books book2 = {.title = \"C++\", .book_id = 2};\n```\n\n- 先定义再逐个初始化\n\n```c\nstruct Books book3;\nbook3.book_id = 3;\nbook3.title = \"Python\";\n```\n\n- 先定义再一次性初始化\n\n```c\nstruct Books book4;\nbook4 = (struct Books) {4, \"Java\"};\n```\n\n## 结构体类型作用域\n- 结构体类型定义在函数内部的作用域与局部变量的作用域是相同的\n\t- 从定义的那一行开始，直到遇到return或者大括号结束为止\n- 结构体类型定义在函数外部的作用域与全局变量的作用域是相同的\n\t- 从定义的那一行开始，直到本文结束为止\n\n```c\nstruct Books {\n    int book_id;\n    char *title;\n};\nstruct Books book1 = {1, \"C语言\"};\nint main() {\n    //定义一个同名的局部结构体，会屏蔽掉全局结构体\n    struct Books {\n        int book_id;\n        char *author;\n    };\n    struct Books book1;\n    book1.book_id = 3;\n    // book1.title = \"Python\"; // 由于屏蔽掉了全局结构体，此处会报错\n    book1.author = \"Brian\";\n    printf(\"%d : %s\\n\", book1.book_id, book1.author);\n    f();\n    return 0; \n} //局部结构体作用域到这结束\nvoid f() {\n    //此处使用的是全局的结构体\n    printf(\"%d : %s\\n\", book1.book_id, book1.title);\n} \n```\n\n## 结构体数组\n结构体数组与数据值型数组不同之处在于每个数组元素都一个结构体类型的数据，它们分别包括各个成员项。\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211219134658.png)\n\n&nbsp;\n格式：`struct 结构体类型名称 数组名称[元素个数]`\n\n```c\nstruct Books book[3];\n```\n\n### 初始化\n- 定义的同时做初始化\n\n```c\nstruct Books book[3] = {{1, \"C\"}, {2, \"C++\"}}; // 初始化了前两个\n```\n\n- 先定义在初始化\n\n```c\nbook[2].book_id = 3;\nbook[2].title = \"Python\";\n```\n\n## 结构体指针\n指向结构体变量的指针。\n\n&nbsp;\n格式：`struct 结构体类型名 *结构体指针变量名;`\n\n通过结构体指针访问结构体成员的两种方式：\n- `(*结构体指针变量名).成员名`\n- `结构体指针变量名->成员名`\n\n```c\nstruct Books {\n    int book_id;\n    char *title;\n};\nstruct Books book1 = {1, \"C\"};\n\nint main() {\n    struct Books *p;\n    p = &book1;\n    printf(\"%d : %s\\n\", (*p).book_id, (*p).title);\n    printf(\"%d : %s\\n\", p->book_id, p->title);\n    return 0; \n}\n```\n> (*结构体指针变量名)的 ( ) 不能省略，因为成员符`.`的优先级高于`*`。 \n\n## 结构体内存分析\n- 给结构体变量开辟存储空间和给普通开辟存储空间一样, 会从内存地址大的位置开始开辟\n- 给结构体成员开辟存储空间和给数组元素开辟存储空间一样, 会从所占用内存地址小的位置开始开辟\n- 结构体变量占用的内存空间是其最大成员的大小的倍数(对齐问题)\n\n> 计算机系统对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的起始地址的值是某个数 k 的倍数，这就是所谓的内存对齐，而这个 k 则被称为该数据类型的对齐模数(alignment modulus)。\n> 对齐的优点：\n> - 简化了处理器与内存之间传输系统的设计\n> - 可以提升读取数据的速度。\n> 比如：处理器每次读写内存的时候都从某个8倍数的地址开始，一次读出或写入8个字节的数据，假如软件能保证double类型的数据都从8倍数地址开始，那么读或写一个double类型数据就只需要一次内存操作。否则，我们就可能需要两次内存操作才能完成这个动作，因为数据或许恰好横跨在两个符合对齐要求的8字节内存块上。\n\n### 对齐规则\n1. 结构体变量的首地址能够被其最大基本类型成员的大小所整除。\n\n> **备注**：编译器在给结构体开辟空间时，首先找到结构体中最宽的基本数据类型，然后寻找内存地址能被该基本数据类型所整除的位置，作为结构体的首地址。将这个最宽的基本数据类型的大小作为上面介绍的对齐模数。\n\n2. 结构体每个成员相对于结构体首地址的偏移量是当前成员大小的整数倍。\n\n> **备注**：为结构体的一个成员开辟空间之前，编译器首先检查预开辟空间的首地址相对于结构体首地址的偏移是否是该成员的整数倍，若是，则存放该成员，反之，则在该成员和上一个成员之间填充一定的字节，以达到整数倍的要求，也就是将预开辟空间的首地址后移几个字节。\n> - 在GCC中，对齐模数最大只能是4，也就是说，即使结构体中有double类型，对齐模数还是4。\n> - 除了平台差异外，还有预编译指令`#pragma pack(n)`手动设置，n--只能填1 2 4 8 16\n\n3. 结构体的总大小为其最大基本类型成员大小的整数倍。\n\n> **备注**：结构体总大小是包括填充字节，最后一个成员满足上面两条以外，还必须满足第三条，否则就必须在最后填充几个字节以达到本条要求。\n\n```c\n// 基本数据类型大小, win 64位。\nsizeof(char)   // 1\nsizeof(short)  // 2\nsizeof(int)    // 4\nsizeof(long)   // 4\nsizeof(float)  // 4\nsizeof(double) // 8\n```\n\n### 示例\n```c\nstruct Str1 {\t\t\t\t\t\t\t\t\t\t\n\tchar a;\t\n\tchar b;\t\t\n}str1;\nsizeof(Str1)  = 2\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211207161618.png)\n\n```c\nstruct Str2 {\n\tchar a; \n\tchar b; \n\tint  c; \n}str2;\nsizeof(Str2)  = 8\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size2.png)\n\n```c\nstruct Str3 {\n\tchar a;\n\tint  c;\n\tchar b;\n}str3;\nsizeof(Str3)  = 12\t\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size3.png)\n\n```c\nstruct Str4 {\n\tchar a;\n\tchar b;\n\tint  c;\n\tdouble d;\n}str4;\nsizeof(Str4)  = 16\t\n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size4.png)\n\n```c\nstruct str5 {\n    char a;\n    short b;\n    int c;\n    double d;\n    char e[3];\n}str5;\nsizeof(Str4)  = 24 \n```\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size5.png)\n\n## 结构体嵌套定义\n成员也可以又是一个结构，即构成了嵌套的结构 。\n\n例如：在Books中嵌套Date结构\n\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/struct_struct.png)\n\n```c\nstruct Date {\n    int year;\n    int month;\n    int day;\n};\nstruct Books {\n    int book_id;\n    char *title;\n    struct Date publication_time;\n};\n```\n\n连续使用成员运算符`.`来访问嵌套结构体的成员\n```c\nbook1.publication_time.year = 2021;\nbook1.publication_time.month = 12;\nbook1.publication_time.day = 6;\n```\n\n## 结构作为函数参数\n- 结构体虽然是构造类型，但是结构体之间的赋值是值拷贝，而不是地址传递。\n- 结构体变量作为函数参数形参时也是值传递，在函数内修改形参，不会影响外界实参。\n\n```c\n#include <stdio.h>\nstruct Books {\n    int book_id;\n    char *title;\n};\nvoid f(struct Books book);\nint main() {\n    struct Books book1 = {1, \"C\"};\n    struct Books book2;\n    book2 = book1;\n    book2.title = \"C++\";\n    printf(\"%d : %s\\n\", book1.book_id, book1.title); // 1 C\n    printf(\"%d : %s\\n\", book2.book_id, book2.title); // 1 C++\n    f(book1); // 1 Python\n    printf(\"%d : %s\\n\", book1.book_id, book1.title); // 1 C\n    return 0; \n} \nvoid f(struct Books book) {\n    book.title = \"Python\";\n    printf(\"%d : %s\\n\", book.book_id, book.title);\n}\n```\n\n","slug":"结构体","published":1,"updated":"2021-12-30T08:57:23.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv4v002n8ou19oua0x0u","content":"<h2 id=\"什么是结构体\"><a href=\"#什么是结构体\" class=\"headerlink\" title=\"什么是结构体\"></a>什么是结构体</h2><p>结构体是一种构造类型，允许用户自定义，用于保存一组不同类型的数据。例如，书籍信息，书的编号应为整型；书名应为字符型。显然这组数据不能用数组来存放, 为了解决这个问题，C语言中给出了一种构造数据类型——“结构(structure)”或叫“结构体”。</p>\n<h2 id=\"定义结构体类型\"><a href=\"#定义结构体类型\" class=\"headerlink\" title=\"定义结构体类型\"></a>定义结构体类型</h2><p>通过定义结构体类型来告诉编译器，我们的结构体中需要存储哪些类型的数据。</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> 结构体名 <span class=\"token punctuation\">{</span>\n    类型名<span class=\"token number\">1</span> 成员名<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    类型名<span class=\"token number\">2</span> 成员名<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    类型名n 成员名n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>示例：</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span>  <span class=\"token operator\">*</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>注意不要丢掉末尾的分号</p>\n</blockquote>\n<h2 id=\"定义结构体变量\"><a href=\"#定义结构体变量\" class=\"headerlink\" title=\"定义结构体变量\"></a>定义结构体变量</h2><p>定义好结构体类型后，我们就可以利用定义的结构体类型来定义结构体变量。</p>\n<p>&nbsp;<br>格式：<code>struct 结构体名 结构体变量名</code>; </p>\n<ul>\n<li>先定义结构体类型，再定义变量</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books book1<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>定义结构体类型的同时定义变量</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> book2<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>匿名结构体定义结构体变量 (这种方法可以省略结构体类型名，但不能复用)</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> book3<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"访问结构体成员\"><a href=\"#访问结构体成员\" class=\"headerlink\" title=\"访问结构体成员\"></a>访问结构体成员</h2><p>使用成员访问运算符<code>.</code>来访问结构体成员，形式为：<code>结构体变量名.成员名</code>。</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> Books book1<span class=\"token punctuation\">;</span>\nboo1<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\nbook1<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"C语言\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d : %s\"</span><span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"结构体变量的初始化\"><a href=\"#结构体变量的初始化\" class=\"headerlink\" title=\"结构体变量的初始化\"></a>结构体变量的初始化</h2><ul>\n<li>定义的同时按顺序初始化</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books book1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C语言\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>定义的同时不按顺序初始化</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books book2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>先定义再逐个初始化</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books book3<span class=\"token punctuation\">;</span>\nbook3<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nbook3<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>先定义再一次性初始化</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books book4<span class=\"token punctuation\">;</span>\nbook4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> Books<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"结构体类型作用域\"><a href=\"#结构体类型作用域\" class=\"headerlink\" title=\"结构体类型作用域\"></a>结构体类型作用域</h2><ul>\n<li>结构体类型定义在函数内部的作用域与局部变量的作用域是相同的<ul>\n<li>从定义的那一行开始，直到遇到return或者大括号结束为止</li>\n</ul>\n</li>\n<li>结构体类型定义在函数外部的作用域与全局变量的作用域是相同的<ul>\n<li>从定义的那一行开始，直到本文结束为止</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> Books book1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C语言\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//定义一个同名的局部结构体，会屏蔽掉全局结构体</span>\n    <span class=\"token keyword\">struct</span> Books <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>author<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> Books book1<span class=\"token punctuation\">;</span>\n    book1<span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// book1.title = \"Python\"; // 由于屏蔽掉了全局结构体，此处会报错</span>\n    book1<span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> <span class=\"token string\">\"Brian\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d : %s\\n\"</span><span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">//局部结构体作用域到这结束</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//此处使用的是全局的结构体</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d : %s\\n\"</span><span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<h2 id=\"结构体数组\"><a href=\"#结构体数组\" class=\"headerlink\" title=\"结构体数组\"></a>结构体数组</h2><p>结构体数组与数据值型数组不同之处在于每个数组元素都一个结构体类型的数据，它们分别包括各个成员项。</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211219134658.png\"></p>\n<p>&nbsp;<br>格式：<code>struct 结构体类型名称 数组名称[元素个数]</code></p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books book<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>定义的同时做初始化</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books book<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 初始化了前两个</span>\n</code></pre>\n<ul>\n<li>先定义在初始化</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\">book<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>book_id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nbook<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"结构体指针\"><a href=\"#结构体指针\" class=\"headerlink\" title=\"结构体指针\"></a>结构体指针</h2><p>指向结构体变量的指针。</p>\n<p>&nbsp;<br>格式：<code>struct 结构体类型名 *结构体指针变量名;</code></p>\n<p>通过结构体指针访问结构体成员的两种方式：</p>\n<ul>\n<li><code>(*结构体指针变量名).成员名</code></li>\n<li><code>结构体指针变量名-&gt;成员名</code></li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Books <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> Books book1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> Books <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>book1<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d : %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d : %s\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>book_id<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>(*结构体指针变量名)的 ( ) 不能省略，因为成员符<code>.</code>的优先级高于<code>*</code>。 </p>\n</blockquote>\n<h2 id=\"结构体内存分析\"><a href=\"#结构体内存分析\" class=\"headerlink\" title=\"结构体内存分析\"></a>结构体内存分析</h2><ul>\n<li>给结构体变量开辟存储空间和给普通开辟存储空间一样, 会从内存地址大的位置开始开辟</li>\n<li>给结构体成员开辟存储空间和给数组元素开辟存储空间一样, 会从所占用内存地址小的位置开始开辟</li>\n<li>结构体变量占用的内存空间是其最大成员的大小的倍数(对齐问题)</li>\n</ul>\n<blockquote>\n<p>计算机系统对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的起始地址的值是某个数 k 的倍数，这就是所谓的内存对齐，而这个 k 则被称为该数据类型的对齐模数(alignment modulus)。<br>对齐的优点：</p>\n<ul>\n<li>简化了处理器与内存之间传输系统的设计</li>\n<li>可以提升读取数据的速度。<br>比如：处理器每次读写内存的时候都从某个8倍数的地址开始，一次读出或写入8个字节的数据，假如软件能保证double类型的数据都从8倍数地址开始，那么读或写一个double类型数据就只需要一次内存操作。否则，我们就可能需要两次内存操作才能完成这个动作，因为数据或许恰好横跨在两个符合对齐要求的8字节内存块上。</li>\n</ul>\n</blockquote>\n<h3 id=\"对齐规则\"><a href=\"#对齐规则\" class=\"headerlink\" title=\"对齐规则\"></a>对齐规则</h3><ol>\n<li>结构体变量的首地址能够被其最大基本类型成员的大小所整除。</li>\n</ol>\n<blockquote>\n<p><strong>备注</strong>：编译器在给结构体开辟空间时，首先找到结构体中最宽的基本数据类型，然后寻找内存地址能被该基本数据类型所整除的位置，作为结构体的首地址。将这个最宽的基本数据类型的大小作为上面介绍的对齐模数。</p>\n</blockquote>\n<ol start=\"2\">\n<li>结构体每个成员相对于结构体首地址的偏移量是当前成员大小的整数倍。</li>\n</ol>\n<blockquote>\n<p><strong>备注</strong>：为结构体的一个成员开辟空间之前，编译器首先检查预开辟空间的首地址相对于结构体首地址的偏移是否是该成员的整数倍，若是，则存放该成员，反之，则在该成员和上一个成员之间填充一定的字节，以达到整数倍的要求，也就是将预开辟空间的首地址后移几个字节。</p>\n<ul>\n<li>在GCC中，对齐模数最大只能是4，也就是说，即使结构体中有double类型，对齐模数还是4。</li>\n<li>除了平台差异外，还有预编译指令<code>#pragma pack(n)</code>手动设置，n–只能填1 2 4 8 16</li>\n</ul>\n</blockquote>\n<ol start=\"3\">\n<li>结构体的总大小为其最大基本类型成员大小的整数倍。</li>\n</ol>\n<blockquote>\n<p><strong>备注</strong>：结构体总大小是包括填充字节，最后一个成员满足上面两条以外，还必须满足第三条，否则就必须在最后填充几个字节以达到本条要求。</p>\n</blockquote>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">// 基本数据类型大小, win 64位。</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\">// 1</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// 2</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\">// 4</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\">// 4</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// 4</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 8</span>\n</code></pre>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Str1 <span class=\"token punctuation\">{</span>                                        \n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span>        \n<span class=\"token punctuation\">}</span>str1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Str1<span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211207161618.png\"></p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Str2 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">int</span>  c<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>str2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Str2<span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size2.png\"></p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Str3 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>str3<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Str3<span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span> <span class=\"token number\">12</span>    \n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size3.png\"></p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Str4 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>str4<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Str4<span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span> <span class=\"token number\">16</span>    \n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size4.png\"></p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> str5 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">short</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> e<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>str5<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Str4<span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span> <span class=\"token number\">24</span> \n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size5.png\"></p>\n<h2 id=\"结构体嵌套定义\"><a href=\"#结构体嵌套定义\" class=\"headerlink\" title=\"结构体嵌套定义\"></a>结构体嵌套定义</h2><p>成员也可以又是一个结构，即构成了嵌套的结构 。</p>\n<p>例如：在Books中嵌套Date结构</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_struct.png\"></p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> Date <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> Books <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> Date publication_time<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>连续使用成员运算符<code>.</code>来访问嵌套结构体的成员</p>\n<pre class=\" language-c\"><code class=\"language-c\">book1<span class=\"token punctuation\">.</span>publication_time<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">;</span>\nbook1<span class=\"token punctuation\">.</span>publication_time<span class=\"token punctuation\">.</span>month <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\nbook1<span class=\"token punctuation\">.</span>publication_time<span class=\"token punctuation\">.</span>day <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"结构作为函数参数\"><a href=\"#结构作为函数参数\" class=\"headerlink\" title=\"结构作为函数参数\"></a>结构作为函数参数</h2><ul>\n<li>结构体虽然是构造类型，但是结构体之间的赋值是值拷贝，而不是地址传递。</li>\n<li>结构体变量作为函数参数形参时也是值传递，在函数内修改形参，不会影响外界实参。</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">struct</span> Books <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> book_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> Books book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> Books book1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> Books book2<span class=\"token punctuation\">;</span>\n    book2 <span class=\"token operator\">=</span> book1<span class=\"token punctuation\">;</span>\n    book2<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d : %s\\n\"</span><span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 1 C</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d : %s\\n\"</span><span class=\"token punctuation\">,</span> book2<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">,</span> book2<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 1 C++</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>book1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 1 Python</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d : %s\\n\"</span><span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">,</span> book1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 1 C</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> Books book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    book<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d : %s\\n\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>book_id<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"什么是结构体\"><a href=\"#什么是结构体\" class=\"headerlink\" title=\"什么是结构体\"></a>什么是结构体</h2><p>结构体是一种构造类型，允许用户自定义，用于保存一组不同类型的数据。例如，书籍信息，书的编号应为整型；书名应为字符型。显然这组数据不能用数组来存放, 为了解决这个问题，C语言中给出了一种构造数据类型——“结构(structure)”或叫“结构体”。</p>\n<h2 id=\"定义结构体类型\"><a href=\"#定义结构体类型\" class=\"headerlink\" title=\"定义结构体类型\"></a>定义结构体类型</h2><p>通过定义结构体类型来告诉编译器，我们的结构体中需要存储哪些类型的数据。</p>\n<pre><code class=\"c\">struct 结构体名 &#123;\n    类型名1 成员名1;\n    类型名2 成员名2;\n    ......\n    类型名n 成员名n;\n&#125;;\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"c\">struct Books\n&#123;\n    int book_id;\n    char  *title;\n&#125;;\n</code></pre>\n<blockquote>\n<p>注意不要丢掉末尾的分号</p>\n</blockquote>\n<h2 id=\"定义结构体变量\"><a href=\"#定义结构体变量\" class=\"headerlink\" title=\"定义结构体变量\"></a>定义结构体变量</h2><p>定义好结构体类型后，我们就可以利用定义的结构体类型来定义结构体变量。</p>\n<p>&nbsp;<br>格式：<code>struct 结构体名 结构体变量名</code>; </p>\n<ul>\n<li>先定义结构体类型，再定义变量</li>\n</ul>\n<pre><code class=\"c\">struct Books book1;\n</code></pre>\n<ul>\n<li>定义结构体类型的同时定义变量</li>\n</ul>\n<pre><code class=\"c\">struct Books &#123;\n    int book_id;\n    char *title;\n&#125; book2;\n</code></pre>\n<ul>\n<li>匿名结构体定义结构体变量 (这种方法可以省略结构体类型名，但不能复用)</li>\n</ul>\n<pre><code class=\"c\">struct &#123;\n    int book_id;\n    char *title;\n&#125; book3;\n</code></pre>\n<h2 id=\"访问结构体成员\"><a href=\"#访问结构体成员\" class=\"headerlink\" title=\"访问结构体成员\"></a>访问结构体成员</h2><p>使用成员访问运算符<code>.</code>来访问结构体成员，形式为：<code>结构体变量名.成员名</code>。</p>\n<pre><code class=\"c\">struct Books &#123;\n    int book_id;\n    char *title;\n&#125;;\nstruct Books book1;\nboo1.book_id = 1000;\nbook1.title = &quot;C语言&quot;;\nprintf(&quot;%d : %s&quot;, book1.book_id, book1.title);\n</code></pre>\n<h2 id=\"结构体变量的初始化\"><a href=\"#结构体变量的初始化\" class=\"headerlink\" title=\"结构体变量的初始化\"></a>结构体变量的初始化</h2><ul>\n<li>定义的同时按顺序初始化</li>\n</ul>\n<pre><code class=\"c\">struct Books book1 = &#123;1, &quot;C语言&quot;&#125;;\n</code></pre>\n<ul>\n<li>定义的同时不按顺序初始化</li>\n</ul>\n<pre><code class=\"c\">struct Books book2 = &#123;.title = &quot;C++&quot;, .book_id = 2&#125;;\n</code></pre>\n<ul>\n<li>先定义再逐个初始化</li>\n</ul>\n<pre><code class=\"c\">struct Books book3;\nbook3.book_id = 3;\nbook3.title = &quot;Python&quot;;\n</code></pre>\n<ul>\n<li>先定义再一次性初始化</li>\n</ul>\n<pre><code class=\"c\">struct Books book4;\nbook4 = (struct Books) &#123;4, &quot;Java&quot;&#125;;\n</code></pre>\n<h2 id=\"结构体类型作用域\"><a href=\"#结构体类型作用域\" class=\"headerlink\" title=\"结构体类型作用域\"></a>结构体类型作用域</h2><ul>\n<li>结构体类型定义在函数内部的作用域与局部变量的作用域是相同的<ul>\n<li>从定义的那一行开始，直到遇到return或者大括号结束为止</li>\n</ul>\n</li>\n<li>结构体类型定义在函数外部的作用域与全局变量的作用域是相同的<ul>\n<li>从定义的那一行开始，直到本文结束为止</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"c\">struct Books &#123;\n    int book_id;\n    char *title;\n&#125;;\nstruct Books book1 = &#123;1, &quot;C语言&quot;&#125;;\nint main() &#123;\n    //定义一个同名的局部结构体，会屏蔽掉全局结构体\n    struct Books &#123;\n        int book_id;\n        char *author;\n    &#125;;\n    struct Books book1;\n    book1.book_id = 3;\n    // book1.title = &quot;Python&quot;; // 由于屏蔽掉了全局结构体，此处会报错\n    book1.author = &quot;Brian&quot;;\n    printf(&quot;%d : %s\\n&quot;, book1.book_id, book1.author);\n    f();\n    return 0; \n&#125; //局部结构体作用域到这结束\nvoid f() &#123;\n    //此处使用的是全局的结构体\n    printf(&quot;%d : %s\\n&quot;, book1.book_id, book1.title);\n&#125; \n</code></pre>\n<h2 id=\"结构体数组\"><a href=\"#结构体数组\" class=\"headerlink\" title=\"结构体数组\"></a>结构体数组</h2><p>结构体数组与数据值型数组不同之处在于每个数组元素都一个结构体类型的数据，它们分别包括各个成员项。</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211219134658.png\"></p>\n<p>&nbsp;<br>格式：<code>struct 结构体类型名称 数组名称[元素个数]</code></p>\n<pre><code class=\"c\">struct Books book[3];\n</code></pre>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>定义的同时做初始化</li>\n</ul>\n<pre><code class=\"c\">struct Books book[3] = &#123;&#123;1, \"C\"&#125;, &#123;2, \"C++\"&#125;&#125;; // 初始化了前两个\n</code></pre>\n<ul>\n<li>先定义在初始化</li>\n</ul>\n<pre><code class=\"c\">book[2].book_id = 3;\nbook[2].title = &quot;Python&quot;;\n</code></pre>\n<h2 id=\"结构体指针\"><a href=\"#结构体指针\" class=\"headerlink\" title=\"结构体指针\"></a>结构体指针</h2><p>指向结构体变量的指针。</p>\n<p>&nbsp;<br>格式：<code>struct 结构体类型名 *结构体指针变量名;</code></p>\n<p>通过结构体指针访问结构体成员的两种方式：</p>\n<ul>\n<li><code>(*结构体指针变量名).成员名</code></li>\n<li><code>结构体指针变量名-&gt;成员名</code></li>\n</ul>\n<pre><code class=\"c\">struct Books &#123;\n    int book_id;\n    char *title;\n&#125;;\nstruct Books book1 = &#123;1, &quot;C&quot;&#125;;\n\nint main() &#123;\n    struct Books *p;\n    p = &amp;book1;\n    printf(&quot;%d : %s\\n&quot;, (*p).book_id, (*p).title);\n    printf(&quot;%d : %s\\n&quot;, p-&gt;book_id, p-&gt;title);\n    return 0; \n&#125;\n</code></pre>\n<blockquote>\n<p>(*结构体指针变量名)的 ( ) 不能省略，因为成员符<code>.</code>的优先级高于<code>*</code>。 </p>\n</blockquote>\n<h2 id=\"结构体内存分析\"><a href=\"#结构体内存分析\" class=\"headerlink\" title=\"结构体内存分析\"></a>结构体内存分析</h2><ul>\n<li>给结构体变量开辟存储空间和给普通开辟存储空间一样, 会从内存地址大的位置开始开辟</li>\n<li>给结构体成员开辟存储空间和给数组元素开辟存储空间一样, 会从所占用内存地址小的位置开始开辟</li>\n<li>结构体变量占用的内存空间是其最大成员的大小的倍数(对齐问题)</li>\n</ul>\n<blockquote>\n<p>计算机系统对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的起始地址的值是某个数 k 的倍数，这就是所谓的内存对齐，而这个 k 则被称为该数据类型的对齐模数(alignment modulus)。<br>对齐的优点：</p>\n<ul>\n<li>简化了处理器与内存之间传输系统的设计</li>\n<li>可以提升读取数据的速度。<br>比如：处理器每次读写内存的时候都从某个8倍数的地址开始，一次读出或写入8个字节的数据，假如软件能保证double类型的数据都从8倍数地址开始，那么读或写一个double类型数据就只需要一次内存操作。否则，我们就可能需要两次内存操作才能完成这个动作，因为数据或许恰好横跨在两个符合对齐要求的8字节内存块上。</li>\n</ul>\n</blockquote>\n<h3 id=\"对齐规则\"><a href=\"#对齐规则\" class=\"headerlink\" title=\"对齐规则\"></a>对齐规则</h3><ol>\n<li>结构体变量的首地址能够被其最大基本类型成员的大小所整除。</li>\n</ol>\n<blockquote>\n<p><strong>备注</strong>：编译器在给结构体开辟空间时，首先找到结构体中最宽的基本数据类型，然后寻找内存地址能被该基本数据类型所整除的位置，作为结构体的首地址。将这个最宽的基本数据类型的大小作为上面介绍的对齐模数。</p>\n</blockquote>\n<ol start=\"2\">\n<li>结构体每个成员相对于结构体首地址的偏移量是当前成员大小的整数倍。</li>\n</ol>\n<blockquote>\n<p><strong>备注</strong>：为结构体的一个成员开辟空间之前，编译器首先检查预开辟空间的首地址相对于结构体首地址的偏移是否是该成员的整数倍，若是，则存放该成员，反之，则在该成员和上一个成员之间填充一定的字节，以达到整数倍的要求，也就是将预开辟空间的首地址后移几个字节。</p>\n<ul>\n<li>在GCC中，对齐模数最大只能是4，也就是说，即使结构体中有double类型，对齐模数还是4。</li>\n<li>除了平台差异外，还有预编译指令<code>#pragma pack(n)</code>手动设置，n–只能填1 2 4 8 16</li>\n</ul>\n</blockquote>\n<ol start=\"3\">\n<li>结构体的总大小为其最大基本类型成员大小的整数倍。</li>\n</ol>\n<blockquote>\n<p><strong>备注</strong>：结构体总大小是包括填充字节，最后一个成员满足上面两条以外，还必须满足第三条，否则就必须在最后填充几个字节以达到本条要求。</p>\n</blockquote>\n<pre><code class=\"c\">// 基本数据类型大小, win 64位。\nsizeof(char)   // 1\nsizeof(short)  // 2\nsizeof(int)    // 4\nsizeof(long)   // 4\nsizeof(float)  // 4\nsizeof(double) // 8\n</code></pre>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code class=\"c\">struct Str1 &#123;                                        \n    char a;    \n    char b;        \n&#125;str1;\nsizeof(Str1)  = 2\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211207161618.png\"></p>\n<pre><code class=\"c\">struct Str2 &#123;\n    char a; \n    char b; \n    int  c; \n&#125;str2;\nsizeof(Str2)  = 8\n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size2.png\"></p>\n<pre><code class=\"c\">struct Str3 &#123;\n    char a;\n    int  c;\n    char b;\n&#125;str3;\nsizeof(Str3)  = 12    \n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size3.png\"></p>\n<pre><code class=\"c\">struct Str4 &#123;\n    char a;\n    char b;\n    int  c;\n    double d;\n&#125;str4;\nsizeof(Str4)  = 16    \n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size4.png\"></p>\n<pre><code class=\"c\">struct str5 &#123;\n    char a;\n    short b;\n    int c;\n    double d;\n    char e[3];\n&#125;str5;\nsizeof(Str4)  = 24 \n</code></pre>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_size5.png\"></p>\n<h2 id=\"结构体嵌套定义\"><a href=\"#结构体嵌套定义\" class=\"headerlink\" title=\"结构体嵌套定义\"></a>结构体嵌套定义</h2><p>成员也可以又是一个结构，即构成了嵌套的结构 。</p>\n<p>例如：在Books中嵌套Date结构</p>\n<p><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/struct_struct.png\"></p>\n<pre><code class=\"c\">struct Date &#123;\n    int year;\n    int month;\n    int day;\n&#125;;\nstruct Books &#123;\n    int book_id;\n    char *title;\n    struct Date publication_time;\n&#125;;\n</code></pre>\n<p>连续使用成员运算符<code>.</code>来访问嵌套结构体的成员</p>\n<pre><code class=\"c\">book1.publication_time.year = 2021;\nbook1.publication_time.month = 12;\nbook1.publication_time.day = 6;\n</code></pre>\n<h2 id=\"结构作为函数参数\"><a href=\"#结构作为函数参数\" class=\"headerlink\" title=\"结构作为函数参数\"></a>结构作为函数参数</h2><ul>\n<li>结构体虽然是构造类型，但是结构体之间的赋值是值拷贝，而不是地址传递。</li>\n<li>结构体变量作为函数参数形参时也是值传递，在函数内修改形参，不会影响外界实参。</li>\n</ul>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\nstruct Books &#123;\n    int book_id;\n    char *title;\n&#125;;\nvoid f(struct Books book);\nint main() &#123;\n    struct Books book1 = &#123;1, &quot;C&quot;&#125;;\n    struct Books book2;\n    book2 = book1;\n    book2.title = &quot;C++&quot;;\n    printf(&quot;%d : %s\\n&quot;, book1.book_id, book1.title); // 1 C\n    printf(&quot;%d : %s\\n&quot;, book2.book_id, book2.title); // 1 C++\n    f(book1); // 1 Python\n    printf(&quot;%d : %s\\n&quot;, book1.book_id, book1.title); // 1 C\n    return 0; \n&#125; \nvoid f(struct Books book) &#123;\n    book.title = &quot;Python&quot;;\n    printf(&quot;%d : %s\\n&quot;, book.book_id, book.title);\n&#125;\n</code></pre>\n"},{"title":"论文写作-网站和工具分享","date":"2021-12-15T09:33:20.000Z","update":null,"img":null,"top":false,"cover":false,"toc":true,"mathjax":true,"summary":null,"_content":"\n## 论文检索\n\n### [谷歌学术镜像](https://ac.scmor.com/)\n最常用的，可以搜索到网上公布出来的全部文献。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160803.png)\n\n### [学术资源在线](http://spis.hnlat.com/)\n有文献求助功能，遇到有需要付费的下载文献可以在这里进行求助。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160914.png)\n\n### [IEEE](https://ieeexplore.ieee.org/Xplore/home.jsp)\nIEEE 出版的期刊文章和 EI 收录的会议文章都可以在这里找到。在校生一般都可以免费使用，文献主要涉及主要是工程学科。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160520.png)\n\n### [Web of Science](https://www.webofscience.com/wos/woscc/basic-search)\n主要用于查找SCI收录的文献。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160827.png)\n\n\n### [CCF数字图书馆](https://dl.ccf.org.cn/index.html?_ack=1)\n在这里可以看CCF出版的文章和组织的国内学术会议，以及一些专题报告的资料。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215163243.png)\n\n### [Connected Papers](https://www.connectedpapers.com/)\n在这个网站可以查看文献之间的关联性，有助于直观的了解一个研究领域，找到重要文献。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215164045.png)\n\n---\n\n\n## 翻译工具\n\n### [知云文献翻译](https://www.zhiyunwenxian.cn/)\n官方的帮助文档：[知云-语雀文档](https://www.yuque.com/xtranslator/zy)\n\n### [沙拉查词插件](https://saladict.crimx.com/)\n沙拉查词可以让你在浏览器中 `\"选择句子 -> 点击图标\"` 直接翻译，支持多重查词模式混合使用，无论是单击、双击、图标、悬浮还是快捷键。多个词典同时查询，根据情景模式以及查词语言、长度动态显示不同词典组合，一键切换快速得到需要的结果。\n\n---\n\n## 文献管理\n\n文献管理三剑客Endnote、Noteexpress和Mendely，根据自己的喜好选择一个即可。\n\n---\n\n## 写作工具\n\n### LaTeX排版\nLaTeX的介绍和使用：[LaTeX的使用](https://www.yuque.com/chengbudong/coding/fyc92o?view=doc_embed)\n\n句式模板库：[Academic Phrasebank](https://www.phrasebank.manchester.ac.uk/)\n\nAcademic Phrasebank 提供了一些学术论文写作措辞上的“细节”例子。比如，如何更好的并表达论文研究主题对社会的重要性、如何更好的表达以往研究的不足之处、如何更好的讨论研究结果等。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215150422.png)\n\n### 词组搭配查询：[Linggle](https://linggle.com/)\nLinggle 搜索引擎是一个可用于英语写作的语法、句子工具，可帮助写作者分析更准确的英文写作建议，能够根据词性来推测短句和句子，可精准的分享出完整英文句子如何撰写。例如，想找搭配 the performance 的词，可以这么搜索`_ the performance`。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215151757.png)\n\n### 语句搜索：[Ludwig](https://ludwig.guru/zh/)\nLudwig 是第一个整句的搜索引擎。通过搜索可靠的资源库，提供符合您表达语境的语句，帮助您提升英语写作能力。可以对比两个句子的使用频率、查找近义词、更好的短语翻译等。缺点是免费用户有查询次数限制。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215152653.png)\n\n### 语法检查：[Grammarly](https://app.grammarly.com/)\nGrammarly 是一款在线语法纠正和校对工具，还支持Windows、Mac、iOS和Android等多个平台。它能够检查单词拼写、纠正标点符号、修正语法错误、调整语气以及给出风格建议等；对学术写作来说，Grammarly还可以帮助查重。免费版基本够用，付费版可以选择学术写作检查模式。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215153817.png)\n\n---\n## 期刊查询\n### [知网-出版物检索](https://navi.cnki.net/knavi/)\n主要用于查看中文期刊的收录信息：北大中文核心、CSCD、EI。\n\n### [学术资源在线-期刊查询](http://spis.hnlat.com/journal)\n有期刊导航系统，可以根据学科类别、收录信息筛选需要的期刊，中文期刊和英文期刊都支持。\n\n### [LetPub-SCI期刊查询](http://www.letpub.com.cn/index.php?page=journalapp)\n主要用于查看一个期刊的SCI收录情况：属于几区、影响因子、是否被预警等。\n\n## 论文源代码查找\n### [Code Ocean](https://codeocean.com/explore)\n支持在线运行和修改。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170219.png)\n\n### [Browse State-of-the-Art](https://paperswithcode.com/sota)\n主要用于寻找机器学习领域的算法代码。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170556.png)\n\n### [GitHub](https://github.com)\n最强的开源代码托管网站。\n","source":"_posts/论文写作-网站和工具分享.md","raw":"---\ntitle: 论文写作-网站和工具分享\ndate: 2021-12-15 17:33:20\nupdate: \nimg: \ntop: false\ncover: false\ntoc: true\nmathjax: true\nsummary: \ntags: \n- 论文写作\ncategories: 资源分享\n---\n\n## 论文检索\n\n### [谷歌学术镜像](https://ac.scmor.com/)\n最常用的，可以搜索到网上公布出来的全部文献。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160803.png)\n\n### [学术资源在线](http://spis.hnlat.com/)\n有文献求助功能，遇到有需要付费的下载文献可以在这里进行求助。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160914.png)\n\n### [IEEE](https://ieeexplore.ieee.org/Xplore/home.jsp)\nIEEE 出版的期刊文章和 EI 收录的会议文章都可以在这里找到。在校生一般都可以免费使用，文献主要涉及主要是工程学科。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160520.png)\n\n### [Web of Science](https://www.webofscience.com/wos/woscc/basic-search)\n主要用于查找SCI收录的文献。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160827.png)\n\n\n### [CCF数字图书馆](https://dl.ccf.org.cn/index.html?_ack=1)\n在这里可以看CCF出版的文章和组织的国内学术会议，以及一些专题报告的资料。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215163243.png)\n\n### [Connected Papers](https://www.connectedpapers.com/)\n在这个网站可以查看文献之间的关联性，有助于直观的了解一个研究领域，找到重要文献。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215164045.png)\n\n---\n\n\n## 翻译工具\n\n### [知云文献翻译](https://www.zhiyunwenxian.cn/)\n官方的帮助文档：[知云-语雀文档](https://www.yuque.com/xtranslator/zy)\n\n### [沙拉查词插件](https://saladict.crimx.com/)\n沙拉查词可以让你在浏览器中 `\"选择句子 -> 点击图标\"` 直接翻译，支持多重查词模式混合使用，无论是单击、双击、图标、悬浮还是快捷键。多个词典同时查询，根据情景模式以及查词语言、长度动态显示不同词典组合，一键切换快速得到需要的结果。\n\n---\n\n## 文献管理\n\n文献管理三剑客Endnote、Noteexpress和Mendely，根据自己的喜好选择一个即可。\n\n---\n\n## 写作工具\n\n### LaTeX排版\nLaTeX的介绍和使用：[LaTeX的使用](https://www.yuque.com/chengbudong/coding/fyc92o?view=doc_embed)\n\n句式模板库：[Academic Phrasebank](https://www.phrasebank.manchester.ac.uk/)\n\nAcademic Phrasebank 提供了一些学术论文写作措辞上的“细节”例子。比如，如何更好的并表达论文研究主题对社会的重要性、如何更好的表达以往研究的不足之处、如何更好的讨论研究结果等。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215150422.png)\n\n### 词组搭配查询：[Linggle](https://linggle.com/)\nLinggle 搜索引擎是一个可用于英语写作的语法、句子工具，可帮助写作者分析更准确的英文写作建议，能够根据词性来推测短句和句子，可精准的分享出完整英文句子如何撰写。例如，想找搭配 the performance 的词，可以这么搜索`_ the performance`。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215151757.png)\n\n### 语句搜索：[Ludwig](https://ludwig.guru/zh/)\nLudwig 是第一个整句的搜索引擎。通过搜索可靠的资源库，提供符合您表达语境的语句，帮助您提升英语写作能力。可以对比两个句子的使用频率、查找近义词、更好的短语翻译等。缺点是免费用户有查询次数限制。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215152653.png)\n\n### 语法检查：[Grammarly](https://app.grammarly.com/)\nGrammarly 是一款在线语法纠正和校对工具，还支持Windows、Mac、iOS和Android等多个平台。它能够检查单词拼写、纠正标点符号、修正语法错误、调整语气以及给出风格建议等；对学术写作来说，Grammarly还可以帮助查重。免费版基本够用，付费版可以选择学术写作检查模式。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215153817.png)\n\n---\n## 期刊查询\n### [知网-出版物检索](https://navi.cnki.net/knavi/)\n主要用于查看中文期刊的收录信息：北大中文核心、CSCD、EI。\n\n### [学术资源在线-期刊查询](http://spis.hnlat.com/journal)\n有期刊导航系统，可以根据学科类别、收录信息筛选需要的期刊，中文期刊和英文期刊都支持。\n\n### [LetPub-SCI期刊查询](http://www.letpub.com.cn/index.php?page=journalapp)\n主要用于查看一个期刊的SCI收录情况：属于几区、影响因子、是否被预警等。\n\n## 论文源代码查找\n### [Code Ocean](https://codeocean.com/explore)\n支持在线运行和修改。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170219.png)\n\n### [Browse State-of-the-Art](https://paperswithcode.com/sota)\n主要用于寻找机器学习领域的算法代码。\n![](https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170556.png)\n\n### [GitHub](https://github.com)\n最强的开源代码托管网站。\n","slug":"论文写作-网站和工具分享","published":1,"updated":"2021-12-30T08:57:23.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxviwv4v002o8ou1cvdweeow","content":"<h2 id=\"论文检索\"><a href=\"#论文检索\" class=\"headerlink\" title=\"论文检索\"></a>论文检索</h2><h3 id=\"谷歌学术镜像\"><a href=\"#谷歌学术镜像\" class=\"headerlink\" title=\"谷歌学术镜像\"></a><a href=\"https://ac.scmor.com/\">谷歌学术镜像</a></h3><p>最常用的，可以搜索到网上公布出来的全部文献。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160803.png\"></p>\n<h3 id=\"学术资源在线\"><a href=\"#学术资源在线\" class=\"headerlink\" title=\"学术资源在线\"></a><a href=\"http://spis.hnlat.com/\">学术资源在线</a></h3><p>有文献求助功能，遇到有需要付费的下载文献可以在这里进行求助。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160914.png\"></p>\n<h3 id=\"IEEE\"><a href=\"#IEEE\" class=\"headerlink\" title=\"IEEE\"></a><a href=\"https://ieeexplore.ieee.org/Xplore/home.jsp\">IEEE</a></h3><p>IEEE 出版的期刊文章和 EI 收录的会议文章都可以在这里找到。在校生一般都可以免费使用，文献主要涉及主要是工程学科。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160520.png\"></p>\n<h3 id=\"Web-of-Science\"><a href=\"#Web-of-Science\" class=\"headerlink\" title=\"Web of Science\"></a><a href=\"https://www.webofscience.com/wos/woscc/basic-search\">Web of Science</a></h3><p>主要用于查找SCI收录的文献。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160827.png\"></p>\n<h3 id=\"CCF数字图书馆\"><a href=\"#CCF数字图书馆\" class=\"headerlink\" title=\"CCF数字图书馆\"></a><a href=\"https://dl.ccf.org.cn/index.html?_ack=1\">CCF数字图书馆</a></h3><p>在这里可以看CCF出版的文章和组织的国内学术会议，以及一些专题报告的资料。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215163243.png\"></p>\n<h3 id=\"Connected-Papers\"><a href=\"#Connected-Papers\" class=\"headerlink\" title=\"Connected Papers\"></a><a href=\"https://www.connectedpapers.com/\">Connected Papers</a></h3><p>在这个网站可以查看文献之间的关联性，有助于直观的了解一个研究领域，找到重要文献。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215164045.png\"></p>\n<hr>\n<h2 id=\"翻译工具\"><a href=\"#翻译工具\" class=\"headerlink\" title=\"翻译工具\"></a>翻译工具</h2><h3 id=\"知云文献翻译\"><a href=\"#知云文献翻译\" class=\"headerlink\" title=\"知云文献翻译\"></a><a href=\"https://www.zhiyunwenxian.cn/\">知云文献翻译</a></h3><p>官方的帮助文档：<a href=\"https://www.yuque.com/xtranslator/zy\">知云-语雀文档</a></p>\n<h3 id=\"沙拉查词插件\"><a href=\"#沙拉查词插件\" class=\"headerlink\" title=\"沙拉查词插件\"></a><a href=\"https://saladict.crimx.com/\">沙拉查词插件</a></h3><p>沙拉查词可以让你在浏览器中 <code>&quot;选择句子 -&gt; 点击图标&quot;</code> 直接翻译，支持多重查词模式混合使用，无论是单击、双击、图标、悬浮还是快捷键。多个词典同时查询，根据情景模式以及查词语言、长度动态显示不同词典组合，一键切换快速得到需要的结果。</p>\n<hr>\n<h2 id=\"文献管理\"><a href=\"#文献管理\" class=\"headerlink\" title=\"文献管理\"></a>文献管理</h2><p>文献管理三剑客Endnote、Noteexpress和Mendely，根据自己的喜好选择一个即可。</p>\n<hr>\n<h2 id=\"写作工具\"><a href=\"#写作工具\" class=\"headerlink\" title=\"写作工具\"></a>写作工具</h2><h3 id=\"LaTeX排版\"><a href=\"#LaTeX排版\" class=\"headerlink\" title=\"LaTeX排版\"></a>LaTeX排版</h3><p>LaTeX的介绍和使用：<a href=\"https://www.yuque.com/chengbudong/coding/fyc92o?view=doc_embed\">LaTeX的使用</a></p>\n<p>句式模板库：<a href=\"https://www.phrasebank.manchester.ac.uk/\">Academic Phrasebank</a></p>\n<p>Academic Phrasebank 提供了一些学术论文写作措辞上的“细节”例子。比如，如何更好的并表达论文研究主题对社会的重要性、如何更好的表达以往研究的不足之处、如何更好的讨论研究结果等。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215150422.png\"></p>\n<h3 id=\"词组搭配查询：Linggle\"><a href=\"#词组搭配查询：Linggle\" class=\"headerlink\" title=\"词组搭配查询：Linggle\"></a>词组搭配查询：<a href=\"https://linggle.com/\">Linggle</a></h3><p>Linggle 搜索引擎是一个可用于英语写作的语法、句子工具，可帮助写作者分析更准确的英文写作建议，能够根据词性来推测短句和句子，可精准的分享出完整英文句子如何撰写。例如，想找搭配 the performance 的词，可以这么搜索<code>_ the performance</code>。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215151757.png\"></p>\n<h3 id=\"语句搜索：Ludwig\"><a href=\"#语句搜索：Ludwig\" class=\"headerlink\" title=\"语句搜索：Ludwig\"></a>语句搜索：<a href=\"https://ludwig.guru/zh/\">Ludwig</a></h3><p>Ludwig 是第一个整句的搜索引擎。通过搜索可靠的资源库，提供符合您表达语境的语句，帮助您提升英语写作能力。可以对比两个句子的使用频率、查找近义词、更好的短语翻译等。缺点是免费用户有查询次数限制。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215152653.png\"></p>\n<h3 id=\"语法检查：Grammarly\"><a href=\"#语法检查：Grammarly\" class=\"headerlink\" title=\"语法检查：Grammarly\"></a>语法检查：<a href=\"https://app.grammarly.com/\">Grammarly</a></h3><p>Grammarly 是一款在线语法纠正和校对工具，还支持Windows、Mac、iOS和Android等多个平台。它能够检查单词拼写、纠正标点符号、修正语法错误、调整语气以及给出风格建议等；对学术写作来说，Grammarly还可以帮助查重。免费版基本够用，付费版可以选择学术写作检查模式。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215153817.png\"></p>\n<hr>\n<h2 id=\"期刊查询\"><a href=\"#期刊查询\" class=\"headerlink\" title=\"期刊查询\"></a>期刊查询</h2><h3 id=\"知网-出版物检索\"><a href=\"#知网-出版物检索\" class=\"headerlink\" title=\"知网-出版物检索\"></a><a href=\"https://navi.cnki.net/knavi/\">知网-出版物检索</a></h3><p>主要用于查看中文期刊的收录信息：北大中文核心、CSCD、EI。</p>\n<h3 id=\"学术资源在线-期刊查询\"><a href=\"#学术资源在线-期刊查询\" class=\"headerlink\" title=\"学术资源在线-期刊查询\"></a><a href=\"http://spis.hnlat.com/journal\">学术资源在线-期刊查询</a></h3><p>有期刊导航系统，可以根据学科类别、收录信息筛选需要的期刊，中文期刊和英文期刊都支持。</p>\n<h3 id=\"LetPub-SCI期刊查询\"><a href=\"#LetPub-SCI期刊查询\" class=\"headerlink\" title=\"LetPub-SCI期刊查询\"></a><a href=\"http://www.letpub.com.cn/index.php?page=journalapp\">LetPub-SCI期刊查询</a></h3><p>主要用于查看一个期刊的SCI收录情况：属于几区、影响因子、是否被预警等。</p>\n<h2 id=\"论文源代码查找\"><a href=\"#论文源代码查找\" class=\"headerlink\" title=\"论文源代码查找\"></a>论文源代码查找</h2><h3 id=\"Code-Ocean\"><a href=\"#Code-Ocean\" class=\"headerlink\" title=\"Code Ocean\"></a><a href=\"https://codeocean.com/explore\">Code Ocean</a></h3><p>支持在线运行和修改。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170219.png\"></p>\n<h3 id=\"Browse-State-of-the-Art\"><a href=\"#Browse-State-of-the-Art\" class=\"headerlink\" title=\"Browse State-of-the-Art\"></a><a href=\"https://paperswithcode.com/sota\">Browse State-of-the-Art</a></h3><p>主要用于寻找机器学习领域的算法代码。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170556.png\"></p>\n<h3 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a><a href=\"https://github.com/\">GitHub</a></h3><p>最强的开源代码托管网站。</p>\n","site":{"data":{"friends":[{"avatar":"https://godweiyang.com/medias/avatars/avatar.jpg","name":"韦阳","introduction":"字节跳动AI Lab NLP算法工程, 微信公众号: 算法码上来","url":"https://godweiyang.com/","title":"前去学习"},{"avatar":"https://blinkfox.github.io/medias/avatar.jpg","name":"闪烁之狐","introduction":"现实的抽象是语言, 语言的抽象是程序","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://view.moezx.cc/images/2019/01/19/TVKDX147_006.th.png","name":"樱花庄の白猫","introduction":"主攻R语言和Python, 略懂STATA","url":"https://2heng.xin/","title":"前去学习"},{"avatar":"https://shw2018.github.io/medias/avatars/hwsun.jpg","name":"洪卫","introduction":"电子科技大学18级硕士, 方向: 计算机视觉, 深度学习","url":"https://shw2018.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/medias/avatars/avatar.jpg","name":"Sitoi","introduction":"爬虫工程师","url":"https://sitoi.cn/","title":"前去学习"},{"avatar":"https://gitee.com/yafine66/blogimage/raw/master/img/avatar.jpg","name":"过客～励む","introduction":"专注于Web, 分享生活, 分享知识","url":"https://yafine-blog.cn/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"论文检索\"><a href=\"#论文检索\" class=\"headerlink\" title=\"论文检索\"></a>论文检索</h2><h3 id=\"谷歌学术镜像\"><a href=\"#谷歌学术镜像\" class=\"headerlink\" title=\"谷歌学术镜像\"></a><a href=\"https://ac.scmor.com/\">谷歌学术镜像</a></h3><p>最常用的，可以搜索到网上公布出来的全部文献。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160803.png\"></p>\n<h3 id=\"学术资源在线\"><a href=\"#学术资源在线\" class=\"headerlink\" title=\"学术资源在线\"></a><a href=\"http://spis.hnlat.com/\">学术资源在线</a></h3><p>有文献求助功能，遇到有需要付费的下载文献可以在这里进行求助。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160914.png\"></p>\n<h3 id=\"IEEE\"><a href=\"#IEEE\" class=\"headerlink\" title=\"IEEE\"></a><a href=\"https://ieeexplore.ieee.org/Xplore/home.jsp\">IEEE</a></h3><p>IEEE 出版的期刊文章和 EI 收录的会议文章都可以在这里找到。在校生一般都可以免费使用，文献主要涉及主要是工程学科。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160520.png\"></p>\n<h3 id=\"Web-of-Science\"><a href=\"#Web-of-Science\" class=\"headerlink\" title=\"Web of Science\"></a><a href=\"https://www.webofscience.com/wos/woscc/basic-search\">Web of Science</a></h3><p>主要用于查找SCI收录的文献。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215160827.png\"></p>\n<h3 id=\"CCF数字图书馆\"><a href=\"#CCF数字图书馆\" class=\"headerlink\" title=\"CCF数字图书馆\"></a><a href=\"https://dl.ccf.org.cn/index.html?_ack=1\">CCF数字图书馆</a></h3><p>在这里可以看CCF出版的文章和组织的国内学术会议，以及一些专题报告的资料。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215163243.png\"></p>\n<h3 id=\"Connected-Papers\"><a href=\"#Connected-Papers\" class=\"headerlink\" title=\"Connected Papers\"></a><a href=\"https://www.connectedpapers.com/\">Connected Papers</a></h3><p>在这个网站可以查看文献之间的关联性，有助于直观的了解一个研究领域，找到重要文献。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215164045.png\"></p>\n<hr>\n<h2 id=\"翻译工具\"><a href=\"#翻译工具\" class=\"headerlink\" title=\"翻译工具\"></a>翻译工具</h2><h3 id=\"知云文献翻译\"><a href=\"#知云文献翻译\" class=\"headerlink\" title=\"知云文献翻译\"></a><a href=\"https://www.zhiyunwenxian.cn/\">知云文献翻译</a></h3><p>官方的帮助文档：<a href=\"https://www.yuque.com/xtranslator/zy\">知云-语雀文档</a></p>\n<h3 id=\"沙拉查词插件\"><a href=\"#沙拉查词插件\" class=\"headerlink\" title=\"沙拉查词插件\"></a><a href=\"https://saladict.crimx.com/\">沙拉查词插件</a></h3><p>沙拉查词可以让你在浏览器中 <code>&quot;选择句子 -&gt; 点击图标&quot;</code> 直接翻译，支持多重查词模式混合使用，无论是单击、双击、图标、悬浮还是快捷键。多个词典同时查询，根据情景模式以及查词语言、长度动态显示不同词典组合，一键切换快速得到需要的结果。</p>\n<hr>\n<h2 id=\"文献管理\"><a href=\"#文献管理\" class=\"headerlink\" title=\"文献管理\"></a>文献管理</h2><p>文献管理三剑客Endnote、Noteexpress和Mendely，根据自己的喜好选择一个即可。</p>\n<hr>\n<h2 id=\"写作工具\"><a href=\"#写作工具\" class=\"headerlink\" title=\"写作工具\"></a>写作工具</h2><h3 id=\"LaTeX排版\"><a href=\"#LaTeX排版\" class=\"headerlink\" title=\"LaTeX排版\"></a>LaTeX排版</h3><p>LaTeX的介绍和使用：<a href=\"https://www.yuque.com/chengbudong/coding/fyc92o?view=doc_embed\">LaTeX的使用</a></p>\n<p>句式模板库：<a href=\"https://www.phrasebank.manchester.ac.uk/\">Academic Phrasebank</a></p>\n<p>Academic Phrasebank 提供了一些学术论文写作措辞上的“细节”例子。比如，如何更好的并表达论文研究主题对社会的重要性、如何更好的表达以往研究的不足之处、如何更好的讨论研究结果等。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215150422.png\"></p>\n<h3 id=\"词组搭配查询：Linggle\"><a href=\"#词组搭配查询：Linggle\" class=\"headerlink\" title=\"词组搭配查询：Linggle\"></a>词组搭配查询：<a href=\"https://linggle.com/\">Linggle</a></h3><p>Linggle 搜索引擎是一个可用于英语写作的语法、句子工具，可帮助写作者分析更准确的英文写作建议，能够根据词性来推测短句和句子，可精准的分享出完整英文句子如何撰写。例如，想找搭配 the performance 的词，可以这么搜索<code>_ the performance</code>。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215151757.png\"></p>\n<h3 id=\"语句搜索：Ludwig\"><a href=\"#语句搜索：Ludwig\" class=\"headerlink\" title=\"语句搜索：Ludwig\"></a>语句搜索：<a href=\"https://ludwig.guru/zh/\">Ludwig</a></h3><p>Ludwig 是第一个整句的搜索引擎。通过搜索可靠的资源库，提供符合您表达语境的语句，帮助您提升英语写作能力。可以对比两个句子的使用频率、查找近义词、更好的短语翻译等。缺点是免费用户有查询次数限制。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215152653.png\"></p>\n<h3 id=\"语法检查：Grammarly\"><a href=\"#语法检查：Grammarly\" class=\"headerlink\" title=\"语法检查：Grammarly\"></a>语法检查：<a href=\"https://app.grammarly.com/\">Grammarly</a></h3><p>Grammarly 是一款在线语法纠正和校对工具，还支持Windows、Mac、iOS和Android等多个平台。它能够检查单词拼写、纠正标点符号、修正语法错误、调整语气以及给出风格建议等；对学术写作来说，Grammarly还可以帮助查重。免费版基本够用，付费版可以选择学术写作检查模式。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215153817.png\"></p>\n<hr>\n<h2 id=\"期刊查询\"><a href=\"#期刊查询\" class=\"headerlink\" title=\"期刊查询\"></a>期刊查询</h2><h3 id=\"知网-出版物检索\"><a href=\"#知网-出版物检索\" class=\"headerlink\" title=\"知网-出版物检索\"></a><a href=\"https://navi.cnki.net/knavi/\">知网-出版物检索</a></h3><p>主要用于查看中文期刊的收录信息：北大中文核心、CSCD、EI。</p>\n<h3 id=\"学术资源在线-期刊查询\"><a href=\"#学术资源在线-期刊查询\" class=\"headerlink\" title=\"学术资源在线-期刊查询\"></a><a href=\"http://spis.hnlat.com/journal\">学术资源在线-期刊查询</a></h3><p>有期刊导航系统，可以根据学科类别、收录信息筛选需要的期刊，中文期刊和英文期刊都支持。</p>\n<h3 id=\"LetPub-SCI期刊查询\"><a href=\"#LetPub-SCI期刊查询\" class=\"headerlink\" title=\"LetPub-SCI期刊查询\"></a><a href=\"http://www.letpub.com.cn/index.php?page=journalapp\">LetPub-SCI期刊查询</a></h3><p>主要用于查看一个期刊的SCI收录情况：属于几区、影响因子、是否被预警等。</p>\n<h2 id=\"论文源代码查找\"><a href=\"#论文源代码查找\" class=\"headerlink\" title=\"论文源代码查找\"></a>论文源代码查找</h2><h3 id=\"Code-Ocean\"><a href=\"#Code-Ocean\" class=\"headerlink\" title=\"Code Ocean\"></a><a href=\"https://codeocean.com/explore\">Code Ocean</a></h3><p>支持在线运行和修改。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170219.png\"></p>\n<h3 id=\"Browse-State-of-the-Art\"><a href=\"#Browse-State-of-the-Art\" class=\"headerlink\" title=\"Browse State-of-the-Art\"></a><a href=\"https://paperswithcode.com/sota\">Browse State-of-the-Art</a></h3><p>主要用于寻找机器学习领域的算法代码。<br><img src=\"https://gitee.com/chengbudong/noteimg/raw/master/image/20211215170556.png\"></p>\n<h3 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a><a href=\"https://github.com/\">GitHub</a></h3><p>最强的开源代码托管网站。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxviwv3i00018ou1fdizc4ny","category_id":"ckxviwv3n00048ou1bn8h4g2v","_id":"ckxviwv3v000i8ou1gqb0hk4d"},{"post_id":"ckxviwv3l00038ou166amd5tm","category_id":"ckxviwv3s000c8ou1atzle6rw","_id":"ckxviwv3x000o8ou1dncmef3z"},{"post_id":"ckxviwv3w000l8ou1cv0e2yfc","category_id":"ckxviwv3v000j8ou1btsgckvk","_id":"ckxviwv40000t8ou10ksu1qh0"},{"post_id":"ckxviwv3p00078ou148ok6uar","category_id":"ckxviwv3v000j8ou1btsgckvk","_id":"ckxviwv41000x8ou1ep0bdufn"},{"post_id":"ckxviwv3x000n8ou13qkigcz9","category_id":"ckxviwv3v000j8ou1btsgckvk","_id":"ckxviwv42000z8ou1g88k2xkq"},{"post_id":"ckxviwv3q00098ou11elf2icw","category_id":"ckxviwv3v000j8ou1btsgckvk","_id":"ckxviwv4300128ou1ehkmdu2b"},{"post_id":"ckxviwv40000s8ou19ercawi1","category_id":"ckxviwv3v000j8ou1btsgckvk","_id":"ckxviwv4500168ou1dir70o27"},{"post_id":"ckxviwv41000w8ou19027gkor","category_id":"ckxviwv3v000j8ou1btsgckvk","_id":"ckxviwv46001a8ou1ecqe5g1d"},{"post_id":"ckxviwv3s000b8ou1482qh71v","category_id":"ckxviwv3v000j8ou1btsgckvk","_id":"ckxviwv47001d8ou1209sgxfb"},{"post_id":"ckxviwv3t000g8ou182fb0gz5","category_id":"ckxviwv3v000j8ou1btsgckvk","_id":"ckxviwv47001g8ou138adesw8"},{"post_id":"ckxviwv3u000h8ou15mtq5ik2","category_id":"ckxviwv3v000j8ou1btsgckvk","_id":"ckxviwv47001j8ou15plqd5pz"},{"post_id":"ckxviwv41000y8ou100mp68v5","category_id":"ckxviwv47001e8ou1gwfbfjm3","_id":"ckxviwv48001o8ou1gsyg22cv"},{"post_id":"ckxviwv4200118ou14wxj673x","category_id":"ckxviwv47001e8ou1gwfbfjm3","_id":"ckxviwv49001r8ou16menbzbq"},{"post_id":"ckxviwv4500158ou1e4nqajba","category_id":"ckxviwv47001e8ou1gwfbfjm3","_id":"ckxviwv49001t8ou1gdre6xu1"},{"post_id":"ckxviwv4600198ou17w9b7muk","category_id":"ckxviwv47001e8ou1gwfbfjm3","_id":"ckxviwv4a001x8ou1hetqg1jy"},{"post_id":"ckxviwv4v002n8ou19oua0x0u","category_id":"ckxviwv47001e8ou1gwfbfjm3","_id":"ckxviwv4w002r8ou1h9dzhxmm"},{"post_id":"ckxviwv4v002o8ou1cvdweeow","category_id":"ckxviwv3n00048ou1bn8h4g2v","_id":"ckxviwv4w002s8ou14pyu82yq"}],"PostTag":[{"post_id":"ckxviwv3i00018ou1fdizc4ny","tag_id":"ckxviwv3o00058ou1gisa4v4r","_id":"ckxviwv3t000e8ou1dfw7e8oc"},{"post_id":"ckxviwv3l00038ou166amd5tm","tag_id":"ckxviwv3s000d8ou1e0kya934","_id":"ckxviwv3w000m8ou1dfcrcbue"},{"post_id":"ckxviwv3p00078ou148ok6uar","tag_id":"ckxviwv3w000k8ou167t7cktg","_id":"ckxviwv4500148ou1djl4bts7"},{"post_id":"ckxviwv3p00078ou148ok6uar","tag_id":"ckxviwv3y000q8ou17sfvd5p2","_id":"ckxviwv4600188ou146ic3i88"},{"post_id":"ckxviwv3p00078ou148ok6uar","tag_id":"ckxviwv40000v8ou14cqw4g08","_id":"ckxviwv46001c8ou1c8wu0y5t"},{"post_id":"ckxviwv3q00098ou11elf2icw","tag_id":"ckxviwv4300138ou197jvfbbz","_id":"ckxviwv47001f8ou15vl49xjr"},{"post_id":"ckxviwv3s000b8ou1482qh71v","tag_id":"ckxviwv46001b8ou13mlgfb0p","_id":"ckxviwv47001i8ou16fwxao61"},{"post_id":"ckxviwv3t000g8ou182fb0gz5","tag_id":"ckxviwv47001h8ou14zpa820i","_id":"ckxviwv48001m8ou10bq9ayoa"},{"post_id":"ckxviwv3u000h8ou15mtq5ik2","tag_id":"ckxviwv48001l8ou1cvvw5axc","_id":"ckxviwv49001u8ou13lzs8q8k"},{"post_id":"ckxviwv3u000h8ou15mtq5ik2","tag_id":"ckxviwv48001p8ou19gjc4lrm","_id":"ckxviwv49001v8ou14kgg3pbw"},{"post_id":"ckxviwv3w000l8ou1cv0e2yfc","tag_id":"ckxviwv49001s8ou15rsxer9w","_id":"ckxviwv4a001z8ou1029e7bxp"},{"post_id":"ckxviwv3w000l8ou1cv0e2yfc","tag_id":"ckxviwv49001w8ou1eqfyb0l1","_id":"ckxviwv4a00208ou1g24kai79"},{"post_id":"ckxviwv3x000n8ou13qkigcz9","tag_id":"ckxviwv4a001y8ou13hxwd5o9","_id":"ckxviwv4a00228ou19da2755o"},{"post_id":"ckxviwv40000s8ou19ercawi1","tag_id":"ckxviwv4a00218ou1fz6z4t3m","_id":"ckxviwv4b00268ou15knsbtea"},{"post_id":"ckxviwv40000s8ou19ercawi1","tag_id":"ckxviwv3s000d8ou1e0kya934","_id":"ckxviwv4b00278ou11h7e049h"},{"post_id":"ckxviwv40000s8ou19ercawi1","tag_id":"ckxviwv48001l8ou1cvvw5axc","_id":"ckxviwv4b00298ou11zz94okc"},{"post_id":"ckxviwv40000s8ou19ercawi1","tag_id":"ckxviwv4a001y8ou13hxwd5o9","_id":"ckxviwv4c002a8ou1hh5qeqx0"},{"post_id":"ckxviwv41000w8ou19027gkor","tag_id":"ckxviwv4b00258ou19han1je8","_id":"ckxviwv4c002d8ou1hmcpe1j7"},{"post_id":"ckxviwv41000w8ou19027gkor","tag_id":"ckxviwv4b00288ou1cupchera","_id":"ckxviwv4d002e8ou15qmsfbv8"},{"post_id":"ckxviwv41000w8ou19027gkor","tag_id":"ckxviwv4c002b8ou15mjwfsws","_id":"ckxviwv4d002g8ou124i71tkc"},{"post_id":"ckxviwv41000y8ou100mp68v5","tag_id":"ckxviwv4c002c8ou10p6543xf","_id":"ckxviwv4d002h8ou18ww85830"},{"post_id":"ckxviwv4200118ou14wxj673x","tag_id":"ckxviwv4c002c8ou10p6543xf","_id":"ckxviwv4d002j8ou1hmgj4h1j"},{"post_id":"ckxviwv4500158ou1e4nqajba","tag_id":"ckxviwv4d002i8ou11p5lazyy","_id":"ckxviwv4e002l8ou1azbp5sh1"},{"post_id":"ckxviwv4600198ou17w9b7muk","tag_id":"ckxviwv4c002c8ou10p6543xf","_id":"ckxviwv4e002m8ou16rmt2xyn"},{"post_id":"ckxviwv4v002n8ou19oua0x0u","tag_id":"ckxviwv4d002i8ou11p5lazyy","_id":"ckxviwv4w002p8ou1f64oakej"},{"post_id":"ckxviwv4v002o8ou1cvdweeow","tag_id":"ckxviwv40000v8ou14cqw4g08","_id":"ckxviwv4w002q8ou1b61k0a1b"}],"Tag":[{"name":"B站","_id":"ckxviwv3o00058ou1gisa4v4r"},{"name":"Hexo","_id":"ckxviwv3s000d8ou1e0kya934"},{"name":"Latex","_id":"ckxviwv3w000k8ou167t7cktg"},{"name":"overleaf","_id":"ckxviwv3y000q8ou17sfvd5p2"},{"name":"论文写作","_id":"ckxviwv40000v8ou14cqw4g08"},{"name":"win10激活","_id":"ckxviwv4300138ou197jvfbbz"},{"name":"Typora","_id":"ckxviwv46001b8ou13mlgfb0p"},{"name":"Mysql","_id":"ckxviwv47001h8ou14zpa820i"},{"name":"PicGo","_id":"ckxviwv48001l8ou1cvvw5axc"},{"name":"图床","_id":"ckxviwv48001p8ou19gjc4lrm"},{"name":"Git","_id":"ckxviwv49001s8ou15rsxer9w"},{"name":"Github","_id":"ckxviwv49001w8ou1eqfyb0l1"},{"name":"markdown","_id":"ckxviwv4a001y8ou13hxwd5o9"},{"name":"vscode","_id":"ckxviwv4a00218ou1fz6z4t3m"},{"name":"Linux","_id":"ckxviwv4b00258ou19han1je8"},{"name":"wsl2","_id":"ckxviwv4b00288ou1cupchera"},{"name":"PyCharm","_id":"ckxviwv4c002b8ou15mjwfsws"},{"name":"Python","_id":"ckxviwv4c002c8ou10p6543xf"},{"name":"C语言","_id":"ckxviwv4d002i8ou11p5lazyy"}]}}